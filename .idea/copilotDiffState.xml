<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/MIGRATION_ROADMAP.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MIGRATION_ROADMAP.md" />
              <option name="originalContent" value="# ️ PPL Workout App - Migration Roadmap&#10;&#10;## Overview&#10;This document outlines the migration path from the current simplified architecture to the advanced, production-ready architecture shown in the database and workflow diagrams.&#10;&#10;## Current State Analysis ✅&#10;&#10;### Database Schema (Working) - Version 7&#10;- [x] **exercises** table: Enhanced with rich metadata (primaryMuscle, secondaryMuscles, equipment, difficulty, instructions, tips, category) ✅&#10;- [x] **workout_days** table: Stores daily workout sessions ✅&#10;- [x] **workout_entries** table: Links exercises to workout days ✅&#10;- [x] **set_entries** table: Individual set tracking with timing ✅&#10;- [x] **workout_templates** table: Template definitions for reusable workouts ✅&#10;- [x] **template_exercises** table: Junction table linking templates to exercises ✅&#10;&#10;### Features Working ✅&#10;- [x] PPL workout creation based on day of week&#10;- [x] **Template-based workout creation system** ✅&#10;- [x] Exercise detail screens with set progression&#10;- [x] Individual set timing and completion tracking&#10;- [x] Cross-exercise contamination fixed (sets isolated per exercise)&#10;- [x] Database reset functionality for development&#10;- [x] Timer functionality with start/stop per set&#10;- [x] Enhanced exercise library with rich metadata (34+ exercises)&#10;- [x] Automatic template population on database creation&#10;- [x] Template selection and creation methods&#10;&#10;### Current Architecture Status&#10;- **Exercise Library**: Rich metadata with 34+ exercises in `ExerciseData.getPPLExercises()` ✅&#10;- **Template System**: Complete entities, DAOs, and repository methods ✅&#10;- **Workout Logic**: **Both day-based AND template-based systems working** ✅&#10;- **Database Version**: 7 (with complete template system migration)&#10;- **UI Layer**: Daily workout screens with template integration ✅&#10;&#10;---&#10;&#10;## Phase 1: Core Foundation ✅ **COMPLETED**&#10;&#10;### 1.1 Project Setup &amp; Database ✅&#10;- [x] 1.1.1 Android project with Kotlin &amp; Compose&#10;- [x] 1.1.2 Room database implementation&#10;- [x] 1.1.3 Entity models (WorkoutDay, Exercise, WorkoutEntry, SetEntry)&#10;- [x] 1.1.4 DAO implementations&#10;- [x] 1.1.5 Repository pattern&#10;&#10;### 1.2 Basic UI &amp; Navigation ✅&#10;- [x] 1.2.1 Material Design 3 theme&#10;- [x] 1.2.2 Navigation between screens&#10;- [x] 1.2.3 Daily workout view&#10;- [x] 1.2.4 Exercise list screen&#10;- [x] 1.2.5 Exercise detail screen&#10;&#10;### 1.3 Workout Logic ✅&#10;- [x] 1.3.1 PPL schedule implementation (6-day rotation)&#10;- [x] 1.3.2 Rest day handling with background image&#10;- [x] 1.3.3 Workout day creation and exercise population&#10;- [x] 1.3.4 Set tracking and completion logic&#10;- [x] 1.3.5 Exercise progress tracking&#10;&#10;### 1.4 Timer &amp; Time Tracking ✅ **COMPLETED**&#10;- [x] 1.4.1 Individual set timers (start/stop functionality)&#10;- [x] 1.4.2 Total exercise time calculation&#10;- [x] 1.4.3 Set completion tracking&#10;- [x] 1.4.4 Sequential set unlocking&#10;- [x] 1.4.5 Rest period timer implementation ✅ **FIXED**&#10;- [x] 1.4.6 Proper time formatting (HH:MM:SS) ✅ **FIXED**&#10;&#10;---&#10;&#10;##  **HOTFIX SECTION** ✅ **ALL COMPLETED**&#10;&#10;### Timer &amp; Time Display Issues ✅&#10;- [x] **HF-1**: Fix timer display format (was showing weird increments like 1,3,5,7...)&#10;  - ✅ FIXED: Timer now shows proper HH:MM:SS format&#10;  - ✅ FIXED: Standard stopwatch behavior (00:00:01, 00:00:02, etc.)&#10;&#10;- [x] **HF-2**: Fix total exercise time calculation&#10;  - ✅ FIXED: Total time shows accurate values&#10;  - ✅ FIXED: Consistent time calculations including rest periods&#10;  - ✅ FIXED: Rest time properly captured and added to total&#10;&#10;- [x] **HF-3**: Remove &quot;Mark as Done&quot; button confusion&#10;  - ✅ FIXED: Simplified to Start → Stop → Completed flow&#10;  - ✅ FIXED: Clean UX with single action buttons&#10;&#10;- [x] **HF-4**: Fix total time live updates&#10;  - ✅ FIXED: Total time only updates when set completes&#10;  - ✅ FIXED: No more live updates during active sets&#10;&#10;### UI/UX Improvements ✅&#10;- [x] **HF-5**: Color scheme improvements (black text, yellow accents)&#10;- [x] **HF-6**: Exercise completion state persistence&#10;- [x] **HF-7**: Set counter display accuracy&#10;- [x] **HF-8**: Database reset functionality&#10;&#10;### Rest Timer Implementation ✅ **NEW - COMPLETED**&#10;- [x] **HF-9**: Complete rest timer functionality&#10;  - ✅ FIXED: Rest timer starts automatically after set completion&#10;  - ✅ FIXED: Rest time captured and added to total exercise time&#10;  - ✅ FIXED: Rest timer stops when next set starts&#10;  - ✅ FIXED: Total time = completed set times + accumulated rest time&#10;  - ✅ TESTED: Manual testing confirms expected behavior&#10;&#10;---&#10;&#10;## Phase 2: Set Data Collection &amp; Management  **NEXT PRIORITY**&#10;&#10;### 2.1 Set Performance Data Entry ⭐ **NEW REQUIREMENT**&#10;- [x] 2.1.1 Add database fields for set performance data&#10;  - Add `reps_performed` (INT) to set_entries table&#10;  - Add `weight_used` (DECIMAL/FLOAT) to set_entries table&#10;  - Create database migration for new fields&#10;  - Update SetEntry entity and DAO methods&#10;&#10;- [x] 2.1.2 Set completion popup with data entry&#10;  - Create popup/dialog component for set data entry&#10;  - Two required text fields: &quot;Reps Performed&quot; and &quot;Weight Used&quot;&#10;  - Mandatory fields - no cancel button, only &quot;ADD&quot; button&#10;  - Popup appears when user completes a set (stops timer)&#10;  - Rest timer continues running in background during data entry&#10;&#10;- [x] 2.1.3 Set data persistence and validation&#10;  - Save reps and weight data to database on popup submit&#10;  - Input validation (positive numbers, reasonable ranges)&#10;  - Update set completion flow to include data entry step&#10;  - Handle data persistence errors gracefully&#10;&#10;### 2.2 Set Data Editing &amp; Management  **NEW REQUIREMENT**&#10;- [x] 2.2.1 Edit completed set data ✅ **COMPLETED**&#10;  - Allow users to edit reps/weight after set completion ✅&#10;  - Add edit button/icon to completed set cards ✅&#10;  - Reopen data entry popup with pre-filled values ✅&#10;  - Update database with edited values ✅&#10;&#10;- [x] 2.2.2 Dynamic set management ✅ **COMPLETED**&#10;  - Add &quot;+&quot; button to add extra sets to exercise ✅&#10;  - Add &quot;−&quot; button to remove sets from exercise (if not completed) ✅&#10;  - Update exercise completion logic for dynamic set counts ✅&#10;  - Maintain proper set numbering when adding/removing sets ✅&#10;&#10;- [x] 2.2.3 Enhanced set display ✅ **COMPLETED**&#10;  - Show reps and weight data on set cards ✅&#10;  - Display format: &quot;Set 1: 12 reps @ 135 lbs&quot; (when completed) ✅&#10;  - Show &quot;Set 1: — reps @ — lbs&quot; (when not completed) ✅&#10;  - Visual distinction between completed and pending sets ✅&#10;&#10;### 2.3 Data Validation &amp; UX Improvements  &#10;- [ ] 2.3.1 Input validation and user guidance&#10;  - Numeric keyboard for reps and weight fields&#10;  - Input hints and placeholders (&quot;e.g., 12&quot;, &quot;e.g., 135.5&quot;)&#10;  - Validation messages for invalid inputs&#10;  - Auto-focus progression between fields&#10;&#10;- [x] 2.3.2 Enhanced timer integration ✅&#10;  - Rest timer continues during data entry popup ✅&#10;  - Clear visual indication that rest timer is still running ✅&#10;  - Seamless transition from set completion → data entry → rest period ✅&#10;  - Timer state preservation across popup interactions ✅&#10;&#10;- [x] 2.3.3 Rest timer notification system ✅&#10;  - One-minute rest milestone notification with sound ✅ &#10;  - Notification permission handling for Android 13+ ✅&#10;  - Proper notification channel setup with sound and vibration ✅&#10;  - Heads-up notification display for better visibility ✅&#10;  - Automatic notification cancellation when rest ends ✅&#10;&#10;- [x] 2.3.4 Additional UX enhancements ✅&#10;  - [x] Proper back button navigation handling ✅&#10;  - [x] System back button override to prevent accidental app exit ✅&#10;  - [x] Consistent navigation between screens ✅&#10;  - [x] Haptic feedback for important actions ✅&#10;  - [x] Animation transitions between screens ✅&#10;  - [x] Accessibility improvements&#10;&#10;---&#10;&#10;## Phase 3: Enhanced Exercise Experience  **PLANNED**&#10;- [ ] 3.1.1 Exercise instruction screens&#10;- [ ] 3.1.2 Exercise tips and form cues&#10;- [ ] 3.1.3 Primary/secondary muscle groups display&#10;- [ ] 3.1.4 Equipment requirements display&#10;- [ ] 3.1.5 Exercise difficulty indicators&#10;&#10;### 3.2 Calendar &amp; History View  **PLANNED**&#10;- [ ] 3.2.1 Calendar navigation&#10;- [ ] 3.2.2 Historical workout data view&#10;- [ ] 3.2.3 Progress tracking over time&#10;- [ ] 3.2.4 Workout completion statistics&#10;&#10;---&#10;&#10;## Phase 4: Advanced Features  **PLANNED**&#10;&#10;### 4.1 Location Services&#10;- [ ] 4.1.1 Gym location detection&#10;- [ ] 4.1.2 Location-based notifications&#10;- [ ] 4.1.3 Gym check-in tracking&#10;&#10;### 4.2 Data Management&#10;- [ ] 4.2.1 Data export functionality&#10;- [ ] 4.2.2 Backup/restore system&#10;- [ ] 4.2.3 30-day data cleanup job&#10;- [ ] 4.2.4 Data migration handling&#10;&#10;### 4.3 Enhanced UX&#10;- [ ] 4.3.1 Dark mode support&#10;- [ ] 4.3.2 Accessibility improvements&#10;- [ ] 4.3.3 Animations and transitions&#10;- [ ] 4.3.4 Haptic feedback&#10;&#10;---&#10;&#10;## Development Status&#10;&#10;### Current Achievement: PHASE 1 COMPLETE! &#10;**Major Milestone**: All core functionality is now solid and reliable!&#10;&#10;✅ **Database &amp; Architecture** - Robust Room implementation&#10;✅ **Timer System** - Professional-grade stopwatch with rest periods&#10;✅ **Workout Flow** - Smooth set progression and completion tracking&#10;✅ **UI/UX Foundation** - Clean, consistent Material Design 3 interface&#10;✅ **Data Persistence** - Reliable workout state management&#10;&#10;### Next Priority: Phase 2.1 - Set Data Collection &amp; Management&#10;**Focus**: Comprehensive workout tracking with performance data&#10;&#10;**Benefits for Users**:&#10;- Track actual reps performed and weight used per set&#10;- Progressive overload monitoring for strength gains&#10;- Flexible set management (add/remove sets during workout)&#10;- Professional workout data collection and analytics&#10;&#10;### Implementation Ready:&#10;The app now has a solid foundation with:&#10;- ✅ Accurate timer system (including rest periods)&#10;- ✅ Reliable data persistence&#10;- ✅ Clean user interface&#10;- ✅ Proper error handling&#10;- ✅ Comprehensive logging for debugging&#10;&#10;**Ready to implement**:&#10;- Database schema updates for reps_performed and weight_used&#10;- Set completion popup with mandatory data entry&#10;- Dynamic set management (+/- buttons)&#10;- Enhanced set display with performance data&#10;&#10;---&#10;&#10;## Testing Status&#10;&#10;### Core Functionality ✅ **ALL VERIFIED**&#10;- [x] App starts without crashes&#10;- [x] Workout creation for current day&#10;- [x] Exercise navigation&#10;- [x] Set completion tracking&#10;- [x] Database persistence&#10;- [x] Timer accuracy and formatting&#10;- [x] Rest timer functionality&#10;- [x] Total time calculations (including rest periods)&#10;&#10;### Ready for Phase 2 Implementation ✅&#10;All Phase 1 requirements have been implemented and tested successfully.&#10;Database and architecture are ready for performance data collection features.&#10;&#10;---&#10;&#10;*Last Updated: July 31, 2025*&#10;*Current Status: Phase 1 Complete ✅ | Ready for Phase 2.1 *&#10;" />
              <option name="updatedContent" value="# ️ PPL Workout App - Migration Roadmap&#10;&#10;## Overview&#10;This document outlines the migration path from the current simplified architecture to the advanced, production-ready architecture shown in the database and workflow diagrams.&#10;&#10;## Current State Analysis ✅&#10;&#10;### Database Schema (Working) - Version 7&#10;- [x] **exercises** table: Enhanced with rich metadata (primaryMuscle, secondaryMuscles, equipment, difficulty, instructions, tips, category) ✅&#10;- [x] **workout_days** table: Stores daily workout sessions ✅&#10;- [x] **workout_entries** table: Links exercises to workout days ✅&#10;- [x] **set_entries** table: Individual set tracking with timing ✅&#10;- [x] **workout_templates** table: Template definitions for reusable workouts ✅&#10;- [x] **template_exercises** table: Junction table linking templates to exercises ✅&#10;&#10;### Features Working ✅&#10;- [x] PPL workout creation based on day of week&#10;- [x] **Template-based workout creation system** ✅&#10;- [x] Exercise detail screens with set progression&#10;- [x] Individual set timing and completion tracking&#10;- [x] Cross-exercise contamination fixed (sets isolated per exercise)&#10;- [x] Database reset functionality for development&#10;- [x] Timer functionality with start/stop per set&#10;- [x] Enhanced exercise library with rich metadata (34+ exercises)&#10;- [x] Automatic template population on database creation&#10;- [x] Template selection and creation methods&#10;&#10;### Current Architecture Status&#10;- **Exercise Library**: Rich metadata with 34+ exercises in `ExerciseData.getPPLExercises()` ✅&#10;- **Template System**: Complete entities, DAOs, and repository methods ✅&#10;- **Workout Logic**: **Both day-based AND template-based systems working** ✅&#10;- **Database Version**: 7 (with complete template system migration)&#10;- **UI Layer**: Daily workout screens with template integration ✅&#10;&#10;---&#10;&#10;## Phase 1: Core Foundation ✅ **COMPLETED**&#10;&#10;### 1.1 Project Setup &amp; Database ✅&#10;- [x] 1.1.1 Android project with Kotlin &amp; Compose&#10;- [x] 1.1.2 Room database implementation&#10;- [x] 1.1.3 Entity models (WorkoutDay, Exercise, WorkoutEntry, SetEntry)&#10;- [x] 1.1.4 DAO implementations&#10;- [x] 1.1.5 Repository pattern&#10;&#10;### 1.2 Basic UI &amp; Navigation ✅&#10;- [x] 1.2.1 Material Design 3 theme&#10;- [x] 1.2.2 Navigation between screens&#10;- [x] 1.2.3 Daily workout view&#10;- [x] 1.2.4 Exercise list screen&#10;- [x] 1.2.5 Exercise detail screen&#10;&#10;### 1.3 Workout Logic ✅&#10;- [x] 1.3.1 PPL schedule implementation (6-day rotation)&#10;- [x] 1.3.2 Rest day handling with background image&#10;- [x] 1.3.3 Workout day creation and exercise population&#10;- [x] 1.3.4 Set tracking and completion logic&#10;- [x] 1.3.5 Exercise progress tracking&#10;&#10;### 1.4 Timer &amp; Time Tracking ✅ **COMPLETED**&#10;- [x] 1.4.1 Individual set timers (start/stop functionality)&#10;- [x] 1.4.2 Total exercise time calculation&#10;- [x] 1.4.3 Set completion tracking&#10;- [x] 1.4.4 Sequential set unlocking&#10;- [x] 1.4.5 Rest period timer implementation ✅ **FIXED**&#10;- [x] 1.4.6 Proper time formatting (HH:MM:SS) ✅ **FIXED**&#10;&#10;---&#10;&#10;##  **HOTFIX SECTION** ✅ **ALL COMPLETED**&#10;&#10;### Timer &amp; Time Display Issues ✅&#10;- [x] **HF-1**: Fix timer display format (was showing weird increments like 1,3,5,7...)&#10;  - ✅ FIXED: Timer now shows proper HH:MM:SS format&#10;  - ✅ FIXED: Standard stopwatch behavior (00:00:01, 00:00:02, etc.)&#10;&#10;- [x] **HF-2**: Fix total exercise time calculation&#10;  - ✅ FIXED: Total time shows accurate values&#10;  - ✅ FIXED: Consistent time calculations including rest periods&#10;  - ✅ FIXED: Rest time properly captured and added to total&#10;&#10;- [x] **HF-3**: Remove &quot;Mark as Done&quot; button confusion&#10;  - ✅ FIXED: Simplified to Start → Stop → Completed flow&#10;  - ✅ FIXED: Clean UX with single action buttons&#10;&#10;- [x] **HF-4**: Fix total time live updates&#10;  - ✅ FIXED: Total time only updates when set completes&#10;  - ✅ FIXED: No more live updates during active sets&#10;&#10;### UI/UX Improvements ✅&#10;- [x] **HF-5**: Color scheme improvements (black text, yellow accents)&#10;- [x] **HF-6**: Exercise completion state persistence&#10;- [x] **HF-7**: Set counter display accuracy&#10;- [x] **HF-8**: Database reset functionality&#10;&#10;### Rest Timer Implementation ✅ **NEW - COMPLETED**&#10;- [x] **HF-9**: Complete rest timer functionality&#10;  - ✅ FIXED: Rest timer starts automatically after set completion&#10;  - ✅ FIXED: Rest time captured and added to total exercise time&#10;  - ✅ FIXED: Rest timer stops when next set starts&#10;  - ✅ FIXED: Total time = completed set times + accumulated rest time&#10;  - ✅ TESTED: Manual testing confirms expected behavior&#10;&#10;---&#10;&#10;## Phase 2: Set Data Collection &amp; Management  **NEXT PRIORITY**&#10;&#10;### 2.1 Set Performance Data Entry ⭐ **NEW REQUIREMENT**&#10;- [x] 2.1.1 Add database fields for set performance data&#10;  - Add `reps_performed` (INT) to set_entries table&#10;  - Add `weight_used` (DECIMAL/FLOAT) to set_entries table&#10;  - Create database migration for new fields&#10;  - Update SetEntry entity and DAO methods&#10;&#10;- [x] 2.1.2 Set completion popup with data entry&#10;  - Create popup/dialog component for set data entry&#10;  - Two required text fields: &quot;Reps Performed&quot; and &quot;Weight Used&quot;&#10;  - Mandatory fields - no cancel button, only &quot;ADD&quot; button&#10;  - Popup appears when user completes a set (stops timer)&#10;  - Rest timer continues running in background during data entry&#10;&#10;- [x] 2.1.3 Set data persistence and validation&#10;  - Save reps and weight data to database on popup submit&#10;  - Input validation (positive numbers, reasonable ranges)&#10;  - Update set completion flow to include data entry step&#10;  - Handle data persistence errors gracefully&#10;&#10;### 2.2 Set Data Editing &amp; Management  **NEW REQUIREMENT**&#10;- [x] 2.2.1 Edit completed set data ✅ **COMPLETED**&#10;  - Allow users to edit reps/weight after set completion ✅&#10;  - Add edit button/icon to completed set cards ✅&#10;  - Reopen data entry popup with pre-filled values ✅&#10;  - Update database with edited values ✅&#10;&#10;- [x] 2.2.2 Dynamic set management ✅ **COMPLETED**&#10;  - Add &quot;+&quot; button to add extra sets to exercise ✅&#10;  - Add &quot;−&quot; button to remove sets from exercise (if not completed) ✅&#10;  - Update exercise completion logic for dynamic set counts ✅&#10;  - Maintain proper set numbering when adding/removing sets ✅&#10;&#10;- [x] 2.2.3 Enhanced set display ✅ **COMPLETED**&#10;  - Show reps and weight data on set cards ✅&#10;  - Display format: &quot;Set 1: 12 reps @ 135 lbs&quot; (when completed) ✅&#10;  - Show &quot;Set 1: — reps @ — lbs&quot; (when not completed) ✅&#10;  - Visual distinction between completed and pending sets ✅&#10;&#10;### 2.3 Data Validation &amp; UX Improvements  &#10;- [ ] 2.3.1 Input validation and user guidance&#10;  - Numeric keyboard for reps and weight fields&#10;  - Input hints and placeholders (&quot;e.g., 12&quot;, &quot;e.g., 135.5&quot;)&#10;  - Validation messages for invalid inputs&#10;  - Auto-focus progression between fields&#10;&#10;- [x] 2.3.2 Enhanced timer integration ✅&#10;  - Rest timer continues during data entry popup ✅&#10;  - Clear visual indication that rest timer is still running ✅&#10;  - Seamless transition from set completion → data entry → rest period ✅&#10;  - Timer state preservation across popup interactions ✅&#10;&#10;- [x] 2.3.3 Rest timer notification system ✅&#10;  - One-minute rest milestone notification with sound ✅ &#10;  - Notification permission handling for Android 13+ ✅&#10;  - Proper notification channel setup with sound and vibration ✅&#10;  - Heads-up notification display for better visibility ✅&#10;  - Automatic notification cancellation when rest ends ✅&#10;&#10;- [x] 2.3.4 Additional UX enhancements ✅&#10;  - [x] Proper back button navigation handling ✅&#10;  - [x] System back button override to prevent accidental app exit ✅&#10;  - [x] Consistent navigation between screens ✅&#10;  - [x] Haptic feedback for important actions ✅&#10;  - [x] Animation transitions between screens ✅&#10;  - [x] Accessibility improvements&#10;&#10;---&#10;&#10;## Phase 3: Enhanced Exercise Experience  **PLANNED**&#10;- [ ] 3.1.1 Exercise instruction screens&#10;- [ ] 3.1.2 Exercise tips and form cues&#10;- [ ] 3.1.3 Primary/secondary muscle groups display&#10;- [ ] 3.1.4 Equipment requirements display&#10;- [ ] 3.1.5 Exercise difficulty indicators&#10;&#10;### 3.2 Calendar &amp; History View  **NEXT PRIORITY**&#10;- [ ] 3.2.1 Bottom Navigation Implementation&#10;  - [ ] Add BottomNavigationView with Home, History, Performance, and Settings tabs&#10;  - [ ] Create navigation graph for new sections&#10;  - [ ] Implement navigation controller logic&#10;  - [ ] Design icons for bottom navigation items&#10;&#10;- [ ] 3.2.2 History UI Components&#10;  - [ ] Calendar view component with date selection&#10;  - [ ] Monthly/weekly toggle view options&#10;  - [ ] Date indicators for completed workouts&#10;  - [ ] Color-coding for workout types (Push/Pull/Legs)&#10;  &#10;- [ ] 3.2.3 History Data Access Layer&#10;  - [ ] Create HistoryRepository class&#10;  - [ ] Add DAO methods for retrieving historical workout data&#10;  - [ ] Implement filtering by date ranges and workout types&#10;  - [ ] Create appropriate DTOs for history display&#10;&#10;- [ ] 3.2.4 Workout History Screen&#10;  - [ ] Design workout history list item layout&#10;  - [ ] Create workout history list screen&#10;  - [ ] Display past workouts with date, type, and completion metrics&#10;  - [ ] Implement sorting and filtering options&#10;  &#10;- [ ] 3.2.5 Historical Workout Detail View&#10;  - [ ] Design historical workout detail screen&#10;  - [ ] Display exercise list with performance metrics&#10;  - [ ] Show time spent, sets completed, and volume information&#10;  - [ ] Allow navigation to exercise detail history&#10;&#10;- [ ] 3.2.6 Exercise History &amp; Progress Tracking&#10;  - [ ] Design exercise history screen showing all past performances&#10;  - [ ] Implement progress graphs for weights and reps over time&#10;  - [ ] Show performance trends (improving, plateaued, declining)&#10;  - [ ] Add personal record indicators&#10;&#10;- [ ] 3.2.7 Performance Analytics&#10;  - [ ] Create workout volume calculations&#10;  - [ ] Implement workout frequency tracking&#10;  - [ ] Design weekly/monthly summary views&#10;  - [ ] Add muscle group focus distribution charts&#10;&#10;- [ ] 3.2.8 Data Export &amp; Sharing&#10;  - [ ] Add export options for workout history&#10;  - [ ] Implement sharing functionality for workouts or progress&#10;  - [ ] Create printable/shareable workout reports&#10;  - [ ] Design achievement/milestone sharing cards&#10;&#10;---&#10;&#10;## Phase 4: Advanced Features  **PLANNED**&#10;&#10;### 4.1 Location Services&#10;- [ ] 4.1.1 Gym location detection&#10;- [ ] 4.1.2 Location-based notifications&#10;- [ ] 4.1.3 Gym check-in tracking&#10;&#10;### 4.2 Data Management&#10;- [ ] 4.2.1 Data export functionality&#10;- [ ] 4.2.2 Backup/restore system&#10;- [ ] 4.2.3 30-day data cleanup job&#10;- [ ] 4.2.4 Data migration handling&#10;&#10;### 4.3 Enhanced UX&#10;- [ ] 4.3.1 Dark mode support&#10;- [ ] 4.3.2 Accessibility improvements&#10;- [ ] 4.3.3 Animations and transitions&#10;- [ ] 4.3.4 Haptic feedback&#10;&#10;---&#10;&#10;## Development Status&#10;&#10;### Current Achievement: PHASE 1 COMPLETE! &#10;**Major Milestone**: All core functionality is now solid and reliable!&#10;&#10;✅ **Database &amp; Architecture** - Robust Room implementation&#10;✅ **Timer System** - Professional-grade stopwatch with rest periods&#10;✅ **Workout Flow** - Smooth set progression and completion tracking&#10;✅ **UI/UX Foundation** - Clean, consistent Material Design 3 interface&#10;✅ **Data Persistence** - Reliable workout state management&#10;&#10;### Next Priority: Phase 2.1 - Set Data Collection &amp; Management&#10;**Focus**: Comprehensive workout tracking with performance data&#10;&#10;**Benefits for Users**:&#10;- Track actual reps performed and weight used per set&#10;- Progressive overload monitoring for strength gains&#10;- Flexible set management (add/remove sets during workout)&#10;- Professional workout data collection and analytics&#10;&#10;### Implementation Ready:&#10;The app now has a solid foundation with:&#10;- ✅ Accurate timer system (including rest periods)&#10;- ✅ Reliable data persistence&#10;- ✅ Clean user interface&#10;- ✅ Proper error handling&#10;- ✅ Comprehensive logging for debugging&#10;&#10;**Ready to implement**:&#10;- Database schema updates for reps_performed and weight_used&#10;- Set completion popup with mandatory data entry&#10;- Dynamic set management (+/- buttons)&#10;- Enhanced set display with performance data&#10;&#10;---&#10;&#10;## Testing Status&#10;&#10;### Core Functionality ✅ **ALL VERIFIED**&#10;- [x] App starts without crashes&#10;- [x] Workout creation for current day&#10;- [x] Exercise navigation&#10;- [x] Set completion tracking&#10;- [x] Database persistence&#10;- [x] Timer accuracy and formatting&#10;- [x] Rest timer functionality&#10;- [x] Total time calculations (including rest periods)&#10;&#10;### Ready for Phase 2 Implementation ✅&#10;All Phase 1 requirements have been implemented and tested successfully.&#10;Database and architecture are ready for performance data collection features.&#10;&#10;---&#10;&#10;*Last Updated: July 31, 2025*&#10;*Current Status: Phase 1 Complete ✅ | Ready for Phase 2.1 *" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/MainActivity.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.BackHandler&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.database.PPLWorkoutDatabase&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.screens.ExerciseDetailScreen&#10;import com.example.offlinepplworkoutapp.ui.theme.OfflinePPLWorkOutAppTheme&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModel&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModelFactory&#10;import com.example.offlinepplworkoutapp.util.NotificationHelper&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;private const val IS_DEBUG_MODE = true&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private lateinit var database: PPLWorkoutDatabase&#10;    private lateinit var repository: WorkoutRepository&#10;&#10;    // Initialize notification helper&#10;    private lateinit var notificationHelper: NotificationHelper&#10;&#10;    // Request notification permission launcher for Android 13+&#10;    private val requestPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            println(&quot; NOTIFICATION: Permission granted&quot;)&#10;        } else {&#10;            println(&quot; NOTIFICATION: Permission denied&quot;)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Initialize database and repository&#10;        database = PPLWorkoutDatabase.getDatabase(this)&#10;        repository = WorkoutRepository(&#10;            workoutDayDao = database.workoutDayDao(),&#10;            workoutEntryDao = database.workoutEntryDao(),&#10;            setEntryDao = database.setEntryDao(),&#10;            workoutTemplateDao = database.workoutTemplateDao(),&#10;            templateExerciseDao = database.templateExerciseDao()&#10;        )&#10;&#10;        // Initialize notification helper and request permissions if needed&#10;        notificationHelper = NotificationHelper(this)&#10;        notificationHelper.createChannels()&#10;&#10;        // Request notification permission on Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            if (checkSelfPermission(Manifest.permission.POST_NOTIFICATIONS) !=&#10;                    PackageManager.PERMISSION_GRANTED) {&#10;                requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                println(&quot; NOTIFICATION: Requesting notification permission&quot;)&#10;            } else {&#10;                println(&quot; NOTIFICATION: Permission already granted&quot;)&#10;            }&#10;        }&#10;&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            OfflinePPLWorkOutAppTheme {&#10;                MainScreen(repository = repository)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainScreen(&#10;    repository: WorkoutRepository&#10;) {&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;    val viewModel: DailyWorkoutViewModel = viewModel(&#10;        factory = DailyWorkoutViewModelFactory(repository)&#10;    )&#10;&#10;    var showDebugMenu by remember { mutableStateOf(false) }&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;    var showResetConfirmation by remember { mutableStateOf(false) }&#10;    var showTemplateSelection by remember { mutableStateOf(false) }&#10;    val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    //  NEW: Back handler to override back button behavior&#10;    BackHandler(&#10;        enabled = selectedExercise != null || showTemplateSelection,&#10;        onBack = {&#10;            when {&#10;                selectedExercise != null -&gt; {&#10;                    // Return to main workout screen when back is pressed in exercise detail&#10;                    println(&quot; NAVIGATION: Back button pressed in exercise detail, returning to main screen&quot;)&#10;                    viewModel.refreshTodaysWorkout() // Refresh data&#10;                    selectedExercise = null&#10;                }&#10;                showTemplateSelection -&gt; {&#10;                    // Return from template selection&#10;                    println(&quot; NAVIGATION: Back button pressed in template selection, returning to main screen&quot;)&#10;                    showTemplateSelection = false&#10;                }&#10;            }&#10;        }&#10;    )&#10;&#10;    // Add reset confirmation dialog&#10;    if (showResetConfirmation) {&#10;        AlertDialog(&#10;            onDismissRequest = { showResetConfirmation = false },&#10;            title = {&#10;                Text(&#10;                    text = &quot;⚠️ Reset Workout Progress&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;This will clear all your workout progress and history, but keep your exercise library intact.\n\nThis action cannot be undone. Are you sure you want to continue?&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        // Use coroutineScope.launch to call the suspend function properly&#10;                        coroutineScope.launch {&#10;                            println(&quot; UI: Starting reset process...&quot;)&#10;&#10;                            // Verify what's in database before reset&#10;                            val beforeReset = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                            println(&quot; BEFORE RESET: ${beforeReset.first} days, ${beforeReset.second} entries, ${beforeReset.third} sets&quot;)&#10;&#10;                            // Use the more aggressive reset that forces database recreation&#10;                            PPLWorkoutDatabase.forceResetDatabase(context)&#10;&#10;                            // Wait a moment for database operations to complete&#10;                            kotlinx.coroutines.delay(500)&#10;&#10;                            // Verify database is actually empty after reset&#10;                            val afterReset = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                            println(&quot; AFTER RESET: ${afterReset.first} days, ${afterReset.second} entries, ${afterReset.third} sets&quot;)&#10;&#10;                            // Force complete refresh of the ViewModel data&#10;                            println(&quot; UI: Forcing ViewModel refresh...&quot;)&#10;                            viewModel.forceCompleteRefresh()&#10;&#10;                            // Close dialogs&#10;                            showResetConfirmation = false&#10;                            showDebugMenu = false&#10;&#10;                            println(&quot;✅ UI: Reset process complete!&quot;)&#10;                        }&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Text(&quot;Reset All Progress&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                OutlinedButton(onClick = { showResetConfirmation = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        floatingActionButton = {&#10;            // Only show debug FAB in debug builds when not in exercise detail&#10;            if (IS_DEBUG_MODE &amp;&amp; selectedExercise == null) {&#10;                FloatingActionButton(&#10;                    onClick = { showDebugMenu = true },&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Debug Day Selector&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        when {&#10;            showTemplateSelection -&gt; {&#10;                // Show Template Selection Screen&#10;                com.example.offlinepplworkoutapp.ui.screens.TemplateSelectionScreen(&#10;                    repository = repository,&#10;                    selectedDate = viewModel.currentDate.collectAsState().value,&#10;                    onTemplateSelected = { template -&gt;&#10;                        viewModel.selectTemplate(template)&#10;                        viewModel.createWorkoutFromSelectedTemplate()&#10;                        showTemplateSelection = false&#10;                    },&#10;                    onBackClick = { showTemplateSelection = false }&#10;                )&#10;            }&#10;            selectedExercise != null -&gt; {&#10;                // Show Exercise Detail Screen&#10;                ExerciseDetailScreen(&#10;                    workoutEntry = selectedExercise!!,&#10;                    repository = repository,&#10;                    onBackClick = {&#10;                        // Force a refresh of workout data when returning from detail screen&#10;                        viewModel.refreshTodaysWorkout()&#10;                        selectedExercise = null&#10;                        viewModel.refreshTodaysWorkout()&#10;                    },&#10;                    onSaveChanges = { sets, reps, isCompleted -&gt;&#10;                        viewModel.updateExercise(selectedExercise!!.id, sets, reps, isCompleted)&#10;                        // Force a refresh to ensure updated set count is displayed&#10;                        viewModel.refreshTodaysWorkout()&#10;                    }&#10;                )&#10;            }&#10;            else -&gt; {&#10;                // Show Daily Workout Screen&#10;                DailyWorkoutScreen(&#10;                    viewModel = viewModel,&#10;                    repository = repository,&#10;                    onExerciseClick = { exercise -&gt; selectedExercise = exercise },&#10;                    onTemplateSelectionClick = { showTemplateSelection = true },&#10;                    modifier = Modifier.padding(innerPadding)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Debug day selector dialog&#10;        if (showDebugMenu &amp;&amp; IS_DEBUG_MODE) {&#10;            DebugDaySelector(&#10;                onDaySelected = { dayOfWeek -&gt;&#10;                    val calendar = Calendar.getInstance().apply {&#10;                        set(Calendar.DAY_OF_WEEK, dayOfWeek)&#10;                    }&#10;                    val debugDate = dateFormat.format(calendar.time)&#10;                    viewModel.setDebugDate(debugDate)&#10;                    showDebugMenu = false&#10;                },&#10;                onDismiss = { showDebugMenu = false }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DailyWorkoutScreen(&#10;    viewModel: DailyWorkoutViewModel,&#10;    repository: WorkoutRepository,&#10;    modifier: Modifier = Modifier,&#10;    onExerciseClick: (WorkoutEntryWithExercise) -&gt; Unit = {},&#10;    onTemplateSelectionClick: () -&gt; Unit = {}&#10;) {&#10;&#10;    val todaysWorkout by viewModel.todaysWorkout.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val completionProgress by viewModel.completionProgress.collectAsState()&#10;    val timerSeconds by viewModel.timerSeconds.collectAsState()&#10;    val isTimerRunning by viewModel.isTimerRunning.collectAsState()&#10;&#10;    var showResetWarning by remember { mutableStateOf(false) }&#10;    var exerciseToReset by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header with day, workout type, and timer&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.Top&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;${viewModel.getCurrentDayName()}'s Workout&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = viewModel.getWorkoutTypeName(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Timer Display in top-right corner&#10;            if (isTimerRunning) {&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    ),&#10;                    modifier = Modifier.padding(start = 16.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(12.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.PlayArrow,&#10;                            contentDescription = &quot;Timer&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(20.dp)&#10;                        )&#10;                        Text(&#10;                            text = viewModel.formatTime(timerSeconds),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Progress indicator for non-rest days&#10;        if (todaysWorkout.isNotEmpty()) {&#10;            WorkoutProgressIndicator(&#10;                progress = completionProgress,&#10;                completionPercentage = viewModel.getCompletionPercentage(),&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;        }&#10;&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    CircularProgressIndicator()&#10;                    Text(&#10;                        text = &quot;Loading today's workout...&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(top = 16.dp)&#10;                    )&#10;                }&#10;            }&#10;        } else if (todaysWorkout.isEmpty()) {&#10;            // Check if it's a rest day or if workout needs to be created&#10;            if (viewModel.getWorkoutTypeName() == &quot;Rest Day&quot;) {&#10;                // Rest Day with Background Image&#10;                RestDayScreen()&#10;            } else {&#10;                // Show &quot;Start Workout&quot; screen after reset or for new day&#10;                StartWorkoutScreen(&#10;                    workoutType = viewModel.getWorkoutTypeName(),&#10;                    onStartWorkout = {&#10;                        println(&quot; UI: Start Workout button clicked!&quot;)&#10;                        viewModel.createTodaysWorkout()&#10;                    },&#10;                    onTemplateSelection = onTemplateSelectionClick&#10;                )&#10;            }&#10;        } else {&#10;            // Exercise list header with template selection option&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Exercises: ${todaysWorkout.size}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                // Template selection button&#10;                OutlinedButton(&#10;                    onClick = onTemplateSelectionClick,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Change Template&quot;,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = &quot;Change Template&quot;,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                }&#10;            }&#10;&#10;            LazyColumn {&#10;                items(todaysWorkout) { workoutEntry -&gt;&#10;                    WorkoutExerciseItemWithSetProgress(&#10;                        workoutEntry = workoutEntry,&#10;                        onClick = onExerciseClick,&#10;                        repository = repository&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-save logic when all exercises are completed&#10;    if (completionProgress == 1.0f) {&#10;        viewModel.saveTotalTimeSpent(timerSeconds)&#10;    }&#10;&#10;    // Reset Protection Dialog&#10;    if (showResetWarning &amp;&amp; exerciseToReset != null) {&#10;        AlertDialog(&#10;            onDismissRequest = {&#10;                showResetWarning = false&#10;                exerciseToReset = null&#10;            },&#10;            title = {&#10;                Text(&#10;                    text = &quot;⚠️ Reset Exercise&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;This will reset your entire workout progress for this exercise. It's better to go to the exercise detail to reset specific reps.\n\nAre you sure you want to completely reset this exercise?&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        exerciseToReset?.let { exerciseId -&gt;&#10;                            val exercise = todaysWorkout.find { it.id == exerciseId }&#10;                            exercise?.let { onExerciseClick(it) }&#10;                        }&#10;                        showResetWarning = false&#10;                        exerciseToReset = null&#10;                    }&#10;                ) {&#10;                    Text(&quot;Go to Details&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showResetWarning = false&#10;                        exerciseToReset = null&#10;                    }&#10;                ) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutProgressIndicator(&#10;    progress: Float,&#10;    completionPercentage: Int,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Workout Progress&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = &quot;$completionPercentage%&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (completionPercentage == 100)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = MaterialTheme.colorScheme.primary,&#10;                trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItem(workoutEntry: WorkoutEntryWithExercise, onCompletionToggle: () -&gt; Unit, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) }, // Pass the workout entry when clicked&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Completion toggle switch&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (workoutEntry.isCompleted) &quot;Completed&quot; else &quot;Start&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (workoutEntry.isCompleted)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        Color(0xFF4CAF50), // Green color for &quot;Start&quot;&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Switch(&#10;                    checked = workoutEntry.isCompleted,&#10;                    onCheckedChange = { onCompletionToggle() },&#10;                    colors = SwitchDefaults.colors(&#10;                        checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                        uncheckedThumbColor = Color(0xFF4CAF50), // Green thumb when not completed&#10;                        checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        uncheckedTrackColor = Color(0xFF4CAF50).copy(alpha = 0.3f) // Light green track&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItemWithTimer(workoutEntry: WorkoutEntryWithExercise, onCompletionToggle: () -&gt; Unit, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) }, // Pass the workout entry when clicked&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Completion toggle switch&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (workoutEntry.isCompleted) &quot;Completed&quot; else &quot;Start&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (workoutEntry.isCompleted)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        Color(0xFF4CAF50), // Green color for &quot;Start&quot;&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Switch(&#10;                    checked = workoutEntry.isCompleted,&#10;                    onCheckedChange = { onCompletionToggle() },&#10;                    colors = SwitchDefaults.colors(&#10;                        checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                        uncheckedThumbColor = Color(0xFF4CAF50), // Green thumb when not completed&#10;                        checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        uncheckedTrackColor = Color(0xFF4CAF50).copy(alpha = 0.3f) // Light green track&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Timer display for total time spent (if exercise has time recorded)&#10;            if (workoutEntry.totalSecondsSpent &gt; 0) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Time Spent&quot;,&#10;                        tint = MaterialTheme.colorScheme.secondary,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Time spent: ${workoutEntry.totalSecondsSpent / 60}:${String.format(Locale.getDefault(), &quot;%02d&quot;, workoutEntry.totalSecondsSpent % 60)}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItemWithSetProgress(workoutEntry: WorkoutEntryWithExercise, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}, repository: WorkoutRepository) {&#10;    // Get the actual completed sets count from the database for this specific exercise&#10;    var completedSetsCount by remember { mutableStateOf(0) }&#10;&#10;    // Load the actual completed sets for this specific workout entry&#10;    LaunchedEffect(workoutEntry.id) {&#10;        completedSetsCount = repository.getCompletedSetsCount(workoutEntry.id)&#10;    }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Set Progress Bar and Status - NOW USING ACTUAL COMPLETED SETS FROM DATABASE&#10;            val progress = if (workoutEntry.sets &gt; 0) completedSetsCount.toFloat() / workoutEntry.sets.toFloat() else 0f&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = if (workoutEntry.isCompleted) &quot;✅ Completed&quot; else &quot;Set $completedSetsCount/${workoutEntry.sets}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = if (workoutEntry.isCompleted)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        fontWeight = if (workoutEntry.isCompleted) FontWeight.Bold else FontWeight.Normal&#10;                    )&#10;&#10;                    if (!workoutEntry.isCompleted) {&#10;                        LinearProgressIndicator(&#10;                            progress = { progress },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(top = 4.dp),&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Total time spent display&#10;                if (workoutEntry.totalSecondsSpent &gt; 0) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp),&#10;                        modifier = Modifier.padding(start = 16.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.PlayArrow,&#10;                            contentDescription = &quot;Time Spent&quot;,&#10;                            tint = MaterialTheme.colorScheme.secondary,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Text(&#10;                            text = &quot;${workoutEntry.totalSecondsSpent / 60}:${String.format(&quot;%02d&quot;, workoutEntry.totalSecondsSpent % 60)}&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RestDayScreen() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Background image - your awesome Hanuman gym mural&#10;        Image(&#10;            painter = painterResource(id = R.drawable.rest_day),&#10;            contentDescription = &quot;Rest Day Background&quot;,&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentScale = ContentScale.Crop&#10;        )&#10;&#10;        // Overlay content with semi-transparent background for better text readability&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;‍♂️&quot;,&#10;                        style = MaterialTheme.typography.displayLarge,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Rest Day&quot;,&#10;                        style = MaterialTheme.typography.headlineLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Recovery is just as important as training&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Take time to rest, stretch, and prepare for tomorrow's workout!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DebugDaySelector(&#10;    onDaySelected: (Int) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot; Debug Day Selector&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            LazyColumn {&#10;                item {&#10;                    Text(&#10;                        text = &quot;Select a day to test different workouts:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;                }&#10;&#10;                val days = listOf(&#10;                    Calendar.MONDAY to &quot;Monday - Push Day 1 &quot;,&#10;                    Calendar.TUESDAY to &quot;Tuesday - Pull Day 1 ️&quot;,&#10;                    Calendar.WEDNESDAY to &quot;Wednesday - Legs Day 1 &quot;,&#10;                    Calendar.THURSDAY to &quot;Thursday - Push Day 2 &quot;,&#10;                    Calendar.FRIDAY to &quot;Friday - Pull Day 2 ️&quot;,&#10;                    Calendar.SATURDAY to &quot;Saturday - Legs Day 2 &quot;,&#10;                    Calendar.SUNDAY to &quot;Sunday - Rest Day ‍♂️&quot;&#10;                )&#10;&#10;                items(days) { (dayOfWeek, dayLabel) -&gt;&#10;                    OutlinedButton(&#10;                        onClick = { onDaySelected(dayOfWeek) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 4.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            containerColor = if (dayOfWeek == Calendar.SUNDAY)&#10;                                MaterialTheme.colorScheme.secondaryContainer&#10;                            else&#10;                                MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = dayLabel,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(8.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Debug Actions:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Checking current database state...&quot;)&#10;                                val currentState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; CURRENT STATE: ${currentState.first} days, ${currentState.second} entries, ${currentState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Check DB State&quot;)&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Force reset database...&quot;)&#10;                                PPLWorkoutDatabase.forceResetDatabase(context)&#10;                                kotlinx.coroutines.delay(200)&#10;                                val afterState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; AFTER FORCE RESET: ${afterState.first} days, ${afterState.second} entries, ${afterState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Force Reset DB&quot;)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            //TODO: Uncomment when reset functionality is implemented&#10;//            TextButton(onClick = onResetToToday) {&#10;//                Text(&quot;Reset to Today&quot;)&#10;//            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun StartWorkoutScreen(&#10;    workoutType: String,&#10;    onStartWorkout: () -&gt; Unit,&#10;    onTemplateSelection: () -&gt; Unit = {}&#10;) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Card(&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;&quot;,&#10;                    style = MaterialTheme.typography.displayLarge,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Ready to Start?&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = workoutType,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(bottom = 24.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Choose how you want to start your workout:&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                // Default workout button&#10;                Button(&#10;                    onClick = onStartWorkout,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Start Workout&quot;,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Start Today's Workout&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Template selection button&#10;                OutlinedButton(&#10;                    onClick = onTemplateSelection,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Choose Template&quot;,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Choose Different Workout&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = &quot; Use 'Choose Different Workout' to pick from Push, Pull, or Legs templates&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun WorkoutPreview() {&#10;    OfflinePPLWorkOutAppTheme {&#10;        // Preview with sample workout entry data&#10;        val sampleWorkoutEntry = WorkoutEntryWithExercise(&#10;            id = 1,&#10;            dayId = 1,&#10;            exerciseId = 1,&#10;            sets = 4,&#10;            reps = 8,&#10;            isCompleted = false,&#10;            exerciseName = &quot;Barbell Bench Press&quot;,&#10;            isCompound = true&#10;        )&#10;        WorkoutExerciseItem(workoutEntry = sampleWorkoutEntry, onCompletionToggle = {})&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.BackHandler&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.database.PPLWorkoutDatabase&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.screens.ExerciseDetailScreen&#10;import com.example.offlinepplworkoutapp.ui.theme.OfflinePPLWorkOutAppTheme&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModel&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModelFactory&#10;import com.example.offlinepplworkoutapp.util.NotificationHelper&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;private const val IS_DEBUG_MODE = true&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private lateinit var database: PPLWorkoutDatabase&#10;    private lateinit var repository: WorkoutRepository&#10;&#10;    // Initialize notification helper&#10;    private lateinit var notificationHelper: NotificationHelper&#10;&#10;    // Request notification permission launcher for Android 13+&#10;    private val requestPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            println(&quot; NOTIFICATION: Permission granted&quot;)&#10;        } else {&#10;            println(&quot; NOTIFICATION: Permission denied&quot;)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Initialize database and repository&#10;        database = PPLWorkoutDatabase.getDatabase(this)&#10;        repository = WorkoutRepository(&#10;            workoutDayDao = database.workoutDayDao(),&#10;            workoutEntryDao = database.workoutEntryDao(),&#10;            setEntryDao = database.setEntryDao(),&#10;            workoutTemplateDao = database.workoutTemplateDao(),&#10;            templateExerciseDao = database.templateExerciseDao()&#10;        )&#10;&#10;        // Initialize notification helper and request permissions if needed&#10;        notificationHelper = NotificationHelper(this)&#10;        notificationHelper.createChannels()&#10;&#10;        // Request notification permission on Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            if (checkSelfPermission(Manifest.permission.POST_NOTIFICATIONS) !=&#10;                    PackageManager.PERMISSION_GRANTED) {&#10;                requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                println(&quot; NOTIFICATION: Requesting notification permission&quot;)&#10;            } else {&#10;                println(&quot; NOTIFICATION: Permission already granted&quot;)&#10;            }&#10;        }&#10;&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            OfflinePPLWorkOutAppTheme {&#10;                AppScaffold(repository = repository)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppScaffold(&#10;    repository: WorkoutRepository&#10;) {&#10;    val navController = rememberNavController()&#10;    var showResetConfirmation by remember { mutableStateOf(false) }&#10;    &#10;    // Handle reset confirmation dialog&#10;    if (showResetConfirmation) {&#10;        ResetConfirmationDialog(&#10;            onConfirm = {&#10;                // Reset functionality will be implemented later&#10;                showResetConfirmation = false&#10;            },&#10;            onDismiss = { &#10;                showResetConfirmation = false &#10;            }&#10;        )&#10;    }&#10;    &#10;    Scaffold(&#10;        bottomBar = {&#10;            com.example.offlinepplworkoutapp.ui.components.BottomNavigation(navController = navController)&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            com.example.offlinepplworkoutapp.navigation.NavigationGraph(&#10;                navController = navController,&#10;                repository = repository,&#10;                onNavigateToExerciseDetail = {&#10;                    // This will be implemented in ExerciseDetailScreen navigation&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ResetConfirmationDialog(&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot;⚠️ Reset Workout Progress&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.error&#10;            )&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;This will clear all your workout progress and history, but keep your exercise library intact.\n\nThis action cannot be undone. Are you sure you want to continue?&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(&quot;Reset All Progress&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            OutlinedButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun MainScreen(&#10;    repository: WorkoutRepository&#10;) {&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;    val viewModel: DailyWorkoutViewModel = viewModel(&#10;        factory = DailyWorkoutViewModelFactory(repository)&#10;    )&#10;&#10;    var showDebugMenu by remember { mutableStateOf(false) }&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;    var showResetConfirmation by remember { mutableStateOf(false) }&#10;    var showTemplateSelection by remember { mutableStateOf(false) }&#10;    val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    //  NEW: Back handler to override back button behavior&#10;    BackHandler(&#10;        enabled = selectedExercise != null || showTemplateSelection,&#10;        onBack = {&#10;            when {&#10;                selectedExercise != null -&gt; {&#10;                    // Return to main workout screen when back is pressed in exercise detail&#10;                    println(&quot; NAVIGATION: Back button pressed in exercise detail, returning to main screen&quot;)&#10;                    viewModel.refreshTodaysWorkout() // Refresh data&#10;                    selectedExercise = null&#10;                }&#10;                showTemplateSelection -&gt; {&#10;                    // Return from template selection&#10;                    println(&quot; NAVIGATION: Back button pressed in template selection, returning to main screen&quot;)&#10;                    showTemplateSelection = false&#10;                }&#10;            }&#10;        }&#10;    )&#10;&#10;    // Add reset confirmation dialog&#10;    if (showResetConfirmation) {&#10;        AlertDialog(&#10;            onDismissRequest = { showResetConfirmation = false },&#10;            title = {&#10;                Text(&#10;                    text = &quot;⚠️ Reset Workout Progress&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;This will clear all your workout progress and history, but keep your exercise library intact.\n\nThis action cannot be undone. Are you sure you want to continue?&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        // Use coroutineScope.launch to call the suspend function properly&#10;                        coroutineScope.launch {&#10;                            println(&quot; UI: Starting reset process...&quot;)&#10;&#10;                            // Verify what's in database before reset&#10;                            val beforeReset = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                            println(&quot; BEFORE RESET: ${beforeReset.first} days, ${beforeReset.second} entries, ${beforeReset.third} sets&quot;)&#10;&#10;                            // Use the more aggressive reset that forces database recreation&#10;                            PPLWorkoutDatabase.forceResetDatabase(context)&#10;&#10;                            // Wait a moment for database operations to complete&#10;                            kotlinx.coroutines.delay(500)&#10;&#10;                            // Verify database is actually empty after reset&#10;                            val afterReset = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                            println(&quot; AFTER RESET: ${afterReset.first} days, ${afterReset.second} entries, ${afterReset.third} sets&quot;)&#10;&#10;                            // Force complete refresh of the ViewModel data&#10;                            println(&quot; UI: Forcing ViewModel refresh...&quot;)&#10;                            viewModel.forceCompleteRefresh()&#10;&#10;                            // Close dialogs&#10;                            showResetConfirmation = false&#10;                            showDebugMenu = false&#10;&#10;                            println(&quot;✅ UI: Reset process complete!&quot;)&#10;                        }&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Text(&quot;Reset All Progress&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                OutlinedButton(onClick = { showResetConfirmation = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        floatingActionButton = {&#10;            // Only show debug FAB in debug builds when not in exercise detail&#10;            if (IS_DEBUG_MODE &amp;&amp; selectedExercise == null) {&#10;                FloatingActionButton(&#10;                    onClick = { showDebugMenu = true },&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Debug Day Selector&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        when {&#10;            showTemplateSelection -&gt; {&#10;                // Show Template Selection Screen&#10;                com.example.offlinepplworkoutapp.ui.screens.TemplateSelectionScreen(&#10;                    repository = repository,&#10;                    selectedDate = viewModel.currentDate.collectAsState().value,&#10;                    onTemplateSelected = { template -&gt;&#10;                        viewModel.selectTemplate(template)&#10;                        viewModel.createWorkoutFromSelectedTemplate()&#10;                        showTemplateSelection = false&#10;                    },&#10;                    onBackClick = { showTemplateSelection = false }&#10;                )&#10;            }&#10;            selectedExercise != null -&gt; {&#10;                // Show Exercise Detail Screen&#10;                ExerciseDetailScreen(&#10;                    workoutEntry = selectedExercise!!,&#10;                    repository = repository,&#10;                    onBackClick = {&#10;                        // Force a refresh of workout data when returning from detail screen&#10;                        viewModel.refreshTodaysWorkout()&#10;                        selectedExercise = null&#10;                        viewModel.refreshTodaysWorkout()&#10;                    },&#10;                    onSaveChanges = { sets, reps, isCompleted -&gt;&#10;                        viewModel.updateExercise(selectedExercise!!.id, sets, reps, isCompleted)&#10;                        // Force a refresh to ensure updated set count is displayed&#10;                        viewModel.refreshTodaysWorkout()&#10;                    }&#10;                )&#10;            }&#10;            else -&gt; {&#10;                // Show Daily Workout Screen&#10;                DailyWorkoutScreen(&#10;                    viewModel = viewModel,&#10;                    repository = repository,&#10;                    onExerciseClick = { exercise -&gt; selectedExercise = exercise },&#10;                    onTemplateSelectionClick = { showTemplateSelection = true },&#10;                    modifier = Modifier.padding(innerPadding)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Debug day selector dialog&#10;        if (showDebugMenu &amp;&amp; IS_DEBUG_MODE) {&#10;            DebugDaySelector(&#10;                onDaySelected = { dayOfWeek -&gt;&#10;                    val calendar = Calendar.getInstance().apply {&#10;                        set(Calendar.DAY_OF_WEEK, dayOfWeek)&#10;                    }&#10;                    val debugDate = dateFormat.format(calendar.time)&#10;                    viewModel.setDebugDate(debugDate)&#10;                    showDebugMenu = false&#10;                },&#10;                onDismiss = { showDebugMenu = false }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DailyWorkoutScreen(&#10;    viewModel: DailyWorkoutViewModel,&#10;    repository: WorkoutRepository,&#10;    modifier: Modifier = Modifier,&#10;    onExerciseClick: (WorkoutEntryWithExercise) -&gt; Unit = {},&#10;    onTemplateSelectionClick: () -&gt; Unit = {}&#10;) {&#10;&#10;    val todaysWorkout by viewModel.todaysWorkout.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val completionProgress by viewModel.completionProgress.collectAsState()&#10;    val timerSeconds by viewModel.timerSeconds.collectAsState()&#10;    val isTimerRunning by viewModel.isTimerRunning.collectAsState()&#10;&#10;    var showResetWarning by remember { mutableStateOf(false) }&#10;    var exerciseToReset by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header with day, workout type, and timer&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.Top&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;${viewModel.getCurrentDayName()}'s Workout&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = viewModel.getWorkoutTypeName(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Timer Display in top-right corner&#10;            if (isTimerRunning) {&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    ),&#10;                    modifier = Modifier.padding(start = 16.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(12.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.PlayArrow,&#10;                            contentDescription = &quot;Timer&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(20.dp)&#10;                        )&#10;                        Text(&#10;                            text = viewModel.formatTime(timerSeconds),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Progress indicator for non-rest days&#10;        if (todaysWorkout.isNotEmpty()) {&#10;            WorkoutProgressIndicator(&#10;                progress = completionProgress,&#10;                completionPercentage = viewModel.getCompletionPercentage(),&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;        }&#10;&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    CircularProgressIndicator()&#10;                    Text(&#10;                        text = &quot;Loading today's workout...&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(top = 16.dp)&#10;                    )&#10;                }&#10;            }&#10;        } else if (todaysWorkout.isEmpty()) {&#10;            // Check if it's a rest day or if workout needs to be created&#10;            if (viewModel.getWorkoutTypeName() == &quot;Rest Day&quot;) {&#10;                // Rest Day with Background Image&#10;                RestDayScreen()&#10;            } else {&#10;                // Show &quot;Start Workout&quot; screen after reset or for new day&#10;                StartWorkoutScreen(&#10;                    workoutType = viewModel.getWorkoutTypeName(),&#10;                    onStartWorkout = {&#10;                        println(&quot; UI: Start Workout button clicked!&quot;)&#10;                        viewModel.createTodaysWorkout()&#10;                    },&#10;                    onTemplateSelection = onTemplateSelectionClick&#10;                )&#10;            }&#10;        } else {&#10;            // Exercise list header with template selection option&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Exercises: ${todaysWorkout.size}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                // Template selection button&#10;                OutlinedButton(&#10;                    onClick = onTemplateSelectionClick,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Change Template&quot;,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = &quot;Change Template&quot;,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                }&#10;            }&#10;&#10;            LazyColumn {&#10;                items(todaysWorkout) { workoutEntry -&gt;&#10;                    WorkoutExerciseItemWithSetProgress(&#10;                        workoutEntry = workoutEntry,&#10;                        onClick = onExerciseClick,&#10;                        repository = repository&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-save logic when all exercises are completed&#10;    if (completionProgress == 1.0f) {&#10;        viewModel.saveTotalTimeSpent(timerSeconds)&#10;    }&#10;&#10;    // Reset Protection Dialog&#10;    if (showResetWarning &amp;&amp; exerciseToReset != null) {&#10;        AlertDialog(&#10;            onDismissRequest = {&#10;                showResetWarning = false&#10;                exerciseToReset = null&#10;            },&#10;            title = {&#10;                Text(&#10;                    text = &quot;⚠️ Reset Exercise&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;This will reset your entire workout progress for this exercise. It's better to go to the exercise detail to reset specific reps.\n\nAre you sure you want to completely reset this exercise?&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        exerciseToReset?.let { exerciseId -&gt;&#10;                            val exercise = todaysWorkout.find { it.id == exerciseId }&#10;                            exercise?.let { onExerciseClick(it) }&#10;                        }&#10;                        showResetWarning = false&#10;                        exerciseToReset = null&#10;                    }&#10;                ) {&#10;                    Text(&quot;Go to Details&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showResetWarning = false&#10;                        exerciseToReset = null&#10;                    }&#10;                ) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutProgressIndicator(&#10;    progress: Float,&#10;    completionPercentage: Int,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Workout Progress&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = &quot;$completionPercentage%&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (completionPercentage == 100)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = MaterialTheme.colorScheme.primary,&#10;                trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItem(workoutEntry: WorkoutEntryWithExercise, onCompletionToggle: () -&gt; Unit, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) }, // Pass the workout entry when clicked&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Completion toggle switch&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (workoutEntry.isCompleted) &quot;Completed&quot; else &quot;Start&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (workoutEntry.isCompleted)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        Color(0xFF4CAF50), // Green color for &quot;Start&quot;&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Switch(&#10;                    checked = workoutEntry.isCompleted,&#10;                    onCheckedChange = { onCompletionToggle() },&#10;                    colors = SwitchDefaults.colors(&#10;                        checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                        uncheckedThumbColor = Color(0xFF4CAF50), // Green thumb when not completed&#10;                        checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        uncheckedTrackColor = Color(0xFF4CAF50).copy(alpha = 0.3f) // Light green track&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItemWithTimer(workoutEntry: WorkoutEntryWithExercise, onCompletionToggle: () -&gt; Unit, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) }, // Pass the workout entry when clicked&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Completion toggle switch&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (workoutEntry.isCompleted) &quot;Completed&quot; else &quot;Start&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (workoutEntry.isCompleted)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        Color(0xFF4CAF50), // Green color for &quot;Start&quot;&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Switch(&#10;                    checked = workoutEntry.isCompleted,&#10;                    onCheckedChange = { onCompletionToggle() },&#10;                    colors = SwitchDefaults.colors(&#10;                        checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                        uncheckedThumbColor = Color(0xFF4CAF50), // Green thumb when not completed&#10;                        checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        uncheckedTrackColor = Color(0xFF4CAF50).copy(alpha = 0.3f) // Light green track&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Timer display for total time spent (if exercise has time recorded)&#10;            if (workoutEntry.totalSecondsSpent &gt; 0) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Time Spent&quot;,&#10;                        tint = MaterialTheme.colorScheme.secondary,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Time spent: ${workoutEntry.totalSecondsSpent / 60}:${String.format(Locale.getDefault(), &quot;%02d&quot;, workoutEntry.totalSecondsSpent % 60)}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItemWithSetProgress(workoutEntry: WorkoutEntryWithExercise, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}, repository: WorkoutRepository) {&#10;    // Get the actual completed sets count from the database for this specific exercise&#10;    var completedSetsCount by remember { mutableStateOf(0) }&#10;&#10;    // Load the actual completed sets for this specific workout entry&#10;    LaunchedEffect(workoutEntry.id) {&#10;        completedSetsCount = repository.getCompletedSetsCount(workoutEntry.id)&#10;    }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Set Progress Bar and Status - NOW USING ACTUAL COMPLETED SETS FROM DATABASE&#10;            val progress = if (workoutEntry.sets &gt; 0) completedSetsCount.toFloat() / workoutEntry.sets.toFloat() else 0f&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = if (workoutEntry.isCompleted) &quot;✅ Completed&quot; else &quot;Set $completedSetsCount/${workoutEntry.sets}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = if (workoutEntry.isCompleted)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        fontWeight = if (workoutEntry.isCompleted) FontWeight.Bold else FontWeight.Normal&#10;                    )&#10;&#10;                    if (!workoutEntry.isCompleted) {&#10;                        LinearProgressIndicator(&#10;                            progress = { progress },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(top = 4.dp),&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Total time spent display&#10;                if (workoutEntry.totalSecondsSpent &gt; 0) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp),&#10;                        modifier = Modifier.padding(start = 16.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.PlayArrow,&#10;                            contentDescription = &quot;Time Spent&quot;,&#10;                            tint = MaterialTheme.colorScheme.secondary,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Text(&#10;                            text = &quot;${workoutEntry.totalSecondsSpent / 60}:${String.format(&quot;%02d&quot;, workoutEntry.totalSecondsSpent % 60)}&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RestDayScreen() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Background image - your awesome Hanuman gym mural&#10;        Image(&#10;            painter = painterResource(id = R.drawable.rest_day),&#10;            contentDescription = &quot;Rest Day Background&quot;,&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentScale = ContentScale.Crop&#10;        )&#10;&#10;        // Overlay content with semi-transparent background for better text readability&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;‍♂️&quot;,&#10;                        style = MaterialTheme.typography.displayLarge,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Rest Day&quot;,&#10;                        style = MaterialTheme.typography.headlineLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Recovery is just as important as training&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Take time to rest, stretch, and prepare for tomorrow's workout!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DebugDaySelector(&#10;    onDaySelected: (Int) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot; Debug Day Selector&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            LazyColumn {&#10;                item {&#10;                    Text(&#10;                        text = &quot;Select a day to test different workouts:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;                }&#10;&#10;                val days = listOf(&#10;                    Calendar.MONDAY to &quot;Monday - Push Day 1 &quot;,&#10;                    Calendar.TUESDAY to &quot;Tuesday - Pull Day 1 ️&quot;,&#10;                    Calendar.WEDNESDAY to &quot;Wednesday - Legs Day 1 &quot;,&#10;                    Calendar.THURSDAY to &quot;Thursday - Push Day 2 &quot;,&#10;                    Calendar.FRIDAY to &quot;Friday - Pull Day 2 ️&quot;,&#10;                    Calendar.SATURDAY to &quot;Saturday - Legs Day 2 &quot;,&#10;                    Calendar.SUNDAY to &quot;Sunday - Rest Day ‍♂️&quot;&#10;                )&#10;&#10;                items(days) { (dayOfWeek, dayLabel) -&gt;&#10;                    OutlinedButton(&#10;                        onClick = { onDaySelected(dayOfWeek) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 4.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            containerColor = if (dayOfWeek == Calendar.SUNDAY)&#10;                                MaterialTheme.colorScheme.secondaryContainer&#10;                            else&#10;                                MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = dayLabel,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(8.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Debug Actions:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Checking current database state...&quot;)&#10;                                val currentState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; CURRENT STATE: ${currentState.first} days, ${currentState.second} entries, ${currentState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Check DB State&quot;)&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Force reset database...&quot;)&#10;                                PPLWorkoutDatabase.forceResetDatabase(context)&#10;                                kotlinx.coroutines.delay(200)&#10;                                val afterState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; AFTER FORCE RESET: ${afterState.first} days, ${afterState.second} entries, ${afterState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Force Reset DB&quot;)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            //TODO: Uncomment when reset functionality is implemented&#10;//            TextButton(onClick = onResetToToday) {&#10;//                Text(&quot;Reset to Today&quot;)&#10;//            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun StartWorkoutScreen(&#10;    workoutType: String,&#10;    onStartWorkout: () -&gt; Unit,&#10;    onTemplateSelection: () -&gt; Unit = {}&#10;) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Card(&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;&quot;,&#10;                    style = MaterialTheme.typography.displayLarge,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Ready to Start?&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = workoutType,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(bottom = 24.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Choose how you want to start your workout:&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                // Default workout button&#10;                Button(&#10;                    onClick = onStartWorkout,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Start Workout&quot;,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Start Today's Workout&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Template selection button&#10;                OutlinedButton(&#10;                    onClick = onTemplateSelection,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Choose Template&quot;,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Choose Different Workout&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = &quot; Use 'Choose Different Workout' to pick from Push, Pull, or Legs templates&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun WorkoutPreview() {&#10;    OfflinePPLWorkOutAppTheme {&#10;        // Preview with sample workout entry data&#10;        val sampleWorkoutEntry = WorkoutEntryWithExercise(&#10;            id = 1,&#10;            dayId = 1,&#10;            exerciseId = 1,&#10;            sets = 4,&#10;            reps = 8,&#10;            isCompleted = false,&#10;            exerciseName = &quot;Barbell Bench Press&quot;,&#10;            isCompound = true&#10;        )&#10;        WorkoutExerciseItem(workoutEntry = sampleWorkoutEntry, onCompletionToggle = {})&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/navigation/NavigationGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/navigation/NavigationGraph.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.screens.HistoryScreen&#10;import com.example.offlinepplworkoutapp.ui.screens.HomeScreen&#10;import com.example.offlinepplworkoutapp.ui.screens.PerformanceScreen&#10;import com.example.offlinepplworkoutapp.ui.screens.SettingsScreen&#10;&#10;sealed class Screen(val route: String) {&#10;    object Home : Screen(&quot;home&quot;)&#10;    object History : Screen(&quot;history&quot;)&#10;    object Performance : Screen(&quot;performance&quot;)&#10;    object Settings : Screen(&quot;settings&quot;)&#10;    object ExerciseDetail : Screen(&quot;exercise_detail&quot;)&#10;}&#10;&#10;@Composable&#10;fun NavigationGraph(&#10;    navController: NavHostController,&#10;    repository: WorkoutRepository,&#10;    onNavigateToExerciseDetail: () -&gt; Unit&#10;) {&#10;    // Store selected exercise at the navigation graph level&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;    &#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Screen.Home.route&#10;    ) {&#10;        composable(Screen.Home.route) {&#10;            HomeScreen(&#10;                repository = repository,&#10;                onNavigateToExerciseDetail = {&#10;                    // When navigating to exercise detail, we'll handle it within the HomeScreen&#10;                    // This is because we need to maintain the exercise state there&#10;                    onNavigateToExerciseDetail()&#10;                }&#10;            )&#10;        }&#10;        &#10;        composable(Screen.History.route) {&#10;            HistoryScreen(repository = repository)&#10;        }&#10;        &#10;        composable(Screen.Performance.route) {&#10;            PerformanceScreen(repository = repository)&#10;        }&#10;        &#10;        composable(Screen.Settings.route) {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/BottomNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/BottomNavigation.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.components&#10;&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import com.example.offlinepplworkoutapp.R&#10;import com.example.offlinepplworkoutapp.navigation.Screen&#10;&#10;@Composable&#10;fun BottomNavigation(navController: NavController) {&#10;    val items = listOf(&#10;        BottomNavItem(Screen.Home.route, &quot;Home&quot;, R.drawable.ic_home),&#10;        BottomNavItem(Screen.History.route, &quot;History&quot;, R.drawable.ic_history),&#10;        BottomNavItem(Screen.Performance.route, &quot;Performance&quot;, R.drawable.ic_performance),&#10;        BottomNavItem(Screen.Settings.route, &quot;Settings&quot;, R.drawable.ic_settings)&#10;    )&#10;&#10;    NavigationBar(&#10;        containerColor = MaterialTheme.colorScheme.surface&#10;    ) {&#10;        val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;        val currentRoute = navBackStackEntry?.destination?.route&#10;        &#10;        items.forEach { item -&gt;&#10;            NavigationBarItem(&#10;                icon = { &#10;                    Icon(&#10;                        painter = painterResource(id = item.icon), &#10;                        contentDescription = item.title&#10;                    )&#10;                },&#10;                label = { &#10;                    Text(&#10;                        text = item.title,&#10;                        fontSize = 12.sp&#10;                    ) &#10;                },&#10;                selected = currentRoute == item.route,&#10;                onClick = {&#10;                    if (currentRoute != item.route) {&#10;                        navController.navigate(item.route) {&#10;                            // Pop up to the start destination of the graph to&#10;                            // avoid building up a large stack of destinations&#10;                            popUpTo(navController.graph.startDestinationId) {&#10;                                saveState = true&#10;                            }&#10;                            // Avoid multiple copies of the same destination&#10;                            launchSingleTop = true&#10;                            // Restore state when re-selecting a previously selected item&#10;                            restoreState = true&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val title: String,&#10;    val icon: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/DebugDaySelector.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/DebugDaySelector.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.components&#10;&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.offlinepplworkoutapp.data.database.PPLWorkoutDatabase&#10;import kotlinx.coroutines.launch&#10;import java.util.Calendar&#10;&#10;@Composable&#10;fun DebugDaySelector(&#10;    onDaySelected: (Int) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit,&#10;    onResetDatabase: () -&gt; Unit = {}&#10;) {&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot; Debug Day Selector&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            LazyColumn {&#10;                item {&#10;                    Text(&#10;                        text = &quot;Select a day to test different workouts:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;                }&#10;&#10;                val days = listOf(&#10;                    Calendar.MONDAY to &quot;Monday - Push Day 1 &quot;,&#10;                    Calendar.TUESDAY to &quot;Tuesday - Pull Day 1 ️&quot;,&#10;                    Calendar.WEDNESDAY to &quot;Wednesday - Legs Day 1 &quot;,&#10;                    Calendar.THURSDAY to &quot;Thursday - Push Day 2 &quot;,&#10;                    Calendar.FRIDAY to &quot;Friday - Pull Day 2 ️&quot;,&#10;                    Calendar.SATURDAY to &quot;Saturday - Legs Day 2 &quot;,&#10;                    Calendar.SUNDAY to &quot;Sunday - Rest Day ‍♂️&quot;&#10;                )&#10;&#10;                items(days) { (dayOfWeek, dayLabel) -&gt;&#10;                    OutlinedButton(&#10;                        onClick = { onDaySelected(dayOfWeek) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 4.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            containerColor = if (dayOfWeek == Calendar.SUNDAY)&#10;                                MaterialTheme.colorScheme.secondaryContainer&#10;                            else&#10;                                MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = dayLabel,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(8.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Debug Actions:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Checking current database state...&quot;)&#10;                                val currentState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; CURRENT STATE: ${currentState.first} days, ${currentState.second} entries, ${currentState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Check DB State&quot;)&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Force reset database...&quot;)&#10;                                PPLWorkoutDatabase.forceResetDatabase(context)&#10;                                kotlinx.coroutines.delay(200)&#10;                                val afterState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; AFTER FORCE RESET: ${afterState.first} days, ${afterState.second} entries, ${afterState.third} sets&quot;)&#10;                                onResetDatabase()&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Reset Database&quot;)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {},&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp.ui.screens&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModel&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModelFactory&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    repository: WorkoutRepository,&#10;    onNavigateToExerciseDetail: () -&gt; Unit&#10;) {&#10;    val viewModel: DailyWorkoutViewModel = viewModel(&#10;        factory = DailyWorkoutViewModelFactory(repository)&#10;    )&#10;&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;    var showDebugMenu by remember { mutableStateOf(false) }&#10;    var showResetConfirmation by remember { mutableStateOf(false) }&#10;    var showTemplateSelection by remember { mutableStateOf(false) }&#10;&#10;    // Properly collect the currentDate StateFlow using collectAsState()&#10;    val currentDate by viewModel.currentDate.collectAsState()&#10;&#10;    // Trigger workout loading when the HomeScreen is first displayed&#10;    LaunchedEffect(Unit) {&#10;        println(&quot; HOME: Triggering initial workout load&quot;)&#10;                repository = repository,&#10;                selectedDate = currentDate,&#10;                onTemplateSelected = { template -&gt;&#10;                    viewModel.selectTemplate(template)&#10;                    viewModel.createWorkoutFromSelectedTemplate()&#10;                    showTemplateSelection = false&#10;                },&#10;                onBackClick = { showTemplateSelection = false }&#10;            )&#10;        }&#10;        selectedExercise != null -&gt; {&#10;            ExerciseDetailScreen(&#10;                workoutEntry = selectedExercise!!,&#10;                repository = repository,&#10;                onBackClick = {&#10;                    viewModel.refreshTodaysWorkout()&#10;                    selectedExercise = null&#10;                },&#10;                onSaveChanges = { sets, reps, isCompleted -&gt;&#10;                    viewModel.updateExercise(selectedExercise!!.id, sets, reps, isCompleted)&#10;                    viewModel.refreshTodaysWorkout()&#10;                }&#10;            )&#10;        }&#10;        else -&gt; {&#10;            // Main content - Daily workout screen&#10;            MainScreenContent(&#10;                viewModel = viewModel,&#10;                showDebugMenu = showDebugMenu,&#10;                showResetConfirmation = showResetConfirmation,&#10;                showTemplateSelection = showTemplateSelection,&#10;                onShowDebugMenu = { showDebugMenu = it },&#10;                onShowResetConfirmation = { showResetConfirmation = it },&#10;                onShowTemplateSelection = { showTemplateSelection = it },&#10;                onNavigateToExerciseDetail = { exercise -&gt;&#10;                    selectedExercise = exercise&#10;                    onNavigateToExerciseDetail()&#10;                },&#10;                repository = repository&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModel&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModelFactory&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    repository: WorkoutRepository,&#10;    onNavigateToExerciseDetail: () -&gt; Unit&#10;) {&#10;    val viewModel: DailyWorkoutViewModel = viewModel(&#10;        factory = DailyWorkoutViewModelFactory(repository)&#10;    )&#10;&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;    var showDebugMenu by remember { mutableStateOf(false) }&#10;    var showResetConfirmation by remember { mutableStateOf(false) }&#10;    var showTemplateSelection by remember { mutableStateOf(false) }&#10;&#10;    // Properly collect the currentDate StateFlow using collectAsState()&#10;    val currentDate by viewModel.currentDate.collectAsState()&#10;&#10;    // Trigger workout loading when the HomeScreen is first displayed&#10;    LaunchedEffect(Unit) {&#10;        println(&quot; HOME: Triggering initial workout load&quot;)&#10;                repository = repository,&#10;                selectedDate = currentDate,&#10;                onTemplateSelected = { template -&gt;&#10;                    viewModel.selectTemplate(template)&#10;                    viewModel.createWorkoutFromSelectedTemplate()&#10;                    showTemplateSelection = false&#10;                },&#10;                onBackClick = { showTemplateSelection = false }&#10;            )&#10;        }&#10;        selectedExercise != null -&gt; {&#10;            ExerciseDetailScreen(&#10;                workoutEntry = selectedExercise!!,&#10;                repository = repository,&#10;                onBackClick = {&#10;                    viewModel.refreshTodaysWorkout()&#10;                    selectedExercise = null&#10;                },&#10;                onSaveChanges = { sets, reps, isCompleted -&gt;&#10;                    viewModel.updateExercise(selectedExercise!!.id, sets, reps, isCompleted)&#10;                    viewModel.refreshTodaysWorkout()&#10;                }&#10;            )&#10;        }&#10;        else -&gt; {&#10;            // Main content - Daily workout screen&#10;            MainScreenContent(&#10;                viewModel = viewModel,&#10;                showDebugMenu = showDebugMenu,&#10;                showResetConfirmation = showResetConfirmation,&#10;                showTemplateSelection = showTemplateSelection,&#10;                onShowDebugMenu = { showDebugMenu = it },&#10;                onShowResetConfirmation = { showResetConfirmation = it },&#10;                onShowTemplateSelection = { showTemplateSelection = it },&#10;                onNavigateToExerciseDetail = { exercise -&gt;&#10;                    selectedExercise = exercise&#10;                    onNavigateToExerciseDetail()&#10;                },&#10;                repository = repository&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/MainScreenContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/MainScreenContent.kt" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.offlinepplworkoutapp.R&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.components.DebugDaySelector&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModel&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun MainScreenContent(&#10;    viewModel: DailyWorkoutViewModel,&#10;    showDebugMenu: Boolean,&#10;    showResetConfirmation: Boolean,&#10;    showTemplateSelection: Boolean,&#10;    onShowDebugMenu: (Boolean) -&gt; Unit,&#10;    onShowResetConfirmation: (Boolean) -&gt; Unit,&#10;    onShowTemplateSelection: (Boolean) -&gt; Unit,&#10;    onNavigateToExerciseDetail: (WorkoutEntryWithExercise) -&gt; Unit,&#10;    repository: WorkoutRepository&#10;) {&#10;    val workoutEntries by viewModel.todaysWorkout.collectAsState(initial = emptyList())&#10;    val currentDate by viewModel.currentDate.collectAsState(initial = &quot;&quot;)&#10;    // Use a getter function for the workout type&#10;    val workoutType = viewModel.getWorkoutTypeName()&#10;    val isLoading by viewModel.isLoading.collectAsState(initial = false)&#10;    // Check if it's a rest day by comparing workout type&#10;    val isRestDay = workoutType == &quot;Rest Day&quot;&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;&#10;    LaunchedEffect(selectedExercise) {&#10;        if (selectedExercise != null) {&#10;            onNavigateToExerciseDetail(selectedExercise!!)&#10;        }&#10;    }&#10;&#10;    if (showDebugMenu) {&#10;        DebugDaySelector(&#10;            onDaySelected = { day -&gt;&#10;                viewModel.setDebugDate(day.toString())&#10;                onShowDebugMenu(false)&#10;            },&#10;            onDismiss = { onShowDebugMenu(false) },&#10;            onResetDatabase = {&#10;                onShowResetConfirmation(true)&#10;                onShowDebugMenu(false)&#10;            }&#10;        )&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Top bar with date and workout type&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = currentDate,&#10;                    style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = workoutType,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;&#10;                // Show a &quot;Create Template&quot; button if no workout is available&#10;                if (workoutEntries.isEmpty() &amp;&amp; !isLoading &amp;&amp; !isRestDay) {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Button(&#10;                        onClick = { onShowTemplateSelection(true) }&#10;                    ) {&#10;                        Row(verticalAlignment = Alignment.CenterVertically) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.PlayArrow,&#10;                                contentDescription = &quot;Start&quot;&#10;                            )&#10;                            Text(&#10;                                text = &quot;Select Workout Template&quot;,&#10;                                modifier = Modifier.padding(start = 8.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Content section with workout exercises or rest day message&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    CircularProgressIndicator()&#10;                }&#10;                isRestDay -&gt; {&#10;                    // Show rest day image and message&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Image(&#10;                            painter = painterResource(id = R.drawable.rest_day),&#10;                            contentDescription = &quot;Rest day&quot;,&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentScale = ContentScale.Crop,&#10;                            alpha = 0.3f&#10;                        )&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .padding(16.dp)&#10;                                .align(Alignment.Center),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.8f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .padding(24.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;REST DAY&quot;,&#10;                                    style = MaterialTheme.typography.headlineLarge.copy(&#10;                                        fontWeight = FontWeight.Bold&#10;                                    ),&#10;                                    color = MaterialTheme.colorScheme.primary&#10;                                )&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;                                Text(&#10;                                    text = &quot;Take time to recover and prepare for your next workout.&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                workoutEntries.isEmpty() -&gt; {&#10;                    // Show message when no workout is available (but it's not a rest day)&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No workout available for today.&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(&#10;                            onClick = { onShowTemplateSelection(true) }&#10;                        ) {&#10;                            Text(text = &quot;Select a Workout Template&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    // Show workout exercises&#10;                    LazyColumn {&#10;                        items(workoutEntries) { entry -&gt;&#10;                            val secondsSpent = entry.totalSecondsSpent ?: 0&#10;                            val timeDisplay = when {&#10;                                secondsSpent &lt; 60 -&gt; &quot;${secondsSpent}s&quot;&#10;                                else -&gt; {&#10;                                    val minutes = secondsSpent / 60&#10;                                    val remainingSeconds = secondsSpent % 60&#10;                                    if (remainingSeconds == 0) &quot;${minutes}m&quot; else &quot;${minutes}m ${remainingSeconds}s&quot;&#10;                                }&#10;                            }&#10;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(vertical = 4.dp)&#10;                                    .clickable {&#10;                                        selectedExercise = entry&#10;                                    },&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = if (entry.isCompleted)&#10;                                        MaterialTheme.colorScheme.secondaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.surface&#10;                                )&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Column(modifier = Modifier.weight(1f)) {&#10;                                        Text(&#10;                                            text = entry.exerciseName,&#10;                                            style = MaterialTheme.typography.titleMedium,&#10;                                            color = if (entry.isCompleted)&#10;                                                MaterialTheme.colorScheme.onSecondaryContainer&#10;                                            else&#10;                                                MaterialTheme.colorScheme.onSurface&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${entry.sets} sets × ${entry.reps} reps&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium,&#10;                                            color = if (entry.isCompleted)&#10;                                                MaterialTheme.colorScheme.onSecondaryContainer&#10;                                            else&#10;                                                MaterialTheme.colorScheme.onSurfaceVariant&#10;                                        )&#10;&#10;                                        // Display time spent&#10;                                        if (entry.totalSecondsSpent &gt; 0) {&#10;                                            Text(&#10;                                                text = &quot;Time: $timeDisplay&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall,&#10;                                                color = if (entry.isCompleted)&#10;                                                    MaterialTheme.colorScheme.onSecondaryContainer&#10;                                                else&#10;                                                    MaterialTheme.colorScheme.onSurfaceVariant&#10;                                            )&#10;                                        }&#10;                                    }&#10;&#10;                                    if (entry.isCompleted) {&#10;                                        Text(&#10;                                            text = &quot;✓&quot;,&#10;                                            style = MaterialTheme.typography.titleLarge,&#10;                                            color = MaterialTheme.colorScheme.primary&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/PlaceholderScreens.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/PlaceholderScreens.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;&#10;@Composable&#10;fun HistoryScreen(repository: WorkoutRepository) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize().padding(16.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Workout History\n\nComing Soon&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PerformanceScreen(repository: WorkoutRepository) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize().padding(16.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Performance Analytics\n\nComing Soon&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingsScreen() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize().padding(16.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Settings\n\nComing Soon&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/viewmodel/ExerciseDetailViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/viewmodel/ExerciseDetailViewModel.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;data class SetTimer(&#10;    val setNumber: Int,&#10;    val elapsedTime: Long = 0L,&#10;    val isRunning: Boolean = false,&#10;    val isCompleted: Boolean = false,&#10;    val startTime: Long = 0L&#10;)&#10;&#10;class ExerciseDetailViewModel(&#10;    private val workoutEntry: WorkoutEntryWithExercise,&#10;    private val repository: WorkoutRepository&#10;) : ViewModel() {&#10;&#10;    // Load actual sets from database instead of creating in memory&#10;    private val _setTimers = MutableStateFlow&lt;List&lt;SetTimer&gt;&gt;(emptyList())&#10;    val setTimers: StateFlow&lt;List&lt;SetTimer&gt;&gt; = _setTimers.asStateFlow()&#10;&#10;    private val _currentRunningSet = MutableStateFlow&lt;Int?&gt;(null)&#10;    val currentRunningSet: StateFlow&lt;Int?&gt; = _currentRunningSet.asStateFlow()&#10;&#10;    private val _activeSetIndex = MutableStateFlow&lt;Int&gt;(0)&#10;    val activeSetIndex: StateFlow&lt;Int&gt; = _activeSetIndex.asStateFlow()&#10;&#10;    private val _totalExerciseTime = MutableStateFlow(0L)&#10;    val totalExerciseTime: StateFlow&lt;Long&gt; = _totalExerciseTime.asStateFlow()&#10;&#10;    private val _completedSets = MutableStateFlow(0)&#10;    val completedSets: StateFlow&lt;Int&gt; = _completedSets.asStateFlow()&#10;&#10;    private val _isExerciseCompleted = MutableStateFlow(false)&#10;    val isExerciseCompleted: StateFlow&lt;Boolean&gt; = _isExerciseCompleted.asStateFlow()&#10;&#10;    //  FIXED: Enhanced rest timer functionality with proper time tracking&#10;    private val _restTimer = MutableStateFlow(0L)&#10;    val restTimer: StateFlow&lt;Long&gt; = _restTimer.asStateFlow()&#10;&#10;    private val _isRestActive = MutableStateFlow(false)&#10;    val isRestActive: StateFlow&lt;Boolean&gt; = _isRestActive.asStateFlow()&#10;&#10;    //  NEW: Track accumulated rest time for total exercise time calculation&#10;    private val _totalRestTime = MutableStateFlow(0L)&#10;    val totalRestTime: StateFlow&lt;Long&gt; = _totalRestTime.asStateFlow()&#10;&#10;    //  NEW: Phase 2.1.2 - Set data entry dialog state&#10;    private val _showSetDataDialog = MutableStateFlow(false)&#10;    val showSetDataDialog: StateFlow&lt;Boolean&gt; = _showSetDataDialog.asStateFlow()&#10;&#10;    private val _pendingSetData = MutableStateFlow&lt;Pair&lt;Int, Int&gt;?&gt;(null) // (setIndex, setId)&#10;    val pendingSetData: StateFlow&lt;Pair&lt;Int, Int&gt;?&gt; = _pendingSetData.asStateFlow()&#10;&#10;    //  NEW: State flow to signal when 1-minute rest milestone is reached&#10;    private val _restMinuteMilestoneReached = MutableStateFlow(false)&#10;    val restMinuteMilestoneReached: StateFlow&lt;Boolean&gt; = _restMinuteMilestoneReached.asStateFlow()&#10;&#10;    private var timerJob: Job? = null&#10;    private var restTimerJob: Job? = null&#10;    private var currentSetId: Int? = null&#10;&#10;    init {&#10;        loadSetsFromDatabase()&#10;    }&#10;&#10;    private fun loadSetsFromDatabase() {&#10;        viewModelScope.launch {&#10;            println(&quot; DETAIL VM: Loading sets for workout entry ID: ${workoutEntry.id}&quot;)&#10;            println(&quot; DETAIL VM: Exercise: '${workoutEntry.exerciseName}' (Exercise ID: ${workoutEntry.exerciseId})&quot;)&#10;&#10;            // First, ensure sets exist in database&#10;            val existingSets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;            println(&quot; DETAIL VM: Found ${existingSets.size} existing sets in database&quot;)&#10;&#10;            if (existingSets.isEmpty()) {&#10;                println(&quot; DETAIL VM: No sets found, creating ${workoutEntry.sets} sets&quot;)&#10;                // Create sets in database if they don't exist&#10;                repository.createSetsForWorkoutEntry(workoutEntry.id, workoutEntry.sets)&#10;                println(&quot; DETAIL VM: Sets created, reloading...&quot;)&#10;            } else {&#10;                println(&quot; DETAIL VM: Sets already exist:&quot;)&#10;                existingSets.forEach { set -&gt;&#10;                    println(&quot; DETAIL VM: Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}, completed=${set.isCompleted}, time=${set.elapsedTimeSeconds}s&quot;)&#10;                }&#10;            }&#10;&#10;            // Now load sets from database and observe changes&#10;            repository.getSetsForWorkoutEntry(workoutEntry.id).collect { dbSets -&gt;&#10;                println(&quot; DETAIL VM: Received ${dbSets.size} sets from Flow for WorkoutEntry ID: ${workoutEntry.id}&quot;)&#10;                dbSets.forEach { set -&gt;&#10;                    println(&quot; DETAIL VM: Flow Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}, completed=${set.isCompleted}, time=${set.elapsedTimeSeconds}s, repsPerformed=${set.repsPerformed}&quot;)&#10;                }&#10;&#10;                val setTimers = dbSets.map { setEntry -&gt;&#10;                    SetTimer(&#10;                        setNumber = setEntry.setNumber,&#10;                        elapsedTime = (setEntry.elapsedTimeSeconds * 1000).toLong(),&#10;                        isRunning = false, // Never restore running state from DB&#10;                        isCompleted = setEntry.isCompleted,&#10;                        startTime = 0L&#10;                    )&#10;                }&#10;&#10;                println(&quot; DETAIL VM: Created ${setTimers.size} SetTimer objects for '${workoutEntry.exerciseName}'&quot;)&#10;                _setTimers.value = setTimers&#10;                _completedSets.value = dbSets.count { it.isCompleted }&#10;                _isExerciseCompleted.value = dbSets.all { it.isCompleted } &amp;&amp; dbSets.isNotEmpty()&#10;&#10;                //  FIX: Set the active set index to the first incomplete set&#10;                val firstIncompleteSetIndex = setTimers.indexOfFirst { !it.isCompleted }&#10;                _activeSetIndex.value =&#10;                    if (firstIncompleteSetIndex != -1) firstIncompleteSetIndex else 0&#10;                println(&quot; DETAIL VM: Set active set index to: ${_activeSetIndex.value}&quot;)&#10;&#10;                updateTotalExerciseTime()&#10;&#10;                println(&quot; DETAIL VM: State updated for '${workoutEntry.exerciseName}' - completedSets: ${_completedSets.value}, isCompleted: ${_isExerciseCompleted.value}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun startSetTimer(setIndex: Int) {&#10;        println(&quot; REST DEBUG: startSetTimer called for set ${setIndex + 1}&quot;)&#10;&#10;        // Stop any currently running timer&#10;        stopAllTimers()&#10;&#10;        //  NEW: Stop rest timer when starting a new set&#10;        println(&quot; REST DEBUG: Stopping rest timer before starting new set&quot;)&#10;        stopRestTimer()&#10;&#10;        // Start timer for this set&#10;        val currentTime = System.currentTimeMillis()&#10;        val updatedTimers = _setTimers.value.toMutableList()&#10;        updatedTimers[setIndex] = updatedTimers[setIndex].copy(&#10;            isRunning = true,&#10;            startTime = currentTime&#10;        )&#10;        _setTimers.value = updatedTimers&#10;        _currentRunningSet.value = setIndex&#10;&#10;        println(&quot; REST DEBUG: Set ${setIndex + 1} timer started at $currentTime&quot;)&#10;&#10;        // Store the database set ID for persistence&#10;        viewModelScope.launch {&#10;            val dbSets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;            currentSetId = dbSets.getOrNull(setIndex)?.id&#10;        }&#10;&#10;        // Start the timer coroutine&#10;        timerJob = viewModelScope.launch {&#10;            while (_setTimers.value.getOrNull(setIndex)?.isRunning == true) {&#10;                delay(1000) // Update every second&#10;                updateTimerForSet(setIndex)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun stopSetTimer(setIndex: Int) {&#10;        val updatedTimers = _setTimers.value.toMutableList()&#10;        val timer = updatedTimers.getOrNull(setIndex) ?: return&#10;&#10;        if (timer.isRunning) {&#10;            //  FIXED: Use current elapsed time directly, don't double-count&#10;            val finalElapsedTime = System.currentTimeMillis() - timer.startTime&#10;&#10;            println(&quot; STOP TIMER DEBUG: Set ${setIndex + 1}&quot;)&#10;            println(&quot; STOP TIMER DEBUG: timer.elapsedTime = ${timer.elapsedTime}ms&quot;)&#10;            println(&quot; STOP TIMER DEBUG: startTime = ${timer.startTime}&quot;)&#10;            println(&quot; STOP TIMER DEBUG: currentTime = ${System.currentTimeMillis()}&quot;)&#10;            println(&quot; STOP TIMER DEBUG: calculated elapsed = ${finalElapsedTime}ms (${finalElapsedTime / 1000}s)&quot;)&#10;&#10;            updatedTimers[setIndex] = timer.copy(&#10;                isRunning = false,&#10;                elapsedTime = finalElapsedTime&#10;                //  CHANGED: Don't mark as completed here - wait for user data entry&#10;            )&#10;            _setTimers.value = updatedTimers&#10;            _currentRunningSet.value = null&#10;            timerJob?.cancel()&#10;&#10;            //  NEW: Phase 2.1.2 - Show data entry dialog instead of immediate completion&#10;            currentSetId?.let { setId -&gt;&#10;                println(&quot; DIALOG: Showing set data entry dialog for set ${setIndex + 1}&quot;)&#10;                _pendingSetData.value = Pair(setIndex, setId)&#10;                _showSetDataDialog.value = true&#10;&#10;                //  IMPORTANT: Start rest timer while user enters data&#10;                startRestTimer()&#10;            }&#10;        }&#10;    }&#10;&#10;    //  NEW: Phase 2.1.2 - Handle set performance data submission&#10;    fun submitSetPerformanceData(repsPerformed: Int, weightUsed: Float) {&#10;        val pendingData = _pendingSetData.value ?: return&#10;        val (setIndex, setId) = pendingData&#10;&#10;        println(&quot; DIALOG: Submitting performance data - Set ${setIndex + 1}, Reps: $repsPerformed, Weight: $weightUsed&quot;)&#10;&#10;        viewModelScope.launch {&#10;            // Get the timer data for this set&#10;            val timer = _setTimers.value.getOrNull(setIndex)&#10;            val elapsedTimeSeconds = ((timer?.elapsedTime ?: 0L) / 1000).toInt()&#10;&#10;            // Update database with completion and performance data&#10;            repository.updateSetProgressWithPerformanceData(&#10;                setId = setId,&#10;                isCompleted = true,&#10;                elapsedTimeSeconds = elapsedTimeSeconds,&#10;                repsPerformed = repsPerformed,&#10;                weightUsed = weightUsed&#10;            )&#10;&#10;            // Update local state to mark set as completed&#10;            val updatedTimers = _setTimers.value.toMutableList()&#10;            updatedTimers[setIndex] = updatedTimers[setIndex].copy(isCompleted = true)&#10;            _setTimers.value = updatedTimers&#10;&#10;            // Update exercise completion status&#10;            repository.updateExerciseCompletionFromSets(workoutEntry.id)&#10;&#10;            // Update local completed sets count&#10;            val completedCount = _setTimers.value.count { it.isCompleted }&#10;            _completedSets.value = completedCount&#10;&#10;            // Check if all sets are completed&#10;            if (completedCount == workoutEntry.sets) {&#10;                _isExerciseCompleted.value = true&#10;                // Stop rest timer if all sets are completed&#10;                stopRestTimer()&#10;            } else {&#10;                // Advance to next set - find the first incomplete set&#10;                val nextIncompleteSetIndex = _setTimers.value.indexOfFirst { !it.isCompleted }&#10;                if (nextIncompleteSetIndex != -1) {&#10;                    _activeSetIndex.value = nextIncompleteSetIndex&#10;                    println(&quot; DETAIL VM: Advanced to next set index: $nextIncompleteSetIndex&quot;)&#10;                }&#10;            }&#10;&#10;            // Update total time calculation&#10;            updateTotalExerciseTime()&#10;&#10;            // Hide dialog and clear pending data&#10;            _showSetDataDialog.value = false&#10;            _pendingSetData.value = null&#10;&#10;            println(&quot; DIALOG: Set performance data saved successfully&quot;)&#10;        }&#10;    }&#10;&#10;    //  NEW: 2.2.1 - Edit set data functionality&#10;    fun editSetData(setIndex: Int) {&#10;        println(&quot; EDIT: editSetData called for set ${setIndex + 1}&quot;)&#10;&#10;        viewModelScope.launch {&#10;            val sets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;            val setToEdit = sets.getOrNull(setIndex)&#10;&#10;            if (setToEdit != null &amp;&amp; setToEdit.isCompleted) {&#10;                println(&quot; EDIT: Opening edit dialog for completed set ${setIndex + 1}&quot;)&#10;                _pendingSetData.value = Pair(setIndex, setToEdit.id)&#10;                _showSetDataDialog.value = true&#10;            } else {&#10;                println(&quot; EDIT: Cannot edit set ${setIndex + 1} - not completed or not found&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Enhanced dialog state management for editing&#10;    fun dismissSetDataDialog() {&#10;        println(&quot; DIALOG: Dismissing set data dialog&quot;)&#10;        _showSetDataDialog.value = false&#10;        _pendingSetData.value = null&#10;    }&#10;&#10;    // Get set data for UI display&#10;    fun getSetData(setIndex: Int) = repository.getSetByIndex(workoutEntry.id, setIndex + 1)&#10;&#10;    //  NEW: 2.2.2 - Dynamic Set Management Functions&#10;&#10;    //  NEW: Enhanced set management methods&#10;    fun removeSpecificSet(setIndex: Int) {&#10;        println(&quot; SET MGMT: removeSpecificSet() called for index $setIndex&quot;)&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                val currentSets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;&#10;                if (setIndex &lt; currentSets.size) {&#10;                    val setToRemove = currentSets[setIndex]&#10;&#10;                    // Can only remove incomplete sets and must have more than 1 set&#10;                    if (!setToRemove.isCompleted &amp;&amp; currentSets.size &gt; 1) {&#10;                        println(&quot; SET MGMT: Removing set #${setToRemove.setNumber} (ID: ${setToRemove.id})&quot;)&#10;&#10;                        // Stop any running timer for this set&#10;                        if (_currentRunningSet.value == setIndex) {&#10;                            stopAllTimers()&#10;                        }&#10;&#10;                        // Remove set from database&#10;                        repository.removeSetFromWorkoutEntry(setToRemove.id)&#10;&#10;                        // Update active set index if needed&#10;                        val newSetCount = currentSets.size - 1&#10;                        if (_activeSetIndex.value &gt;= newSetCount) {&#10;                            _activeSetIndex.value = maxOf(0, newSetCount - 1)&#10;                        }&#10;&#10;                        println(&quot; SET MGMT: Successfully removed set at index $setIndex&quot;)&#10;                    } else {&#10;                        println(&quot; SET MGMT ERROR: Cannot remove set - either completed or minimum count reached&quot;)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                println(&quot; SET MGMT ERROR: Failed to remove specific set - ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addSetWithReps() {&#10;        println(&quot; SET MGMT: addSetWithReps() called&quot;)&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                val currentSets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;                val newSetNumber = currentSets.size + 1&#10;&#10;                if (currentSets.size &lt; 8) { // Max 8 sets per exercise&#10;                    println(&quot; SET MGMT: Adding set #$newSetNumber&quot;)&#10;&#10;                    // Add new set to database - we don't need to pass targetReps since&#10;                    // the target reps value comes from the parent workout entry&#10;                    repository.addSetToWorkoutEntry(workoutEntry.id, newSetNumber)&#10;&#10;                    println(&quot; SET MGMT: Successfully added set #$newSetNumber&quot;)&#10;                } else {&#10;                    println(&quot; SET MGMT ERROR: Cannot add set - maximum 8 sets reached&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                println(&quot; SET MGMT ERROR: Failed to add set - ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        timerJob?.cancel()&#10;        restTimerJob?.cancel() //  NEW: Clean up rest timer job&#10;    }&#10;&#10;    private fun stopAllTimers() {&#10;        timerJob?.cancel()&#10;        val updatedTimers = _setTimers.value.map { timer -&gt;&#10;            timer.copy(isRunning = false)&#10;        }&#10;        _setTimers.value = updatedTimers&#10;        _currentRunningSet.value = null&#10;    }&#10;&#10;    private fun updateTimerForSet(setIndex: Int) {&#10;        val updatedTimers = _setTimers.value.toMutableList()&#10;        val timer = updatedTimers[setIndex]&#10;&#10;        if (timer.isRunning) {&#10;            val currentTime = System.currentTimeMillis()&#10;            //  FIXED: Don't add previous elapsedTime - just calculate from start&#10;            val elapsed = currentTime - timer.startTime&#10;            updatedTimers[setIndex] = timer.copy(elapsedTime = elapsed)&#10;            _setTimers.value = updatedTimers&#10;&#10;            //  REMOVED: Don't update total time during live timer updates&#10;            // updateTotalExerciseTime() // This was causing live updates in top bar&#10;&#10;            //  ADDED: Force UI recomposition for live stopwatch display&#10;            println(&quot;⏱️ TIMER: Set ${setIndex + 1} - ${elapsed / 1000}s (Live)&quot;)&#10;        }&#10;    }&#10;&#10;    private fun updateTotalExerciseTime() {&#10;        //  FIXED: Only count completed sets for total time, not running timers&#10;        val completedSets = _setTimers.value.filter { it.isCompleted }&#10;&#10;        println(&quot; TOTAL TIME DEBUG: Calculating total exercise time...&quot;)&#10;        println(&quot; TOTAL TIME DEBUG: Found ${completedSets.size} completed sets:&quot;)&#10;&#10;        completedSets.forEachIndexed { index, set -&gt;&#10;            println(&quot; TOTAL TIME DEBUG: Set ${index + 1}: ${set.elapsedTime}ms (${set.elapsedTime / 1000}s)&quot;)&#10;        }&#10;&#10;        val setTime = completedSets.sumOf { it.elapsedTime }&#10;&#10;        //  NEW: Include accumulated rest time in total&#10;        val restTime = _totalRestTime.value&#10;        val totalTime = setTime + restTime&#10;&#10;        println(&quot; TOTAL TIME DEBUG: Sum of all completed sets: ${setTime}ms (${setTime / 1000}s)&quot;)&#10;        println(&quot; TOTAL TIME DEBUG: Total accumulated rest time: ${restTime}ms (${restTime / 1000}s)&quot;)&#10;        println(&quot; TOTAL TIME DEBUG: Combined total time: ${totalTime}ms (${totalTime / 1000}s)&quot;)&#10;        println(&quot; TOTAL TIME DEBUG: Setting _totalExerciseTime to: ${totalTime}&quot;)&#10;&#10;        _totalExerciseTime.value = totalTime&#10;&#10;        println(&quot; TOTAL TIME DEBUG: _totalExerciseTime.value is now: ${_totalExerciseTime.value}&quot;)&#10;&#10;        //  NEW: Update totalSecondsSpent in WorkoutEntry database record&#10;        val totalSeconds = (totalTime / 1000).toInt()&#10;        viewModelScope.launch {&#10;            println(&quot; TOTAL TIME DEBUG: Updating WorkoutEntry.totalSecondsSpent to ${totalSeconds}s&quot;)&#10;            repository.updateExerciseTime(workoutEntry.id, totalSeconds)&#10;            println(&quot; TOTAL TIME DEBUG: Database updated with new exercise time&quot;)&#10;        }&#10;    }&#10;&#10;    //  NEW: Rest timer functionality&#10;    private fun startRestTimer() {&#10;        println(&quot; REST DEBUG: startRestTimer() called&quot;)&#10;        println(&quot; REST DEBUG: Current _isRestActive state: ${_isRestActive.value}&quot;)&#10;&#10;        // Don't start a new rest timer if one is already active&#10;        if (_isRestActive.value) {&#10;            println(&quot; REST DEBUG: Rest timer already active, skipping start&quot;)&#10;            return&#10;        }&#10;&#10;        println(&quot; REST DEBUG: Setting _isRestActive to true&quot;)&#10;        _isRestActive.value = true&#10;        val restStartTime = System.currentTimeMillis()&#10;        println(&quot; REST DEBUG: Rest timer start time: $restStartTime&quot;)&#10;&#10;        // Start the rest timer job&#10;        restTimerJob = viewModelScope.launch {&#10;            var elapsedRestTime = 0L&#10;            println(&quot; REST DEBUG: Rest timer coroutine started&quot;)&#10;&#10;            while (_isRestActive.value) {&#10;                delay(1000) // Update every second&#10;                elapsedRestTime += 1000&#10;                _restTimer.value = elapsedRestTime&#10;&#10;                //  NEW: Trigger milestone notification at 1 minute&#10;                if (elapsedRestTime &gt;= 60000 &amp;&amp; !_restMinuteMilestoneReached.value) {&#10;                    _restMinuteMilestoneReached.value = true&#10;                    println(&quot; REST MILESTONE: 1 minute of rest reached&quot;)&#10;                }&#10;&#10;                println(&quot;⏱️ REST TIMER: ${elapsedRestTime / 1000}s (Live) - _restTimer.value = ${_restTimer.value}&quot;)&#10;            }&#10;            println(&quot; REST DEBUG: Rest timer coroutine ended&quot;)&#10;        }&#10;&#10;        println(&quot; REST TIMER STARTED - Job created: ${restTimerJob != null}&quot;)&#10;    }&#10;&#10;    private fun stopRestTimer() {&#10;        println(&quot; REST DEBUG: stopRestTimer() called&quot;)&#10;        println(&quot; REST DEBUG: Current _isRestActive state: ${_isRestActive.value}&quot;)&#10;&#10;        if (!_isRestActive.value) {&#10;            println(&quot; REST DEBUG: Rest timer not active, nothing to stop&quot;)&#10;            return&#10;        }&#10;&#10;        //  CRITICAL FIX: Capture rest time before stopping&#10;        val completedRestTime = _restTimer.value&#10;        println(&quot; REST DEBUG: Capturing rest time: ${completedRestTime}ms (${completedRestTime / 1000}s)&quot;)&#10;&#10;        //  NEW: Add to total rest time accumulator&#10;        _totalRestTime.value += completedRestTime&#10;        println(&quot; REST DEBUG: Added ${completedRestTime}ms to total rest time&quot;)&#10;        println(&quot; REST DEBUG: Total accumulated rest time is now: ${_totalRestTime.value}ms (${_totalRestTime.value / 1000}s)&quot;)&#10;&#10;        println(&quot; REST DEBUG: Setting _isRestActive to false&quot;)&#10;        _isRestActive.value = false&#10;&#10;        println(&quot; REST DEBUG: Cancelling rest timer job&quot;)&#10;        restTimerJob?.cancel()&#10;        restTimerJob = null&#10;&#10;        // Reset rest timer value (but keep the accumulated total)&#10;        val previousValue = _restTimer.value&#10;        _restTimer.value = 0L&#10;        println(&quot; REST DEBUG: Reset _restTimer from ${previousValue}ms to ${_restTimer.value}ms&quot;)&#10;&#10;        //  NEW: Update total exercise time with new rest time&#10;        updateTotalExerciseTime()&#10;&#10;        println(&quot;⏹️ REST TIMER STOPPED - Rest time captured and added to total&quot;)&#10;    }&#10;}&#10;&#10;class ExerciseDetailViewModelFactory(&#10;    private val workoutEntry: WorkoutEntryWithExercise,&#10;    private val repository: WorkoutRepository&#10;) : ViewModelProvider.Factory {&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(ExerciseDetailViewModel::class.java)) {&#10;            return ExerciseDetailViewModel(workoutEntry, repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;data class SetTimer(&#10;    val setNumber: Int,&#10;    val elapsedTime: Long = 0L,&#10;    val isRunning: Boolean = false,&#10;    val isCompleted: Boolean = false,&#10;    val startTime: Long = 0L&#10;)&#10;&#10;class ExerciseDetailViewModel(&#10;    private val workoutEntry: WorkoutEntryWithExercise,&#10;    private val repository: WorkoutRepository&#10;) : ViewModel() {&#10;&#10;    // Load actual sets from database instead of creating in memory&#10;    private val _setTimers = MutableStateFlow&lt;List&lt;SetTimer&gt;&gt;(emptyList())&#10;    val setTimers: StateFlow&lt;List&lt;SetTimer&gt;&gt; = _setTimers.asStateFlow()&#10;&#10;    private val _currentRunningSet = MutableStateFlow&lt;Int?&gt;(null)&#10;    val currentRunningSet: StateFlow&lt;Int?&gt; = _currentRunningSet.asStateFlow()&#10;&#10;    private val _activeSetIndex = MutableStateFlow&lt;Int&gt;(0)&#10;    val activeSetIndex: StateFlow&lt;Int&gt; = _activeSetIndex.asStateFlow()&#10;&#10;    private val _totalExerciseTime = MutableStateFlow(0L)&#10;    val totalExerciseTime: StateFlow&lt;Long&gt; = _totalExerciseTime.asStateFlow()&#10;&#10;    private val _completedSets = MutableStateFlow(0)&#10;    val completedSets: StateFlow&lt;Int&gt; = _completedSets.asStateFlow()&#10;&#10;    private val _isExerciseCompleted = MutableStateFlow(false)&#10;    val isExerciseCompleted: StateFlow&lt;Boolean&gt; = _isExerciseCompleted.asStateFlow()&#10;&#10;    //  FIXED: Enhanced rest timer functionality with proper time tracking&#10;    private val _restTimer = MutableStateFlow(0L)&#10;    val restTimer: StateFlow&lt;Long&gt; = _restTimer.asStateFlow()&#10;&#10;    private val _isRestActive = MutableStateFlow(false)&#10;    val isRestActive: StateFlow&lt;Boolean&gt; = _isRestActive.asStateFlow()&#10;&#10;    //  NEW: Track accumulated rest time for total exercise time calculation&#10;    private val _totalRestTime = MutableStateFlow(0L)&#10;    val totalRestTime: StateFlow&lt;Long&gt; = _totalRestTime.asStateFlow()&#10;&#10;    //  NEW: Phase 2.1.2 - Set data entry dialog state&#10;    private val _showSetDataDialog = MutableStateFlow(false)&#10;    val showSetDataDialog: StateFlow&lt;Boolean&gt; = _showSetDataDialog.asStateFlow()&#10;&#10;    private val _pendingSetData = MutableStateFlow&lt;Pair&lt;Int, Int&gt;?&gt;(null) // (setIndex, setId)&#10;    val pendingSetData: StateFlow&lt;Pair&lt;Int, Int&gt;?&gt; = _pendingSetData.asStateFlow()&#10;&#10;    //  NEW: State flow to signal when 1-minute rest milestone is reached&#10;    private val _restMinuteMilestoneReached = MutableStateFlow(false)&#10;    val restMinuteMilestoneReached: StateFlow&lt;Boolean&gt; = _restMinuteMilestoneReached.asStateFlow()&#10;&#10;    private var timerJob: Job? = null&#10;    private var restTimerJob: Job? = null&#10;    private var currentSetId: Int? = null&#10;&#10;    init {&#10;        loadSetsFromDatabase()&#10;    }&#10;&#10;    private fun loadSetsFromDatabase() {&#10;        viewModelScope.launch {&#10;            println(&quot; DETAIL VM: Loading sets for workout entry ID: ${workoutEntry.id}&quot;)&#10;            println(&quot; DETAIL VM: Exercise: '${workoutEntry.exerciseName}' (Exercise ID: ${workoutEntry.exerciseId})&quot;)&#10;&#10;            // First, ensure sets exist in database&#10;            val existingSets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;            println(&quot; DETAIL VM: Found ${existingSets.size} existing sets in database&quot;)&#10;&#10;            if (existingSets.isEmpty()) {&#10;                println(&quot; DETAIL VM: No sets found, creating ${workoutEntry.sets} sets&quot;)&#10;                // Create sets in database if they don't exist&#10;                repository.createSetsForWorkoutEntry(workoutEntry.id, workoutEntry.sets)&#10;                println(&quot; DETAIL VM: Sets created, reloading...&quot;)&#10;            } else {&#10;                println(&quot; DETAIL VM: Sets already exist:&quot;)&#10;                existingSets.forEach { set -&gt;&#10;                    println(&quot; DETAIL VM: Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}, completed=${set.isCompleted}, time=${set.elapsedTimeSeconds}s&quot;)&#10;                }&#10;            }&#10;&#10;            // Now load sets from database and observe changes&#10;            repository.getSetsForWorkoutEntry(workoutEntry.id).collect { dbSets -&gt;&#10;                println(&quot; DETAIL VM: Received ${dbSets.size} sets from Flow for WorkoutEntry ID: ${workoutEntry.id}&quot;)&#10;                dbSets.forEach { set -&gt;&#10;                    println(&quot; DETAIL VM: Flow Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}, completed=${set.isCompleted}, time=${set.elapsedTimeSeconds}s, repsPerformed=${set.repsPerformed}&quot;)&#10;                }&#10;&#10;                val setTimers = dbSets.map { setEntry -&gt;&#10;                    SetTimer(&#10;                        setNumber = setEntry.setNumber,&#10;                        elapsedTime = (setEntry.elapsedTimeSeconds * 1000).toLong(),&#10;                        isRunning = false, // Never restore running state from DB&#10;                        isCompleted = setEntry.isCompleted,&#10;                        startTime = 0L&#10;                    )&#10;                }&#10;&#10;                println(&quot; DETAIL VM: Created ${setTimers.size} SetTimer objects for '${workoutEntry.exerciseName}'&quot;)&#10;                _setTimers.value = setTimers&#10;                _completedSets.value = dbSets.count { it.isCompleted }&#10;                _isExerciseCompleted.value = dbSets.all { it.isCompleted } &amp;&amp; dbSets.isNotEmpty()&#10;&#10;                //  FIX: Set the active set index to the first incomplete set&#10;                val firstIncompleteSetIndex = setTimers.indexOfFirst { !it.isCompleted }&#10;                _activeSetIndex.value =&#10;                    if (firstIncompleteSetIndex != -1) firstIncompleteSetIndex else 0&#10;                println(&quot; DETAIL VM: Set active set index to: ${_activeSetIndex.value}&quot;)&#10;&#10;                updateTotalExerciseTime()&#10;&#10;                println(&quot; DETAIL VM: State updated for '${workoutEntry.exerciseName}' - completedSets: ${_completedSets.value}, isCompleted: ${_isExerciseCompleted.value}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun startSetTimer(setIndex: Int) {&#10;        println(&quot; REST DEBUG: startSetTimer called for set ${setIndex + 1}&quot;)&#10;&#10;        // Stop any currently running timer&#10;        stopAllTimers()&#10;&#10;        //  NEW: Stop rest timer when starting a new set&#10;        println(&quot; REST DEBUG: Stopping rest timer before starting new set&quot;)&#10;        stopRestTimer()&#10;&#10;        // Start timer for this set&#10;        val currentTime = System.currentTimeMillis()&#10;        val updatedTimers = _setTimers.value.toMutableList()&#10;        updatedTimers[setIndex] = updatedTimers[setIndex].copy(&#10;            isRunning = true,&#10;            startTime = currentTime&#10;        )&#10;        _setTimers.value = updatedTimers&#10;        _currentRunningSet.value = setIndex&#10;&#10;        println(&quot; REST DEBUG: Set ${setIndex + 1} timer started at $currentTime&quot;)&#10;&#10;        // Store the database set ID for persistence&#10;        viewModelScope.launch {&#10;            val dbSets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;            currentSetId = dbSets.getOrNull(setIndex)?.id&#10;        }&#10;&#10;        // Start the timer coroutine&#10;        timerJob = viewModelScope.launch {&#10;            while (_setTimers.value.getOrNull(setIndex)?.isRunning == true) {&#10;                delay(1000) // Update every second&#10;                updateTimerForSet(setIndex)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun stopSetTimer(setIndex: Int) {&#10;        val updatedTimers = _setTimers.value.toMutableList()&#10;        val timer = updatedTimers.getOrNull(setIndex) ?: return&#10;&#10;        if (timer.isRunning) {&#10;            //  FIXED: Use current elapsed time directly, don't double-count&#10;            val finalElapsedTime = System.currentTimeMillis() - timer.startTime&#10;&#10;            println(&quot; STOP TIMER DEBUG: Set ${setIndex + 1}&quot;)&#10;            println(&quot; STOP TIMER DEBUG: timer.elapsedTime = ${timer.elapsedTime}ms&quot;)&#10;            println(&quot; STOP TIMER DEBUG: startTime = ${timer.startTime}&quot;)&#10;            println(&quot; STOP TIMER DEBUG: currentTime = ${System.currentTimeMillis()}&quot;)&#10;            println(&quot; STOP TIMER DEBUG: calculated elapsed = ${finalElapsedTime}ms (${finalElapsedTime / 1000}s)&quot;)&#10;&#10;            updatedTimers[setIndex] = timer.copy(&#10;                isRunning = false,&#10;                elapsedTime = finalElapsedTime&#10;                //  CHANGED: Don't mark as completed here - wait for user data entry&#10;            )&#10;            _setTimers.value = updatedTimers&#10;            _currentRunningSet.value = null&#10;            timerJob?.cancel()&#10;&#10;            //  NEW: Phase 2.1.2 - Show data entry dialog instead of immediate completion&#10;            currentSetId?.let { setId -&gt;&#10;                println(&quot; DIALOG: Showing set data entry dialog for set ${setIndex + 1}&quot;)&#10;                _pendingSetData.value = Pair(setIndex, setId)&#10;                _showSetDataDialog.value = true&#10;&#10;                //  IMPORTANT: Start rest timer while user enters data&#10;                startRestTimer()&#10;            }&#10;        }&#10;    }&#10;&#10;    //  NEW: Phase 2.1.2 - Handle set performance data submission&#10;    fun submitSetPerformanceData(repsPerformed: Int, weightUsed: Float) {&#10;        val pendingData = _pendingSetData.value ?: return&#10;        val (setIndex, setId) = pendingData&#10;&#10;        println(&quot; DIALOG: Submitting performance data - Set ${setIndex + 1}, Reps: $repsPerformed, Weight: $weightUsed&quot;)&#10;&#10;        viewModelScope.launch {&#10;            // Get the timer data for this set&#10;            val timer = _setTimers.value.getOrNull(setIndex)&#10;            val elapsedTimeSeconds = ((timer?.elapsedTime ?: 0L) / 1000).toInt()&#10;&#10;            // Update database with completion and performance data&#10;            repository.updateSetProgressWithPerformanceData(&#10;                setId = setId,&#10;                isCompleted = true,&#10;                elapsedTimeSeconds = elapsedTimeSeconds,&#10;                repsPerformed = repsPerformed,&#10;                weightUsed = weightUsed&#10;            )&#10;&#10;            // Update local state to mark set as completed&#10;            val updatedTimers = _setTimers.value.toMutableList()&#10;            updatedTimers[setIndex] = updatedTimers[setIndex].copy(isCompleted = true)&#10;            _setTimers.value = updatedTimers&#10;&#10;            // Update exercise completion status&#10;            repository.updateExerciseCompletionFromSets(workoutEntry.id)&#10;&#10;            // Update local completed sets count&#10;            val completedCount = _setTimers.value.count { it.isCompleted }&#10;            _completedSets.value = completedCount&#10;&#10;            // Check if all sets are completed&#10;            if (completedCount == workoutEntry.sets) {&#10;                _isExerciseCompleted.value = true&#10;                // Stop rest timer if all sets are completed&#10;                stopRestTimer()&#10;            } else {&#10;                // Advance to next set - find the first incomplete set&#10;                val nextIncompleteSetIndex = _setTimers.value.indexOfFirst { !it.isCompleted }&#10;                if (nextIncompleteSetIndex != -1) {&#10;                    _activeSetIndex.value = nextIncompleteSetIndex&#10;                    println(&quot; DETAIL VM: Advanced to next set index: $nextIncompleteSetIndex&quot;)&#10;                }&#10;            }&#10;&#10;            // Update total time calculation&#10;            updateTotalExerciseTime()&#10;&#10;            // Hide dialog and clear pending data&#10;            _showSetDataDialog.value = false&#10;            _pendingSetData.value = null&#10;&#10;            println(&quot; DIALOG: Set performance data saved successfully&quot;)&#10;        }&#10;    }&#10;&#10;    //  NEW: 2.2.1 - Edit set data functionality&#10;    fun editSetData(setIndex: Int) {&#10;        println(&quot; EDIT: editSetData called for set ${setIndex + 1}&quot;)&#10;&#10;        viewModelScope.launch {&#10;            val sets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;            val setToEdit = sets.getOrNull(setIndex)&#10;&#10;            if (setToEdit != null &amp;&amp; setToEdit.isCompleted) {&#10;                println(&quot; EDIT: Opening edit dialog for completed set ${setIndex + 1}&quot;)&#10;                _pendingSetData.value = Pair(setIndex, setToEdit.id)&#10;                _showSetDataDialog.value = true&#10;            } else {&#10;                println(&quot; EDIT: Cannot edit set ${setIndex + 1} - not completed or not found&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Enhanced dialog state management for editing&#10;    fun dismissSetDataDialog() {&#10;        println(&quot; DIALOG: Dismissing set data dialog&quot;)&#10;        _showSetDataDialog.value = false&#10;        _pendingSetData.value = null&#10;    }&#10;&#10;    // Get set data for UI display&#10;    fun getSetData(setIndex: Int) = repository.getSetByIndex(workoutEntry.id, setIndex + 1)&#10;&#10;    //  NEW: 2.2.2 - Dynamic Set Management Functions&#10;&#10;    //  NEW: Enhanced set management methods&#10;    fun removeSpecificSet(setIndex: Int) {&#10;        println(&quot; SET MGMT: removeSpecificSet() called for index $setIndex&quot;)&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                val currentSets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;&#10;                if (setIndex &lt; currentSets.size) {&#10;                    val setToRemove = currentSets[setIndex]&#10;&#10;                    // Can only remove incomplete sets and must have more than 1 set&#10;                    if (!setToRemove.isCompleted &amp;&amp; currentSets.size &gt; 1) {&#10;                        println(&quot; SET MGMT: Removing set #${setToRemove.setNumber} (ID: ${setToRemove.id})&quot;)&#10;&#10;                        // Stop any running timer for this set&#10;                        if (_currentRunningSet.value == setIndex) {&#10;                            stopAllTimers()&#10;                        }&#10;&#10;                        // Remove set from database&#10;                        repository.removeSetFromWorkoutEntry(setToRemove.id)&#10;&#10;                        // Update active set index if needed&#10;                        val newSetCount = currentSets.size - 1&#10;                        if (_activeSetIndex.value &gt;= newSetCount) {&#10;                            _activeSetIndex.value = maxOf(0, newSetCount - 1)&#10;                        }&#10;&#10;                        println(&quot; SET MGMT: Successfully removed set at index $setIndex&quot;)&#10;                    } else {&#10;                        println(&quot; SET MGMT ERROR: Cannot remove set - either completed or minimum count reached&quot;)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                println(&quot; SET MGMT ERROR: Failed to remove specific set - ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addSetWithReps() {&#10;        println(&quot; SET MGMT: addSetWithReps() called&quot;)&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                val currentSets = repository.getSetsForWorkoutEntrySync(workoutEntry.id)&#10;                val newSetNumber = currentSets.size + 1&#10;&#10;                if (currentSets.size &lt; 8) { // Max 8 sets per exercise&#10;                    println(&quot; SET MGMT: Adding set #$newSetNumber&quot;)&#10;&#10;                    // Add new set to database - we don't need to pass targetReps since&#10;                    // the target reps value comes from the parent workout entry&#10;                    repository.addSetToWorkoutEntry(workoutEntry.id, newSetNumber)&#10;&#10;                    println(&quot; SET MGMT: Successfully added set #$newSetNumber&quot;)&#10;                } else {&#10;                    println(&quot; SET MGMT ERROR: Cannot add set - maximum 8 sets reached&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                println(&quot; SET MGMT ERROR: Failed to add set - ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        timerJob?.cancel()&#10;        restTimerJob?.cancel() //  NEW: Clean up rest timer job&#10;    }&#10;&#10;    private fun stopAllTimers() {&#10;        timerJob?.cancel()&#10;        val updatedTimers = _setTimers.value.map { timer -&gt;&#10;            timer.copy(isRunning = false)&#10;        }&#10;        _setTimers.value = updatedTimers&#10;        _currentRunningSet.value = null&#10;    }&#10;&#10;    private fun updateTimerForSet(setIndex: Int) {&#10;        val updatedTimers = _setTimers.value.toMutableList()&#10;        val timer = updatedTimers[setIndex]&#10;&#10;        if (timer.isRunning) {&#10;            val currentTime = System.currentTimeMillis()&#10;            //  FIXED: Don't add previous elapsedTime - just calculate from start&#10;            val elapsed = currentTime - timer.startTime&#10;            updatedTimers[setIndex] = timer.copy(elapsedTime = elapsed)&#10;            _setTimers.value = updatedTimers&#10;&#10;            //  REMOVED: Don't update total time during live timer updates&#10;            // updateTotalExerciseTime() // This was causing live updates in top bar&#10;&#10;            //  ADDED: Force UI recomposition for live stopwatch display&#10;            println(&quot;⏱️ TIMER: Set ${setIndex + 1} - ${elapsed / 1000}s (Live)&quot;)&#10;        }&#10;    }&#10;&#10;    private fun updateTotalExerciseTime() {&#10;        //  FIXED: Only count completed sets for total time, not running timers&#10;        val completedSets = _setTimers.value.filter { it.isCompleted }&#10;&#10;        println(&quot; TOTAL TIME DEBUG: Calculating total exercise time...&quot;)&#10;        println(&quot; TOTAL TIME DEBUG: Found ${completedSets.size} completed sets:&quot;)&#10;&#10;        completedSets.forEachIndexed { index, set -&gt;&#10;            println(&quot; TOTAL TIME DEBUG: Set ${index + 1}: ${set.elapsedTime}ms (${set.elapsedTime / 1000}s)&quot;)&#10;        }&#10;&#10;        val setTime = completedSets.sumOf { it.elapsedTime }&#10;&#10;        //  NEW: Include accumulated rest time in total&#10;        val restTime = _totalRestTime.value&#10;        val totalTime = setTime + restTime&#10;&#10;        println(&quot; TOTAL TIME DEBUG: Sum of all completed sets: ${setTime}ms (${setTime / 1000}s)&quot;)&#10;        println(&quot; TOTAL TIME DEBUG: Total accumulated rest time: ${restTime}ms (${restTime / 1000}s)&quot;)&#10;        println(&quot; TOTAL TIME DEBUG: Combined total time: ${totalTime}ms (${totalTime / 1000}s)&quot;)&#10;        println(&quot; TOTAL TIME DEBUG: Setting _totalExerciseTime to: ${totalTime}&quot;)&#10;&#10;        _totalExerciseTime.value = totalTime&#10;&#10;        println(&quot; TOTAL TIME DEBUG: _totalExerciseTime.value is now: ${_totalExerciseTime.value}&quot;)&#10;&#10;        //  NEW: Update totalSecondsSpent in WorkoutEntry database record&#10;        val totalSeconds = (totalTime / 1000).toInt()&#10;        viewModelScope.launch {&#10;            println(&quot; TOTAL TIME DEBUG: Updating WorkoutEntry.totalSecondsSpent to ${totalSeconds}s&quot;)&#10;            repository.updateExerciseTime(workoutEntry.id, totalSeconds)&#10;            println(&quot; TOTAL TIME DEBUG: Database updated with new exercise time&quot;)&#10;        }&#10;    }&#10;&#10;    //  NEW: Rest timer functionality&#10;    private fun startRestTimer() {&#10;        println(&quot; REST DEBUG: startRestTimer() called&quot;)&#10;        println(&quot; REST DEBUG: Current _isRestActive state: ${_isRestActive.value}&quot;)&#10;&#10;        // Don't start a new rest timer if one is already active&#10;        if (_isRestActive.value) {&#10;            println(&quot; REST DEBUG: Rest timer already active, skipping start&quot;)&#10;            return&#10;        }&#10;&#10;        //  FIX: Reset milestone flag when starting a new rest timer&#10;        _restMinuteMilestoneReached.value = false&#10;        println(&quot; REST DEBUG: Reset milestone notification flag&quot;)&#10;&#10;        println(&quot; REST DEBUG: Setting _isRestActive to true&quot;)&#10;        _isRestActive.value = true&#10;        val restStartTime = System.currentTimeMillis()&#10;        println(&quot; REST DEBUG: Rest timer start time: $restStartTime&quot;)&#10;&#10;        // Start the rest timer job&#10;        restTimerJob = viewModelScope.launch {&#10;            var elapsedRestTime = 0L&#10;            println(&quot; REST DEBUG: Rest timer coroutine started&quot;)&#10;&#10;            while (_isRestActive.value) {&#10;                delay(1000) // Update every second&#10;                elapsedRestTime += 1000&#10;                _restTimer.value = elapsedRestTime&#10;&#10;                //  NEW: Trigger milestone notification at 1 minute&#10;                if (elapsedRestTime &gt;= 60000 &amp;&amp; !_restMinuteMilestoneReached.value) {&#10;                    _restMinuteMilestoneReached.value = true&#10;                    println(&quot; REST MILESTONE: 1 minute of rest reached&quot;)&#10;                }&#10;&#10;                println(&quot;⏱️ REST TIMER: ${elapsedRestTime / 1000}s (Live) - _restTimer.value = ${_restTimer.value}&quot;)&#10;            }&#10;            println(&quot; REST DEBUG: Rest timer coroutine ended&quot;)&#10;        }&#10;&#10;        println(&quot; REST TIMER STARTED - Job created: ${restTimerJob != null}&quot;)&#10;    }&#10;&#10;    private fun stopRestTimer() {&#10;        println(&quot; REST DEBUG: stopRestTimer() called&quot;)&#10;        println(&quot; REST DEBUG: Current _isRestActive state: ${_isRestActive.value}&quot;)&#10;&#10;        if (!_isRestActive.value) {&#10;            println(&quot; REST DEBUG: Rest timer not active, nothing to stop&quot;)&#10;            return&#10;        }&#10;&#10;        //  CRITICAL FIX: Capture rest time before stopping&#10;        val completedRestTime = _restTimer.value&#10;        println(&quot; REST DEBUG: Capturing rest time: ${completedRestTime}ms (${completedRestTime / 1000}s)&quot;)&#10;&#10;        //  NEW: Add to total rest time accumulator&#10;        _totalRestTime.value += completedRestTime&#10;        println(&quot; REST DEBUG: Added ${completedRestTime}ms to total rest time&quot;)&#10;        println(&quot; REST DEBUG: Total accumulated rest time is now: ${_totalRestTime.value}ms (${_totalRestTime.value / 1000}s)&quot;)&#10;&#10;        println(&quot; REST DEBUG: Setting _isRestActive to false&quot;)&#10;        _isRestActive.value = false&#10;&#10;        println(&quot; REST DEBUG: Cancelling rest timer job&quot;)&#10;        restTimerJob?.cancel()&#10;        restTimerJob = null&#10;&#10;        // Reset rest timer value (but keep the accumulated total)&#10;        val previousValue = _restTimer.value&#10;        _restTimer.value = 0L&#10;        println(&quot; REST DEBUG: Reset _restTimer from ${previousValue}ms to ${_restTimer.value}ms&quot;)&#10;&#10;        //  NEW: Update total exercise time with new rest time&#10;        updateTotalExerciseTime()&#10;&#10;        println(&quot;⏹️ REST TIMER STOPPED - Rest time captured and added to total&quot;)&#10;    }&#10;}&#10;&#10;class ExerciseDetailViewModelFactory(&#10;    private val workoutEntry: WorkoutEntryWithExercise,&#10;    private val repository: WorkoutRepository&#10;) : ViewModelProvider.Factory {&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(ExerciseDetailViewModel::class.java)) {&#10;            return ExerciseDetailViewModel(workoutEntry, repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_history.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_history.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M13,3c-4.97,0 -9,4.03 -9,9L1,12l3.89,3.89 0.07,0.14L9,12L6,12c0,-3.87 3.13,-7 7,-7s7,3.13 7,7 -3.13,7 -7,7c-1.93,0 -3.68,-0.79 -4.94,-2.06l-1.42,1.42C8.27,19.99 10.51,21 13,21c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08L13.5,8L12,8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_performance.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_performance.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M19,3L5,3c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2L21,5c0,-1.1 -0.9,-2 -2,-2zM9,17L7,17v-7h2v7zM13,17h-2L11,7h2v10zM17,17h-2v-4h2v4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94c0,-0.32 -0.02,-0.64 -0.07,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.12,-0.22 -0.37,-0.29 -0.59,-0.22l-2.39,0.96c-0.5,-0.38 -1.03,-0.7 -1.62,-0.94L14.4,2.81c-0.04,-0.24 -0.24,-0.41 -0.48,-0.41h-3.84c-0.24,0 -0.43,0.17 -0.47,0.41L9.25,5.35C8.66,5.59 8.12,5.92 7.63,6.29L5.24,5.33c-0.22,-0.08 -0.47,0 -0.59,0.22L2.74,8.87C2.62,9.08 2.66,9.34 2.86,9.48l2.03,1.58C4.84,11.36 4.8,11.69 4.8,12s0.02,0.64 0.07,0.94l-2.03,1.58c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.12,0.22 0.37,0.29 0.59,0.22l2.39,-0.96c0.5,0.38 1.03,0.7 1.62,0.94l0.36,2.54c0.05,0.24 0.24,0.41 0.48,0.41h3.84c0.24,0 0.44,-0.17 0.47,-0.41l0.36,-2.54c0.59,-0.24 1.13,-0.56 1.62,-0.94l2.39,0.96c0.22,0.08 0.47,0 0.59,-0.22l1.92,-3.32c0.12,-0.22 0.07,-0.47 -0.12,-0.61L19.14,12.94zM12,15.6c-1.98,0 -3.6,-1.62 -3.6,-3.6s1.62,-3.6 3.6,-3.6s3.6,1.62 3.6,3.6S13.98,15.6 12,15.6z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>