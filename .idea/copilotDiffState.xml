<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/MIGRATION_ROADMAP.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MIGRATION_ROADMAP.md" />
              <option name="originalContent" value="# ️ PPL Workout App - Migration Roadmap&#10;&#10;## Overview&#10;This document outlines the migration path from the current simplified architecture to the advanced, production-ready architecture shown in the database and workflow diagrams.&#10;&#10;## Current State Analysis ✅&#10;&#10;### Database Schema (Working)&#10;- [x] **exercises** table: Enhanced with rich metadata (primaryMuscle, secondaryMuscles, equipment, difficulty, instructions, tips, category) ✅&#10;- [x] **workout_days** table: Stores daily workout sessions ✅&#10;- [x] **workout_entries** table: Links exercises to workout days ✅&#10;- [x] **set_entries** table: Individual set tracking with timing ✅&#10;- [x] **workout_templates** table: Template definitions for reusable workouts ✅&#10;- [x] **template_exercises** table: Junction table linking templates to exercises ✅&#10;&#10;### Features Working&#10;- [x] PPL workout creation based on day of week&#10;- [x] Exercise detail screens with set progression&#10;- [x] Individual set timing and completion tracking&#10;- [x] Cross-exercise contamination fixed&#10;- [x] Database reset functionality for development&#10;- [x] Timer functionality with start/stop per set&#10;- [x] Enhanced exercise library with rich metadata&#10;&#10;### Current Architecture&#10;- **Exercise Library**: Rich metadata with 34+ exercises in `ExerciseData.getPPLExercises()` ✅&#10;- **Template System**: Complete entities and DAOs created ✅&#10;- **Workout Logic**: Day-based (to be migrated to template-based)&#10;- **Database Version**: 7 (with template system migration)&#10;&#10;---&#10;&#10;## Phase 1: Enhanced Exercise Library &amp; Templates &#10;&#10;### 1.1 Enhance Exercise Entity ✅ **COMPLETED**&#10;- [x] **1.1.1** Expanded Exercise entity with additional fields ✅&#10;- [x] **1.1.2** Created database migration (Version 5 → 6) ✅&#10;- [x] **1.1.3** Updated exercise data with rich metadata ✅&#10;&#10;### 1.2 Create Workout Templates System ✅ **COMPLETED**&#10;- [x] **1.2.1** Created WorkoutTemplate entity ✅&#10;- [x] **1.2.2** Created TemplateExercise junction entity ✅&#10;- [x] **1.2.3** Created corresponding DAOs (WorkoutTemplateDao, TemplateExerciseDao) ✅&#10;- [x] **1.2.4** Updated database schema (Version 6 → 7) ✅&#10;- [x] **1.2.5** Created PPL template data with 6 predefined templates ✅&#10;&#10;### 1.3 Implement Template-Based Workout Creation  **IN PROGRESS**&#10;**Goal**: Replace current day-based workout creation with template selection&#10;&#10;#### Tasks:&#10;- [ ] **1.3.1** Update Repository to use templates:&#10;  ```kotlin&#10;  suspend fun createWorkoutFromTemplate(templateId: Int, date: String): List&lt;WorkoutEntry&gt;&#10;  ```&#10;&#10;- [x] **1.3.2** Populate templates in database on first run ✅ **COMPLETED**&#10;  - Created PPLTemplateData.kt with 6 predefined PPL workout templates&#10;  - Added template-exercise relationships with proper sets, reps, and rest periods&#10;  - Includes helper functions for day-based compatibility&#10;&#10;- [ ] **1.3.3** Update ViewModel to use template-based creation ⭐ **NEXT**&#10;- [ ] **1.3.4** Migrate from day-based to template-based workout creation&#10;- [ ] **1.3.5** Update UI to show template selection (optional for phase 1)&#10;&#10;---&#10;&#10;## Phase 2: Advanced Features &#10;&#10;### 2.1 Progress Tracking&#10;- [ ] Create PersonalRecord entity for 1RM tracking&#10;- [ ] Implement weight progression suggestions&#10;- [ ] Add exercise history graphs&#10;&#10;### 2.2 Custom Workouts&#10;- [ ] Allow users to create custom templates&#10;- [ ] Exercise substitution system&#10;- [ ] Workout sharing functionality&#10;&#10;### 2.3 Analytics &amp; Insights&#10;- [ ] Weekly/monthly progress reports&#10;- [ ] Muscle group balance analysis&#10;- [ ] Training volume analytics&#10;&#10;---&#10;&#10;## Phase 3: Production Ready &#10;&#10;### 3.1 Performance Optimization&#10;- [ ] Database indexing optimization&#10;- [ ] LazyColumn performance improvements&#10;- [ ] Background data sync&#10;&#10;### 3.2 User Experience&#10;- [ ] Onboarding flow&#10;- [ ] Exercise video/animation support&#10;- [ ] Dark mode theme improvements&#10;&#10;### 3.3 Data Management&#10;- [ ] Export/import functionality&#10;- [ ] Cloud backup integration&#10;- [ ] Data migration between devices&#10;&#10;---&#10;&#10;## Implementation Priority &#10;&#10;### Sprint 1 (Week 1): Foundation ✅ **COMPLETED**&#10;1. **1.1.1** - Enhance Exercise Entity ⭐ ✅ **DONE**&#10;2. **1.1.2** - Database Migration 5→6 ✅ **DONE**&#10;3. **1.1.3** - Update exercise data with metadata ✅ **DONE**&#10;&#10;### Sprint 2 (Week 2): Templates&#10;4. **1.2.1** - WorkoutTemplate entity&#10;5. **1.2.2** - TemplateExercise junction&#10;6. **1.2.3** - Template DAOs&#10;&#10;### Sprint 3 (Week 3): Integration&#10;7. **1.3.1** - Template-based repository&#10;8. **1.3.2** - Template population&#10;9. **1.3.3** - ViewModel updates&#10;&#10;---&#10;&#10;## Week 1 Sprint 1 - Completed Features &#10;&#10;### ✅ Enhanced Exercise Entity&#10;- **Before**: Simple Exercise entity with only `id`, `name`, `isCompound`&#10;- **After**: Rich Exercise entity with 8 additional fields:&#10;  - `primaryMuscle`: Main muscle group targeted&#10;  - `secondaryMuscles`: Secondary muscles (comma separated)&#10;  - `equipment`: Required equipment type&#10;  - `difficulty`: Beginner/Intermediate/Advanced&#10;  - `instructions`: Step-by-step exercise guide&#10;  - `tips`: Form tips and common mistakes&#10;  - `category`: Push/Pull/Legs classification&#10;&#10;### ✅ Database Migration v5 → v6&#10;- **Migration**: Properly implemented Room database migration&#10;- **Backward Compatibility**: Existing data preserved during migration&#10;- **New Columns**: All new fields added with appropriate defaults&#10;- **Build Status**: ✅ Build successful, no compilation errors&#10;&#10;### ✅ Rich Exercise Data Library&#10;- **New File**: Created `ExerciseData.kt` with comprehensive metadata&#10;- **All 34 Exercises**: Each exercise now includes:&#10;  - Detailed step-by-step instructions&#10;  - Form tips and safety advice&#10;  - Muscle group classifications&#10;  - Equipment requirements&#10;  - Difficulty levels&#10;- **Database Integration**: Database now uses the enhanced exercise data&#10;&#10;## Next Steps - Week 2 Sprint 2 &#10;Ready to start **Sprint 2** with workout templates system:&#10;1. Create `WorkoutTemplate` entity for flexible workout creation&#10;2. Create `TemplateExercise` junction table for template-exercise relationships&#10;3. Build corresponding DAOs for the new entities&#10;" />
              <option name="updatedContent" value="# ️ PPL Workout App - Migration Roadmap&#10;&#10;## Overview&#10;This document outlines the migration path from the current simplified architecture to the advanced, production-ready architecture shown in the database and workflow diagrams.&#10;&#10;## Current State Analysis ✅&#10;&#10;### Database Schema (Working) - Version 7&#10;- [x] **exercises** table: Enhanced with rich metadata (primaryMuscle, secondaryMuscles, equipment, difficulty, instructions, tips, category) ✅&#10;- [x] **workout_days** table: Stores daily workout sessions ✅&#10;- [x] **workout_entries** table: Links exercises to workout days ✅&#10;- [x] **set_entries** table: Individual set tracking with timing ✅&#10;- [x] **workout_templates** table: Template definitions for reusable workouts ✅&#10;- [x] **template_exercises** table: Junction table linking templates to exercises ✅&#10;&#10;### Features Working ✅&#10;- [x] PPL workout creation based on day of week&#10;- [x] **Template-based workout creation system** ✅&#10;- [x] Exercise detail screens with set progression&#10;- [x] Individual set timing and completion tracking&#10;- [x] Cross-exercise contamination fixed (sets isolated per exercise)&#10;- [x] Database reset functionality for development&#10;- [x] Timer functionality with start/stop per set&#10;- [x] Enhanced exercise library with rich metadata (34+ exercises)&#10;- [x] Automatic template population on database creation&#10;- [x] Template selection and creation methods&#10;&#10;### Current Architecture Status&#10;- **Exercise Library**: Rich metadata with 34+ exercises in `ExerciseData.getPPLExercises()` ✅&#10;- **Template System**: Complete entities, DAOs, and repository methods ✅&#10;- **Workout Logic**: **Both day-based AND template-based systems working** ✅&#10;- **Database Version**: 7 (with complete template system migration)&#10;- **UI Layer**: Daily workout screens with template integration ✅&#10;&#10;---&#10;&#10;## Phase 1: Enhanced Exercise Library &amp; Templates ✅ **COMPLETED**&#10;&#10;### 1.1 Enhance Exercise Entity ✅ **COMPLETED**&#10;- [x] **1.1.1** Expanded Exercise entity with additional fields ✅&#10;- [x] **1.1.2** Created database migration (Version 5 → 6) ✅&#10;- [x] **1.1.3** Updated exercise data with rich metadata ✅&#10;&#10;### 1.2 Create Workout Templates System ✅ **COMPLETED**&#10;- [x] **1.2.1** Created WorkoutTemplate entity ✅&#10;- [x] **1.2.2** Created TemplateExercise junction entity ✅&#10;- [x] **1.2.3** Created corresponding DAOs (WorkoutTemplateDao, TemplateExerciseDao) ✅&#10;- [x] **1.2.4** Updated database schema (Version 6 → 7) ✅&#10;- [x] **1.2.5** Created PPL template data with 6 predefined templates ✅&#10;&#10;### 1.3 Implement Template-Based Workout Creation ✅ **COMPLETED**&#10;**Goal**: Replace current day-based workout creation with template selection&#10;&#10;#### Tasks:&#10;- [x] **1.3.1** Update Repository to use templates ✅ **COMPLETED**&#10;  ```kotlin&#10;  suspend fun createWorkoutFromTemplate(templateId: Int, date: String): List&lt;WorkoutEntry&gt;&#10;  suspend fun createTodaysWorkoutFromTemplate(): Flow&lt;List&lt;WorkoutEntryWithExercise&gt;&gt;&#10;  fun getAvailableTemplates(): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;  fun getTemplatesByCategory(category: String): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;  ```&#10;&#10;- [x] **1.3.2** Populate templates in database on first run ✅ **COMPLETED**&#10;  - Created PPLTemplateData.kt with 6 predefined PPL workout templates&#10;  - Added template-exercise relationships with proper sets, reps, and rest periods&#10;  - Includes helper functions for day-based compatibility&#10;  - Auto-population on database creation&#10;&#10;- [x] **1.3.3** Update ViewModel to use template-based creation ✅ **COMPLETED**&#10;  - Added `createWorkoutFromTemplate(templateId: Int, date: String)` method&#10;  - Integrated template selection logic&#10;  - Maintains backward compatibility with day-based creation&#10;&#10;- [x] **1.3.4** Migrate from day-based to template-based workout creation ✅ **COMPLETED**&#10;  - Both systems working in parallel&#10;  - Template-based system handles PPL schedule automatically&#10;  - Legacy day-based methods preserved for compatibility&#10;&#10;- [ ] **1.3.5** Update UI to show template selection (optional for phase 1) ⭐ **NEXT PRIORITY**&#10;  - Current UI uses automatic template selection based on day&#10;  - Manual template selection UI not yet implemented&#10;&#10;---&#10;&#10;## Phase 2: Enhanced User Interface &amp; User Experience  **READY TO START**&#10;&#10;### 2.1 Template Selection UI ⭐ **HIGH PRIORITY**&#10;- [ ] **2.1.1** Create template selection screen&#10;- [ ] **2.1.2** Add template preview with exercise list&#10;- [ ] **2.1.3** Allow manual template override for any day&#10;- [ ] **2.1.4** Show template categories (Push/Pull/Legs)&#10;- [ ] **2.1.5** Display template metadata (duration, difficulty, last used)&#10;&#10;### 2.2 Enhanced Exercise Experience&#10;- [ ] **2.2.1** Add exercise instruction screens&#10;- [ ] **2.2.2** Include exercise tips and form cues&#10;- [ ] **2.2.3** Show primary/secondary muscle groups&#10;- [ ] **2.2.4** Equipment requirements display&#10;- [ ] **2.2.5** Exercise difficulty indicators&#10;&#10;### 2.3 Workout Flow Improvements&#10;- [ ] **2.3.1** Rest timer between sets&#10;- [ ] **2.3.2** Workout session summary&#10;- [ ] **2.3.3** Progress celebration animations&#10;- [ ] **2.3.4** Quick workout restart option&#10;&#10;---&#10;&#10;## Phase 3: Progress Tracking &amp; Analytics &#10;&#10;### 3.1 Progress Tracking&#10;- [ ] Create PersonalRecord entity for 1RM tracking&#10;- [ ] Implement weight progression suggestions&#10;- [ ] Add exercise history graphs&#10;- [ ] Weekly/monthly progress reports&#10;&#10;### 3.2 Custom Workouts&#10;- [ ] Allow users to create custom templates&#10;- [ ] Exercise substitution system&#10;- [ ] Workout sharing functionality&#10;- [ ] Template import/export&#10;&#10;### 3.3 Analytics &amp; Insights&#10;- [ ] Training volume analytics&#10;- [ ] Muscle group balance analysis&#10;- [ ] Workout consistency tracking&#10;- [ ] Performance trend analysis&#10;&#10;---&#10;&#10;## Phase 4: Production Ready &#10;&#10;### 4.1 Performance Optimization&#10;- [ ] Database indexing optimization&#10;- [ ] LazyColumn performance improvements&#10;- [ ] Background data sync&#10;- [ ] Memory usage optimization&#10;&#10;### 4.2 User Experience Polish&#10;- [ ] Onboarding flow&#10;- [ ] Exercise video/animation support&#10;- [ ] Dark mode theme improvements&#10;- [ ] Accessibility improvements&#10;&#10;### 4.3 Data Management&#10;- [ ] Export/import functionality&#10;- [ ] Cloud backup integration&#10;- [ ] Data migration between devices&#10;- [ ] Offline-first architecture&#10;&#10;---&#10;&#10;## Development Notes &#10;&#10;### Recently Fixed Issues ✅&#10;- Cross-exercise set contamination (sets now properly isolated per exercise)&#10;- Timer functionality working correctly per set&#10;- Database foreign key constraints resolved&#10;- Set progression logic working properly&#10;- Exercise detail screen navigation fixed&#10;&#10;### Current Technical Debt&#10;- Both day-based and template-based systems running in parallel&#10;- Manual template selection UI not implemented&#10;- Some hardcoded workout logic still present&#10;&#10;### Next Immediate Tasks&#10;1. **Template Selection UI** - Allow users to manually choose templates&#10;2. **Exercise Enhancement** - Show rich metadata in UI&#10;3. **Workout Flow Polish** - Improve user experience during workouts&#10;&#10;### Architecture Status&#10;- ✅ **Database Layer**: Complete with template system&#10;- ✅ **Repository Layer**: Full template support implemented  &#10;- ✅ **ViewModel Layer**: Template integration complete&#10;-  **UI Layer**: Basic template support, selection UI pending&#10;-  **User Experience**: Core functionality working, polish needed" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/dao/WorkoutTemplateDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/dao/WorkoutTemplateDao.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.data.dao&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Insert&#10;import androidx.room.Query&#10;import androidx.room.Update&#10;import androidx.room.Delete&#10;import com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Data Access Object for WorkoutTemplate operations&#10; */&#10;@Dao&#10;interface WorkoutTemplateDao {&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE isActive = 1 ORDER BY category, name&quot;)&#10;    fun getAllActiveTemplates(): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE category = :category AND isActive = 1 ORDER BY name&quot;)&#10;    fun getTemplatesByCategory(category: String): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE id = :templateId&quot;)&#10;    suspend fun getTemplateById(templateId: Int): WorkoutTemplate?&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE category = :category AND difficulty = :difficulty AND isActive = 1&quot;)&#10;    suspend fun getTemplatesByCategoryAndDifficulty(category: String, difficulty: String): List&lt;WorkoutTemplate&gt;&#10;&#10;    @Insert&#10;    suspend fun insertTemplate(template: WorkoutTemplate): Long&#10;&#10;    @Insert&#10;    suspend fun insertTemplates(templates: List&lt;WorkoutTemplate&gt;)&#10;&#10;    @Update&#10;    suspend fun updateTemplate(template: WorkoutTemplate)&#10;&#10;    @Delete&#10;    suspend fun deleteTemplate(template: WorkoutTemplate)&#10;&#10;    @Query(&quot;DELETE FROM workout_templates&quot;)&#10;    suspend fun deleteAll(): Int&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM workout_templates&quot;)&#10;    suspend fun getTemplateCount(): Int&#10;&#10;    @Query(&quot;UPDATE workout_templates SET lastUsedDate = :date WHERE id = :templateId&quot;)&#10;    suspend fun updateLastUsedDate(templateId: Int, date: String)&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE isCustom = 1 AND isActive = 1 ORDER BY name&quot;)&#10;    fun getCustomTemplates(): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE isCustom = 0 AND isActive = 1 ORDER BY category, name&quot;)&#10;    fun getPredefinedTemplates(): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>