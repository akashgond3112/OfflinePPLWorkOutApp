<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/MIGRATION_ROADMAP.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MIGRATION_ROADMAP.md" />
              <option name="originalContent" value="# ️ PPL Workout App - Migration Roadmap&#10;&#10;## Overview&#10;This document outlines the migration path from the current simplified architecture to the advanced, production-ready architecture shown in the database and workflow diagrams.&#10;&#10;## Current State Analysis ✅&#10;&#10;### Database Schema (Working)&#10;- [x] **exercises** table: Enhanced with rich metadata (primaryMuscle, secondaryMuscles, equipment, difficulty, instructions, tips, category) ✅&#10;- [x] **workout_days** table: Stores daily workout sessions ✅&#10;- [x] **workout_entries** table: Links exercises to workout days ✅&#10;- [x] **set_entries** table: Individual set tracking with timing ✅&#10;- [x] **workout_templates** table: Template definitions for reusable workouts ✅&#10;- [x] **template_exercises** table: Junction table linking templates to exercises ✅&#10;&#10;### Features Working&#10;- [x] PPL workout creation based on day of week&#10;- [x] Exercise detail screens with set progression&#10;- [x] Individual set timing and completion tracking&#10;- [x] Cross-exercise contamination fixed&#10;- [x] Database reset functionality for development&#10;- [x] Timer functionality with start/stop per set&#10;- [x] Enhanced exercise library with rich metadata&#10;&#10;### Current Architecture&#10;- **Exercise Library**: Rich metadata with 34+ exercises in `ExerciseData.getPPLExercises()` ✅&#10;- **Template System**: Complete entities and DAOs created ✅&#10;- **Workout Logic**: Day-based (to be migrated to template-based)&#10;- **Database Version**: 7 (with template system migration)&#10;&#10;---&#10;&#10;## Phase 1: Enhanced Exercise Library &amp; Templates &#10;&#10;### 1.1 Enhance Exercise Entity ✅ **COMPLETED**&#10;- [x] **1.1.1** Expanded Exercise entity with additional fields ✅&#10;- [x] **1.1.2** Created database migration (Version 5 → 6) ✅&#10;- [x] **1.1.3** Updated exercise data with rich metadata ✅&#10;&#10;### 1.2 Create Workout Templates System ✅ **COMPLETED**&#10;- [x] **1.2.1** Created WorkoutTemplate entity ✅&#10;- [x] **1.2.2** Created TemplateExercise junction entity ✅&#10;- [x] **1.2.3** Created corresponding DAOs (WorkoutTemplateDao, TemplateExerciseDao) ✅&#10;- [x] **1.2.4** Updated database schema (Version 6 → 7) ✅&#10;- [x] **1.2.5** Created PPL template data with 6 predefined templates ✅&#10;&#10;### 1.3 Implement Template-Based Workout Creation  **IN PROGRESS**&#10;**Goal**: Replace current day-based workout creation with template selection&#10;&#10;#### Tasks:&#10;- [ ] **1.3.1** Update Repository to use templates:&#10;  ```kotlin&#10;  suspend fun createWorkoutFromTemplate(templateId: Int, date: String): List&lt;WorkoutEntry&gt;&#10;  ```&#10;&#10;- [ ] **1.3.2** Populate templates in database on first run ⭐ **NEXT**&#10;- [ ] **1.3.3** Update ViewModel to use template-based creation&#10;- [ ] **1.3.4** Migrate from day-based to template-based workout creation&#10;- [ ] **1.3.5** Update UI to show template selection (optional for phase 1)&#10;&#10;---&#10;&#10;## Phase 2: Advanced Features &#10;&#10;### 2.1 Progress Tracking&#10;- [ ] Create PersonalRecord entity for 1RM tracking&#10;- [ ] Implement weight progression suggestions&#10;- [ ] Add exercise history graphs&#10;&#10;### 2.2 Custom Workouts&#10;- [ ] Allow users to create custom templates&#10;- [ ] Exercise substitution system&#10;- [ ] Workout sharing functionality&#10;&#10;### 2.3 Analytics &amp; Insights&#10;- [ ] Weekly/monthly progress reports&#10;- [ ] Muscle group balance analysis&#10;- [ ] Training volume analytics&#10;&#10;---&#10;&#10;## Phase 3: Production Ready &#10;&#10;### 3.1 Performance Optimization&#10;- [ ] Database indexing optimization&#10;- [ ] LazyColumn performance improvements&#10;- [ ] Background data sync&#10;&#10;### 3.2 User Experience&#10;- [ ] Onboarding flow&#10;- [ ] Exercise video/animation support&#10;- [ ] Dark mode theme improvements&#10;&#10;### 3.3 Data Management&#10;- [ ] Export/import functionality&#10;- [ ] Cloud backup integration&#10;- [ ] Data migration between devices&#10;&#10;---&#10;&#10;## Implementation Priority &#10;&#10;### Sprint 1 (Week 1): Foundation ✅ **COMPLETED**&#10;1. **1.1.1** - Enhance Exercise Entity ⭐ ✅ **DONE**&#10;2. **1.1.2** - Database Migration 5→6 ✅ **DONE**&#10;3. **1.1.3** - Update exercise data with metadata ✅ **DONE**&#10;&#10;### Sprint 2 (Week 2): Templates&#10;4. **1.2.1** - WorkoutTemplate entity&#10;5. **1.2.2** - TemplateExercise junction&#10;6. **1.2.3** - Template DAOs&#10;&#10;### Sprint 3 (Week 3): Integration&#10;7. **1.3.1** - Template-based repository&#10;8. **1.3.2** - Template population&#10;9. **1.3.3** - ViewModel updates&#10;&#10;---&#10;&#10;## Week 1 Sprint 1 - Completed Features &#10;&#10;### ✅ Enhanced Exercise Entity&#10;- **Before**: Simple Exercise entity with only `id`, `name`, `isCompound`&#10;- **After**: Rich Exercise entity with 8 additional fields:&#10;  - `primaryMuscle`: Main muscle group targeted&#10;  - `secondaryMuscles`: Secondary muscles (comma separated)&#10;  - `equipment`: Required equipment type&#10;  - `difficulty`: Beginner/Intermediate/Advanced&#10;  - `instructions`: Step-by-step exercise guide&#10;  - `tips`: Form tips and common mistakes&#10;  - `category`: Push/Pull/Legs classification&#10;&#10;### ✅ Database Migration v5 → v6&#10;- **Migration**: Properly implemented Room database migration&#10;- **Backward Compatibility**: Existing data preserved during migration&#10;- **New Columns**: All new fields added with appropriate defaults&#10;- **Build Status**: ✅ Build successful, no compilation errors&#10;&#10;### ✅ Rich Exercise Data Library&#10;- **New File**: Created `ExerciseData.kt` with comprehensive metadata&#10;- **All 34 Exercises**: Each exercise now includes:&#10;  - Detailed step-by-step instructions&#10;  - Form tips and safety advice&#10;  - Muscle group classifications&#10;  - Equipment requirements&#10;  - Difficulty levels&#10;- **Database Integration**: Database now uses the enhanced exercise data&#10;&#10;## Next Steps - Week 2 Sprint 2 &#10;Ready to start **Sprint 2** with workout templates system:&#10;1. Create `WorkoutTemplate` entity for flexible workout creation&#10;2. Create `TemplateExercise` junction table for template-exercise relationships&#10;3. Build corresponding DAOs for the new entities&#10;" />
              <option name="updatedContent" value="# ️ PPL Workout App - Migration Roadmap&#10;&#10;## Overview&#10;This document outlines the migration path from the current simplified architecture to the advanced, production-ready architecture shown in the database and workflow diagrams.&#10;&#10;## Current State Analysis ✅&#10;&#10;### Database Schema (Working)&#10;- [x] **exercises** table: Enhanced with rich metadata (primaryMuscle, secondaryMuscles, equipment, difficulty, instructions, tips, category) ✅&#10;- [x] **workout_days** table: Stores daily workout sessions ✅&#10;- [x] **workout_entries** table: Links exercises to workout days ✅&#10;- [x] **set_entries** table: Individual set tracking with timing ✅&#10;- [x] **workout_templates** table: Template definitions for reusable workouts ✅&#10;- [x] **template_exercises** table: Junction table linking templates to exercises ✅&#10;&#10;### Features Working&#10;- [x] PPL workout creation based on day of week&#10;- [x] Exercise detail screens with set progression&#10;- [x] Individual set timing and completion tracking&#10;- [x] Cross-exercise contamination fixed&#10;- [x] Database reset functionality for development&#10;- [x] Timer functionality with start/stop per set&#10;- [x] Enhanced exercise library with rich metadata&#10;&#10;### Current Architecture&#10;- **Exercise Library**: Rich metadata with 34+ exercises in `ExerciseData.getPPLExercises()` ✅&#10;- **Template System**: Complete entities and DAOs created ✅&#10;- **Workout Logic**: Day-based (to be migrated to template-based)&#10;- **Database Version**: 7 (with template system migration)&#10;&#10;---&#10;&#10;## Phase 1: Enhanced Exercise Library &amp; Templates &#10;&#10;### 1.1 Enhance Exercise Entity ✅ **COMPLETED**&#10;- [x] **1.1.1** Expanded Exercise entity with additional fields ✅&#10;- [x] **1.1.2** Created database migration (Version 5 → 6) ✅&#10;- [x] **1.1.3** Updated exercise data with rich metadata ✅&#10;&#10;### 1.2 Create Workout Templates System ✅ **COMPLETED**&#10;- [x] **1.2.1** Created WorkoutTemplate entity ✅&#10;- [x] **1.2.2** Created TemplateExercise junction entity ✅&#10;- [x] **1.2.3** Created corresponding DAOs (WorkoutTemplateDao, TemplateExerciseDao) ✅&#10;- [x] **1.2.4** Updated database schema (Version 6 → 7) ✅&#10;- [x] **1.2.5** Created PPL template data with 6 predefined templates ✅&#10;&#10;### 1.3 Implement Template-Based Workout Creation  **IN PROGRESS**&#10;**Goal**: Replace current day-based workout creation with template selection&#10;&#10;#### Tasks:&#10;- [ ] **1.3.1** Update Repository to use templates:&#10;  ```kotlin&#10;  suspend fun createWorkoutFromTemplate(templateId: Int, date: String): List&lt;WorkoutEntry&gt;&#10;  ```&#10;&#10;- [x] **1.3.2** Populate templates in database on first run ✅ **COMPLETED**&#10;  - Created PPLTemplateData.kt with 6 predefined PPL workout templates&#10;  - Added template-exercise relationships with proper sets, reps, and rest periods&#10;  - Includes helper functions for day-based compatibility&#10;&#10;- [ ] **1.3.3** Update ViewModel to use template-based creation ⭐ **NEXT**&#10;- [ ] **1.3.4** Migrate from day-based to template-based workout creation&#10;- [ ] **1.3.5** Update UI to show template selection (optional for phase 1)&#10;&#10;---&#10;&#10;## Phase 2: Advanced Features &#10;&#10;### 2.1 Progress Tracking&#10;- [ ] Create PersonalRecord entity for 1RM tracking&#10;- [ ] Implement weight progression suggestions&#10;- [ ] Add exercise history graphs&#10;&#10;### 2.2 Custom Workouts&#10;- [ ] Allow users to create custom templates&#10;- [ ] Exercise substitution system&#10;- [ ] Workout sharing functionality&#10;&#10;### 2.3 Analytics &amp; Insights&#10;- [ ] Weekly/monthly progress reports&#10;- [ ] Muscle group balance analysis&#10;- [ ] Training volume analytics&#10;&#10;---&#10;&#10;## Phase 3: Production Ready &#10;&#10;### 3.1 Performance Optimization&#10;- [ ] Database indexing optimization&#10;- [ ] LazyColumn performance improvements&#10;- [ ] Background data sync&#10;&#10;### 3.2 User Experience&#10;- [ ] Onboarding flow&#10;- [ ] Exercise video/animation support&#10;- [ ] Dark mode theme improvements&#10;&#10;### 3.3 Data Management&#10;- [ ] Export/import functionality&#10;- [ ] Cloud backup integration&#10;- [ ] Data migration between devices&#10;&#10;---&#10;&#10;## Implementation Priority &#10;&#10;### Sprint 1 (Week 1): Foundation ✅ **COMPLETED**&#10;1. **1.1.1** - Enhance Exercise Entity ⭐ ✅ **DONE**&#10;2. **1.1.2** - Database Migration 5→6 ✅ **DONE**&#10;3. **1.1.3** - Update exercise data with metadata ✅ **DONE**&#10;&#10;### Sprint 2 (Week 2): Templates&#10;4. **1.2.1** - WorkoutTemplate entity&#10;5. **1.2.2** - TemplateExercise junction&#10;6. **1.2.3** - Template DAOs&#10;&#10;### Sprint 3 (Week 3): Integration&#10;7. **1.3.1** - Template-based repository&#10;8. **1.3.2** - Template population&#10;9. **1.3.3** - ViewModel updates&#10;&#10;---&#10;&#10;## Week 1 Sprint 1 - Completed Features &#10;&#10;### ✅ Enhanced Exercise Entity&#10;- **Before**: Simple Exercise entity with only `id`, `name`, `isCompound`&#10;- **After**: Rich Exercise entity with 8 additional fields:&#10;  - `primaryMuscle`: Main muscle group targeted&#10;  - `secondaryMuscles`: Secondary muscles (comma separated)&#10;  - `equipment`: Required equipment type&#10;  - `difficulty`: Beginner/Intermediate/Advanced&#10;  - `instructions`: Step-by-step exercise guide&#10;  - `tips`: Form tips and common mistakes&#10;  - `category`: Push/Pull/Legs classification&#10;&#10;### ✅ Database Migration v5 → v6&#10;- **Migration**: Properly implemented Room database migration&#10;- **Backward Compatibility**: Existing data preserved during migration&#10;- **New Columns**: All new fields added with appropriate defaults&#10;- **Build Status**: ✅ Build successful, no compilation errors&#10;&#10;### ✅ Rich Exercise Data Library&#10;- **New File**: Created `ExerciseData.kt` with comprehensive metadata&#10;- **All 34 Exercises**: Each exercise now includes:&#10;  - Detailed step-by-step instructions&#10;  - Form tips and safety advice&#10;  - Muscle group classifications&#10;  - Equipment requirements&#10;  - Difficulty levels&#10;- **Database Integration**: Database now uses the enhanced exercise data&#10;&#10;## Next Steps - Week 2 Sprint 2 &#10;Ready to start **Sprint 2** with workout templates system:&#10;1. Create `WorkoutTemplate` entity for flexible workout creation&#10;2. Create `TemplateExercise` junction table for template-exercise relationships&#10;3. Build corresponding DAOs for the new entities" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/MainActivity.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.database.PPLWorkoutDatabase&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.screens.ExerciseDetailScreen&#10;import com.example.offlinepplworkoutapp.ui.theme.OfflinePPLWorkOutAppTheme&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModel&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModelFactory&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;private const val IS_DEBUG_MODE = true&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private lateinit var database: PPLWorkoutDatabase&#10;    private lateinit var repository: WorkoutRepository&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Initialize database and repository&#10;        database = PPLWorkoutDatabase.getDatabase(this)&#10;        repository = WorkoutRepository(&#10;            workoutDayDao = database.workoutDayDao(),&#10;            workoutEntryDao = database.workoutEntryDao(),&#10;            setEntryDao = database.setEntryDao()&#10;        )&#10;&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            OfflinePPLWorkOutAppTheme {&#10;                MainScreen(repository = repository)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainScreen(&#10;    repository: WorkoutRepository&#10;) {&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;    val viewModel: DailyWorkoutViewModel = viewModel(&#10;        factory = DailyWorkoutViewModelFactory(repository)&#10;    )&#10;&#10;    var showDebugMenu by remember { mutableStateOf(false) }&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;    var showResetConfirmation by remember { mutableStateOf(false) }&#10;    val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Add reset confirmation dialog&#10;    if (showResetConfirmation) {&#10;        AlertDialog(&#10;            onDismissRequest = { showResetConfirmation = false },&#10;            title = {&#10;                Text(&#10;                    text = &quot;⚠️ Reset Workout Progress&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;This will clear all your workout progress and history, but keep your exercise library intact.\n\nThis action cannot be undone. Are you sure you want to continue?&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        // Use coroutineScope.launch to call the suspend function properly&#10;                        coroutineScope.launch {&#10;                            println(&quot; UI: Starting reset process...&quot;)&#10;&#10;                            // Verify what's in database before reset&#10;                            val beforeReset = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                            println(&quot; BEFORE RESET: ${beforeReset.first} days, ${beforeReset.second} entries, ${beforeReset.third} sets&quot;)&#10;&#10;                            // Use the more aggressive reset that forces database recreation&#10;                            PPLWorkoutDatabase.forceResetDatabase(context)&#10;&#10;                            // Wait a moment for database operations to complete&#10;                            kotlinx.coroutines.delay(500)&#10;&#10;                            // Verify database is actually empty after reset&#10;                            val afterReset = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                            println(&quot; AFTER RESET: ${afterReset.first} days, ${afterReset.second} entries, ${afterReset.third} sets&quot;)&#10;&#10;                            // Force complete refresh of the ViewModel data&#10;                            println(&quot; UI: Forcing ViewModel refresh...&quot;)&#10;                            viewModel.forceCompleteRefresh()&#10;&#10;                            // Close dialogs&#10;                            showResetConfirmation = false&#10;                            showDebugMenu = false&#10;&#10;                            println(&quot;✅ UI: Reset process complete!&quot;)&#10;                        }&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Text(&quot;Reset All Progress&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                OutlinedButton(onClick = { showResetConfirmation = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        floatingActionButton = {&#10;            // Only show debug FAB in debug builds when not in exercise detail&#10;            if (IS_DEBUG_MODE &amp;&amp; selectedExercise == null) {&#10;                FloatingActionButton(&#10;                    onClick = { showDebugMenu = true },&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Debug Day Selector&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        if (selectedExercise != null) {&#10;            // Show Exercise Detail Screen&#10;            ExerciseDetailScreen(&#10;                workoutEntry = selectedExercise!!,&#10;                repository = repository,&#10;                onBackClick = { selectedExercise = null },&#10;                onSaveChanges = { sets, reps, isCompleted -&gt;&#10;                    viewModel.updateExercise(selectedExercise!!.id, sets, reps, isCompleted)&#10;                }&#10;            )&#10;        } else {&#10;            // Show Daily Workout Screen&#10;            DailyWorkoutScreen(&#10;                viewModel = viewModel,&#10;                repository = repository,&#10;                onExerciseClick = { exercise -&gt; selectedExercise = exercise },&#10;                modifier = Modifier.padding(innerPadding)&#10;            )&#10;        }&#10;&#10;        // Debug day selector dialog&#10;        if (showDebugMenu &amp;&amp; IS_DEBUG_MODE) {&#10;            DebugDaySelector(&#10;                onDaySelected = { dayOfWeek -&gt;&#10;                    val calendar = Calendar.getInstance().apply {&#10;                        set(Calendar.DAY_OF_WEEK, dayOfWeek)&#10;                    }&#10;                    val debugDate = dateFormat.format(calendar.time)&#10;                    viewModel.setDebugDate(debugDate)&#10;                    showDebugMenu = false&#10;                },&#10;                onDismiss = { showDebugMenu = false },&#10;                onResetToToday = {&#10;                    viewModel.setDebugDate(null)&#10;                    showDebugMenu = false&#10;                },&#10;                onResetDatabase = {&#10;                    // Show confirmation dialog before resetting the database&#10;                    showResetConfirmation = true&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DailyWorkoutScreen(&#10;    viewModel: DailyWorkoutViewModel,&#10;    repository: WorkoutRepository,&#10;    modifier: Modifier = Modifier,&#10;    onExerciseClick: (WorkoutEntryWithExercise) -&gt; Unit = {}&#10;) {&#10;&#10;    val todaysWorkout by viewModel.todaysWorkout.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val completionProgress by viewModel.completionProgress.collectAsState()&#10;    val timerSeconds by viewModel.timerSeconds.collectAsState()&#10;    val isTimerRunning by viewModel.isTimerRunning.collectAsState()&#10;&#10;    var showResetWarning by remember { mutableStateOf(false) }&#10;    var exerciseToReset by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header with day, workout type, and timer&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.Top&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;${viewModel.getCurrentDayName()}'s Workout&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = viewModel.getWorkoutTypeName(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Timer Display in top-right corner&#10;            if (isTimerRunning) {&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    ),&#10;                    modifier = Modifier.padding(start = 16.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(12.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.PlayArrow,&#10;                            contentDescription = &quot;Timer&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(20.dp)&#10;                        )&#10;                        Text(&#10;                            text = viewModel.formatTime(timerSeconds),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Progress indicator for non-rest days&#10;        if (todaysWorkout.isNotEmpty()) {&#10;            WorkoutProgressIndicator(&#10;                progress = completionProgress,&#10;                completionPercentage = viewModel.getCompletionPercentage(),&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;        }&#10;&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    CircularProgressIndicator()&#10;                    Text(&#10;                        text = &quot;Loading today's workout...&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(top = 16.dp)&#10;                    )&#10;                }&#10;            }&#10;        } else if (todaysWorkout.isEmpty()) {&#10;            // Check if it's a rest day or if workout needs to be created&#10;            if (viewModel.getWorkoutTypeName() == &quot;Rest Day&quot;) {&#10;                // Rest Day with Background Image&#10;                RestDayScreen()&#10;            } else {&#10;                // Show &quot;Start Workout&quot; screen after reset or for new day&#10;                StartWorkoutScreen(&#10;                    workoutType = viewModel.getWorkoutTypeName(),&#10;                    onStartWorkout = {&#10;                        println(&quot; UI: Start Workout button clicked!&quot;)&#10;                        viewModel.createTodaysWorkout()&#10;                    }&#10;                )&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Exercises: ${todaysWorkout.size}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            LazyColumn {&#10;                items(todaysWorkout) { workoutEntry -&gt;&#10;                    WorkoutExerciseItemWithSetProgress(&#10;                        workoutEntry = workoutEntry,&#10;                        onClick = onExerciseClick,&#10;                        repository = repository&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-save logic when all exercises are completed&#10;    if (completionProgress == 1.0f) {&#10;        viewModel.saveTotalTimeSpent(timerSeconds)&#10;    }&#10;&#10;    // Reset Protection Dialog&#10;    if (showResetWarning &amp;&amp; exerciseToReset != null) {&#10;        AlertDialog(&#10;            onDismissRequest = {&#10;                showResetWarning = false&#10;                exerciseToReset = null&#10;            },&#10;            title = {&#10;                Text(&#10;                    text = &quot;⚠️ Reset Exercise&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;This will reset your entire workout progress for this exercise. It's better to go to the exercise detail to reset specific reps.\n\nAre you sure you want to completely reset this exercise?&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        exerciseToReset?.let { exerciseId -&gt;&#10;                            val exercise = todaysWorkout.find { it.id == exerciseId }&#10;                            exercise?.let { onExerciseClick(it) }&#10;                        }&#10;                        showResetWarning = false&#10;                        exerciseToReset = null&#10;                    }&#10;                ) {&#10;                    Text(&quot;Go to Details&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showResetWarning = false&#10;                        exerciseToReset = null&#10;                    }&#10;                ) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutProgressIndicator(&#10;    progress: Float,&#10;    completionPercentage: Int,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Workout Progress&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = &quot;$completionPercentage%&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (completionPercentage == 100)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = MaterialTheme.colorScheme.primary,&#10;                trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItem(workoutEntry: WorkoutEntryWithExercise, onCompletionToggle: () -&gt; Unit, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) }, // Pass the workout entry when clicked&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Completion toggle switch&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (workoutEntry.isCompleted) &quot;Completed&quot; else &quot;Start&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (workoutEntry.isCompleted)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        Color(0xFF4CAF50), // Green color for &quot;Start&quot;&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Switch(&#10;                    checked = workoutEntry.isCompleted,&#10;                    onCheckedChange = { onCompletionToggle() },&#10;                    colors = SwitchDefaults.colors(&#10;                        checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                        uncheckedThumbColor = Color(0xFF4CAF50), // Green thumb when not completed&#10;                        checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        uncheckedTrackColor = Color(0xFF4CAF50).copy(alpha = 0.3f) // Light green track&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItemWithTimer(workoutEntry: WorkoutEntryWithExercise, onCompletionToggle: () -&gt; Unit, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) }, // Pass the workout entry when clicked&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Completion toggle switch&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (workoutEntry.isCompleted) &quot;Completed&quot; else &quot;Start&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (workoutEntry.isCompleted)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        Color(0xFF4CAF50), // Green color for &quot;Start&quot;&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Switch(&#10;                    checked = workoutEntry.isCompleted,&#10;                    onCheckedChange = { onCompletionToggle() },&#10;                    colors = SwitchDefaults.colors(&#10;                        checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                        uncheckedThumbColor = Color(0xFF4CAF50), // Green thumb when not completed&#10;                        checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        uncheckedTrackColor = Color(0xFF4CAF50).copy(alpha = 0.3f) // Light green track&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Timer display for total time spent (if exercise has time recorded)&#10;            if (workoutEntry.totalSecondsSpent &gt; 0) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Time Spent&quot;,&#10;                        tint = MaterialTheme.colorScheme.secondary,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Time spent: ${workoutEntry.totalSecondsSpent / 60}:${String.format(Locale.getDefault(), &quot;%02d&quot;, workoutEntry.totalSecondsSpent % 60)}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItemWithSetProgress(workoutEntry: WorkoutEntryWithExercise, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}, repository: WorkoutRepository) {&#10;    // Get the actual completed sets count from the database for this specific exercise&#10;    var completedSetsCount by remember { mutableStateOf(0) }&#10;&#10;    // Load the actual completed sets for this specific workout entry&#10;    LaunchedEffect(workoutEntry.id) {&#10;        completedSetsCount = repository.getCompletedSetsCount(workoutEntry.id)&#10;    }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Set Progress Bar and Status - NOW USING ACTUAL COMPLETED SETS FROM DATABASE&#10;            val progress = if (workoutEntry.sets &gt; 0) completedSetsCount.toFloat() / workoutEntry.sets.toFloat() else 0f&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = if (workoutEntry.isCompleted) &quot;✅ Completed&quot; else &quot;Set $completedSetsCount/${workoutEntry.sets}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = if (workoutEntry.isCompleted)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        fontWeight = if (workoutEntry.isCompleted) FontWeight.Bold else FontWeight.Normal&#10;                    )&#10;&#10;                    if (!workoutEntry.isCompleted) {&#10;                        LinearProgressIndicator(&#10;                            progress = { progress },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(top = 4.dp),&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Total time spent display&#10;                if (workoutEntry.totalSecondsSpent &gt; 0) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp),&#10;                        modifier = Modifier.padding(start = 16.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.PlayArrow,&#10;                            contentDescription = &quot;Time Spent&quot;,&#10;                            tint = MaterialTheme.colorScheme.secondary,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Text(&#10;                            text = &quot;${workoutEntry.totalSecondsSpent / 60}:${String.format(&quot;%02d&quot;, workoutEntry.totalSecondsSpent % 60)}&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RestDayScreen() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Background image - your awesome Hanuman gym mural&#10;        Image(&#10;            painter = painterResource(id = R.drawable.rest_day),&#10;            contentDescription = &quot;Rest Day Background&quot;,&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentScale = ContentScale.Crop&#10;        )&#10;&#10;        // Overlay content with semi-transparent background for better text readability&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;‍♂️&quot;,&#10;                        style = MaterialTheme.typography.displayLarge,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Rest Day&quot;,&#10;                        style = MaterialTheme.typography.headlineLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Recovery is just as important as training&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Take time to rest, stretch, and prepare for tomorrow's workout!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DebugDaySelector(&#10;    onDaySelected: (Int) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit,&#10;    onResetToToday: () -&gt; Unit,&#10;    onResetDatabase: () -&gt; Unit = {}  // Added parameter for database reset&#10;) {&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot; Debug Day Selector&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            LazyColumn {&#10;                item {&#10;                    Text(&#10;                        text = &quot;Select a day to test different workouts:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;                }&#10;&#10;                val days = listOf(&#10;                    Calendar.MONDAY to &quot;Monday - Push Day 1 &quot;,&#10;                    Calendar.TUESDAY to &quot;Tuesday - Pull Day 1 ️&quot;,&#10;                    Calendar.WEDNESDAY to &quot;Wednesday - Legs Day 1 &quot;,&#10;                    Calendar.THURSDAY to &quot;Thursday - Push Day 2 &quot;,&#10;                    Calendar.FRIDAY to &quot;Friday - Pull Day 2 ️&quot;,&#10;                    Calendar.SATURDAY to &quot;Saturday - Legs Day 2 &quot;,&#10;                    Calendar.SUNDAY to &quot;Sunday - Rest Day ‍♂️&quot;&#10;                )&#10;&#10;                items(days) { (dayOfWeek, dayLabel) -&gt;&#10;                    OutlinedButton(&#10;                        onClick = { onDaySelected(dayOfWeek) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 4.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            containerColor = if (dayOfWeek == Calendar.SUNDAY)&#10;                                MaterialTheme.colorScheme.secondaryContainer&#10;                            else&#10;                                MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = dayLabel,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(8.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Debug Actions:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Checking current database state...&quot;)&#10;                                val currentState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; CURRENT STATE: ${currentState.first} days, ${currentState.second} entries, ${currentState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Check DB State&quot;)&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Force reset database...&quot;)&#10;                                PPLWorkoutDatabase.forceResetDatabase(context)&#10;                                kotlinx.coroutines.delay(200)&#10;                                val afterState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; AFTER FORCE RESET: ${afterState.first} days, ${afterState.second} entries, ${afterState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Force Reset DB&quot;)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(onClick = onResetToToday) {&#10;                Text(&quot;Reset to Today&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun StartWorkoutScreen(&#10;    workoutType: String,&#10;    onStartWorkout: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Card(&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;&quot;,&#10;                    style = MaterialTheme.typography.displayLarge,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Ready to Start?&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = workoutType,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(bottom = 24.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Tap the button below to create today's workout and start training!&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                Button(&#10;                    onClick = onStartWorkout,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Start Workout&quot;,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Start Today's Workout&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun WorkoutPreview() {&#10;    OfflinePPLWorkOutAppTheme {&#10;        // Preview with sample workout entry data&#10;        val sampleWorkoutEntry = WorkoutEntryWithExercise(&#10;            id = 1,&#10;            dayId = 1,&#10;            exerciseId = 1,&#10;            sets = 4,&#10;            reps = 8,&#10;            isCompleted = false,&#10;            exerciseName = &quot;Barbell Bench Press&quot;,&#10;            isCompound = true&#10;        )&#10;        WorkoutExerciseItem(workoutEntry = sampleWorkoutEntry, onCompletionToggle = {})&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.database.PPLWorkoutDatabase&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.screens.ExerciseDetailScreen&#10;import com.example.offlinepplworkoutapp.ui.theme.OfflinePPLWorkOutAppTheme&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModel&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModelFactory&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;private const val IS_DEBUG_MODE = true&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private lateinit var database: PPLWorkoutDatabase&#10;    private lateinit var repository: WorkoutRepository&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Initialize database and repository&#10;        database = PPLWorkoutDatabase.getDatabase(this)&#10;        repository = WorkoutRepository(&#10;            workoutDayDao = database.workoutDayDao(),&#10;            workoutEntryDao = database.workoutEntryDao(),&#10;            setEntryDao = database.setEntryDao(),&#10;            workoutTemplateDao = database.workoutTemplateDao(),&#10;            templateExerciseDao = database.templateExerciseDao()&#10;        )&#10;&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            OfflinePPLWorkOutAppTheme {&#10;                MainScreen(repository = repository)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainScreen(&#10;    repository: WorkoutRepository&#10;) {&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;    val viewModel: DailyWorkoutViewModel = viewModel(&#10;        factory = DailyWorkoutViewModelFactory(repository)&#10;    )&#10;&#10;    var showDebugMenu by remember { mutableStateOf(false) }&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;    var showResetConfirmation by remember { mutableStateOf(false) }&#10;    val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Add reset confirmation dialog&#10;    if (showResetConfirmation) {&#10;        AlertDialog(&#10;            onDismissRequest = { showResetConfirmation = false },&#10;            title = {&#10;                Text(&#10;                    text = &quot;⚠️ Reset Workout Progress&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;This will clear all your workout progress and history, but keep your exercise library intact.\n\nThis action cannot be undone. Are you sure you want to continue?&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        // Use coroutineScope.launch to call the suspend function properly&#10;                        coroutineScope.launch {&#10;                            println(&quot; UI: Starting reset process...&quot;)&#10;&#10;                            // Verify what's in database before reset&#10;                            val beforeReset = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                            println(&quot; BEFORE RESET: ${beforeReset.first} days, ${beforeReset.second} entries, ${beforeReset.third} sets&quot;)&#10;&#10;                            // Use the more aggressive reset that forces database recreation&#10;                            PPLWorkoutDatabase.forceResetDatabase(context)&#10;&#10;                            // Wait a moment for database operations to complete&#10;                            kotlinx.coroutines.delay(500)&#10;&#10;                            // Verify database is actually empty after reset&#10;                            val afterReset = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                            println(&quot; AFTER RESET: ${afterReset.first} days, ${afterReset.second} entries, ${afterReset.third} sets&quot;)&#10;&#10;                            // Force complete refresh of the ViewModel data&#10;                            println(&quot; UI: Forcing ViewModel refresh...&quot;)&#10;                            viewModel.forceCompleteRefresh()&#10;&#10;                            // Close dialogs&#10;                            showResetConfirmation = false&#10;                            showDebugMenu = false&#10;&#10;                            println(&quot;✅ UI: Reset process complete!&quot;)&#10;                        }&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Text(&quot;Reset All Progress&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                OutlinedButton(onClick = { showResetConfirmation = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        floatingActionButton = {&#10;            // Only show debug FAB in debug builds when not in exercise detail&#10;            if (IS_DEBUG_MODE &amp;&amp; selectedExercise == null) {&#10;                FloatingActionButton(&#10;                    onClick = { showDebugMenu = true },&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Debug Day Selector&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        if (selectedExercise != null) {&#10;            // Show Exercise Detail Screen&#10;            ExerciseDetailScreen(&#10;                workoutEntry = selectedExercise!!,&#10;                repository = repository,&#10;                onBackClick = { selectedExercise = null },&#10;                onSaveChanges = { sets, reps, isCompleted -&gt;&#10;                    viewModel.updateExercise(selectedExercise!!.id, sets, reps, isCompleted)&#10;                }&#10;            )&#10;        } else {&#10;            // Show Daily Workout Screen&#10;            DailyWorkoutScreen(&#10;                viewModel = viewModel,&#10;                repository = repository,&#10;                onExerciseClick = { exercise -&gt; selectedExercise = exercise },&#10;                modifier = Modifier.padding(innerPadding)&#10;            )&#10;        }&#10;&#10;        // Debug day selector dialog&#10;        if (showDebugMenu &amp;&amp; IS_DEBUG_MODE) {&#10;            DebugDaySelector(&#10;                onDaySelected = { dayOfWeek -&gt;&#10;                    val calendar = Calendar.getInstance().apply {&#10;                        set(Calendar.DAY_OF_WEEK, dayOfWeek)&#10;                    }&#10;                    val debugDate = dateFormat.format(calendar.time)&#10;                    viewModel.setDebugDate(debugDate)&#10;                    showDebugMenu = false&#10;                },&#10;                onDismiss = { showDebugMenu = false },&#10;                onResetToToday = {&#10;                    viewModel.setDebugDate(null)&#10;                    showDebugMenu = false&#10;                },&#10;                onResetDatabase = {&#10;                    // Show confirmation dialog before resetting the database&#10;                    showResetConfirmation = true&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DailyWorkoutScreen(&#10;    viewModel: DailyWorkoutViewModel,&#10;    repository: WorkoutRepository,&#10;    modifier: Modifier = Modifier,&#10;    onExerciseClick: (WorkoutEntryWithExercise) -&gt; Unit = {}&#10;) {&#10;&#10;    val todaysWorkout by viewModel.todaysWorkout.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val completionProgress by viewModel.completionProgress.collectAsState()&#10;    val timerSeconds by viewModel.timerSeconds.collectAsState()&#10;    val isTimerRunning by viewModel.isTimerRunning.collectAsState()&#10;&#10;    var showResetWarning by remember { mutableStateOf(false) }&#10;    var exerciseToReset by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header with day, workout type, and timer&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.Top&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;${viewModel.getCurrentDayName()}'s Workout&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = viewModel.getWorkoutTypeName(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Timer Display in top-right corner&#10;            if (isTimerRunning) {&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    ),&#10;                    modifier = Modifier.padding(start = 16.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(12.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.PlayArrow,&#10;                            contentDescription = &quot;Timer&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(20.dp)&#10;                        )&#10;                        Text(&#10;                            text = viewModel.formatTime(timerSeconds),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Progress indicator for non-rest days&#10;        if (todaysWorkout.isNotEmpty()) {&#10;            WorkoutProgressIndicator(&#10;                progress = completionProgress,&#10;                completionPercentage = viewModel.getCompletionPercentage(),&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;        }&#10;&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    CircularProgressIndicator()&#10;                    Text(&#10;                        text = &quot;Loading today's workout...&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(top = 16.dp)&#10;                    )&#10;                }&#10;            }&#10;        } else if (todaysWorkout.isEmpty()) {&#10;            // Check if it's a rest day or if workout needs to be created&#10;            if (viewModel.getWorkoutTypeName() == &quot;Rest Day&quot;) {&#10;                // Rest Day with Background Image&#10;                RestDayScreen()&#10;            } else {&#10;                // Show &quot;Start Workout&quot; screen after reset or for new day&#10;                StartWorkoutScreen(&#10;                    workoutType = viewModel.getWorkoutTypeName(),&#10;                    onStartWorkout = {&#10;                        println(&quot; UI: Start Workout button clicked!&quot;)&#10;                        viewModel.createTodaysWorkout()&#10;                    }&#10;                )&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Exercises: ${todaysWorkout.size}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            LazyColumn {&#10;                items(todaysWorkout) { workoutEntry -&gt;&#10;                    WorkoutExerciseItemWithSetProgress(&#10;                        workoutEntry = workoutEntry,&#10;                        onClick = onExerciseClick,&#10;                        repository = repository&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-save logic when all exercises are completed&#10;    if (completionProgress == 1.0f) {&#10;        viewModel.saveTotalTimeSpent(timerSeconds)&#10;    }&#10;&#10;    // Reset Protection Dialog&#10;    if (showResetWarning &amp;&amp; exerciseToReset != null) {&#10;        AlertDialog(&#10;            onDismissRequest = {&#10;                showResetWarning = false&#10;                exerciseToReset = null&#10;            },&#10;            title = {&#10;                Text(&#10;                    text = &quot;⚠️ Reset Exercise&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;This will reset your entire workout progress for this exercise. It's better to go to the exercise detail to reset specific reps.\n\nAre you sure you want to completely reset this exercise?&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        exerciseToReset?.let { exerciseId -&gt;&#10;                            val exercise = todaysWorkout.find { it.id == exerciseId }&#10;                            exercise?.let { onExerciseClick(it) }&#10;                        }&#10;                        showResetWarning = false&#10;                        exerciseToReset = null&#10;                    }&#10;                ) {&#10;                    Text(&quot;Go to Details&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showResetWarning = false&#10;                        exerciseToReset = null&#10;                    }&#10;                ) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutProgressIndicator(&#10;    progress: Float,&#10;    completionPercentage: Int,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Workout Progress&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = &quot;$completionPercentage%&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (completionPercentage == 100)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = MaterialTheme.colorScheme.primary,&#10;                trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItem(workoutEntry: WorkoutEntryWithExercise, onCompletionToggle: () -&gt; Unit, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) }, // Pass the workout entry when clicked&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Completion toggle switch&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (workoutEntry.isCompleted) &quot;Completed&quot; else &quot;Start&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (workoutEntry.isCompleted)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        Color(0xFF4CAF50), // Green color for &quot;Start&quot;&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Switch(&#10;                    checked = workoutEntry.isCompleted,&#10;                    onCheckedChange = { onCompletionToggle() },&#10;                    colors = SwitchDefaults.colors(&#10;                        checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                        uncheckedThumbColor = Color(0xFF4CAF50), // Green thumb when not completed&#10;                        checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        uncheckedTrackColor = Color(0xFF4CAF50).copy(alpha = 0.3f) // Light green track&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItemWithTimer(workoutEntry: WorkoutEntryWithExercise, onCompletionToggle: () -&gt; Unit, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) }, // Pass the workout entry when clicked&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Completion toggle switch&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (workoutEntry.isCompleted) &quot;Completed&quot; else &quot;Start&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (workoutEntry.isCompleted)&#10;                        MaterialTheme.colorScheme.primary&#10;                    else&#10;                        Color(0xFF4CAF50), // Green color for &quot;Start&quot;&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Switch(&#10;                    checked = workoutEntry.isCompleted,&#10;                    onCheckedChange = { onCompletionToggle() },&#10;                    colors = SwitchDefaults.colors(&#10;                        checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                        uncheckedThumbColor = Color(0xFF4CAF50), // Green thumb when not completed&#10;                        checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        uncheckedTrackColor = Color(0xFF4CAF50).copy(alpha = 0.3f) // Light green track&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Timer display for total time spent (if exercise has time recorded)&#10;            if (workoutEntry.totalSecondsSpent &gt; 0) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Time Spent&quot;,&#10;                        tint = MaterialTheme.colorScheme.secondary,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Time spent: ${workoutEntry.totalSecondsSpent / 60}:${String.format(Locale.getDefault(), &quot;%02d&quot;, workoutEntry.totalSecondsSpent % 60)}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WorkoutExerciseItemWithSetProgress(workoutEntry: WorkoutEntryWithExercise, onClick: (WorkoutEntryWithExercise) -&gt; Unit = {}, repository: WorkoutRepository) {&#10;    // Get the actual completed sets count from the database for this specific exercise&#10;    var completedSetsCount by remember { mutableStateOf(0) }&#10;&#10;    // Load the actual completed sets for this specific workout entry&#10;    LaunchedEffect(workoutEntry.id) {&#10;        completedSetsCount = repository.getCompletedSetsCount(workoutEntry.id)&#10;    }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick(workoutEntry) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = workoutEntry.exerciseName,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = if (workoutEntry.isCompound) &quot;Compound Exercise&quot; else &quot;Isolation Exercise&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (workoutEntry.isCompound)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Sets and Reps display&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = MaterialTheme.shapes.small,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${workoutEntry.sets} × ${workoutEntry.reps} reps&quot;,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Set Progress Bar and Status - NOW USING ACTUAL COMPLETED SETS FROM DATABASE&#10;            val progress = if (workoutEntry.sets &gt; 0) completedSetsCount.toFloat() / workoutEntry.sets.toFloat() else 0f&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = if (workoutEntry.isCompleted) &quot;✅ Completed&quot; else &quot;Set $completedSetsCount/${workoutEntry.sets}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = if (workoutEntry.isCompleted)&#10;                            MaterialTheme.colorScheme.primary&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        fontWeight = if (workoutEntry.isCompleted) FontWeight.Bold else FontWeight.Normal&#10;                    )&#10;&#10;                    if (!workoutEntry.isCompleted) {&#10;                        LinearProgressIndicator(&#10;                            progress = { progress },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(top = 4.dp),&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Total time spent display&#10;                if (workoutEntry.totalSecondsSpent &gt; 0) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp),&#10;                        modifier = Modifier.padding(start = 16.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.PlayArrow,&#10;                            contentDescription = &quot;Time Spent&quot;,&#10;                            tint = MaterialTheme.colorScheme.secondary,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Text(&#10;                            text = &quot;${workoutEntry.totalSecondsSpent / 60}:${String.format(&quot;%02d&quot;, workoutEntry.totalSecondsSpent % 60)}&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RestDayScreen() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Background image - your awesome Hanuman gym mural&#10;        Image(&#10;            painter = painterResource(id = R.drawable.rest_day),&#10;            contentDescription = &quot;Rest Day Background&quot;,&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentScale = ContentScale.Crop&#10;        )&#10;&#10;        // Overlay content with semi-transparent background for better text readability&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;‍♂️&quot;,&#10;                        style = MaterialTheme.typography.displayLarge,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Rest Day&quot;,&#10;                        style = MaterialTheme.typography.headlineLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Recovery is just as important as training&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Take time to rest, stretch, and prepare for tomorrow's workout!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DebugDaySelector(&#10;    onDaySelected: (Int) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit,&#10;    onResetToToday: () -&gt; Unit,&#10;    onResetDatabase: () -&gt; Unit = {}  // Added parameter for database reset&#10;) {&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot; Debug Day Selector&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            LazyColumn {&#10;                item {&#10;                    Text(&#10;                        text = &quot;Select a day to test different workouts:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;                }&#10;&#10;                val days = listOf(&#10;                    Calendar.MONDAY to &quot;Monday - Push Day 1 &quot;,&#10;                    Calendar.TUESDAY to &quot;Tuesday - Pull Day 1 ️&quot;,&#10;                    Calendar.WEDNESDAY to &quot;Wednesday - Legs Day 1 &quot;,&#10;                    Calendar.THURSDAY to &quot;Thursday - Push Day 2 &quot;,&#10;                    Calendar.FRIDAY to &quot;Friday - Pull Day 2 ️&quot;,&#10;                    Calendar.SATURDAY to &quot;Saturday - Legs Day 2 &quot;,&#10;                    Calendar.SUNDAY to &quot;Sunday - Rest Day ‍♂️&quot;&#10;                )&#10;&#10;                items(days) { (dayOfWeek, dayLabel) -&gt;&#10;                    OutlinedButton(&#10;                        onClick = { onDaySelected(dayOfWeek) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 4.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            containerColor = if (dayOfWeek == Calendar.SUNDAY)&#10;                                MaterialTheme.colorScheme.secondaryContainer&#10;                            else&#10;                                MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = dayLabel,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(8.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Debug Actions:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Checking current database state...&quot;)&#10;                                val currentState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; CURRENT STATE: ${currentState.first} days, ${currentState.second} entries, ${currentState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Check DB State&quot;)&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Force reset database...&quot;)&#10;                                PPLWorkoutDatabase.forceResetDatabase(context)&#10;                                kotlinx.coroutines.delay(200)&#10;                                val afterState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; AFTER FORCE RESET: ${afterState.first} days, ${afterState.second} entries, ${afterState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Force Reset DB&quot;)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(onClick = onResetToToday) {&#10;                Text(&quot;Reset to Today&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun StartWorkoutScreen(&#10;    workoutType: String,&#10;    onStartWorkout: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Card(&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;&quot;,&#10;                    style = MaterialTheme.typography.displayLarge,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Ready to Start?&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = workoutType,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(bottom = 24.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Tap the button below to create today's workout and start training!&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                Button(&#10;                    onClick = onStartWorkout,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Start Workout&quot;,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Start Today's Workout&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun WorkoutPreview() {&#10;    OfflinePPLWorkOutAppTheme {&#10;        // Preview with sample workout entry data&#10;        val sampleWorkoutEntry = WorkoutEntryWithExercise(&#10;            id = 1,&#10;            dayId = 1,&#10;            exerciseId = 1,&#10;            sets = 4,&#10;            reps = 8,&#10;            isCompleted = false,&#10;            exerciseName = &quot;Barbell Bench Press&quot;,&#10;            isCompound = true&#10;        )&#10;        WorkoutExerciseItem(workoutEntry = sampleWorkoutEntry, onCompletionToggle = {})&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/ExerciseData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/ExerciseData.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.data&#10;&#10;import com.example.offlinepplworkoutapp.data.entity.Exercise&#10;&#10;/**&#10; * Enhanced PPL Exercise Library with rich metadata&#10; * This contains all 34 exercises with detailed information for better user experience&#10; */&#10;object ExerciseData {&#10;    &#10;    fun getPPLExercises(): List&lt;Exercise&gt; {&#10;        return listOf(&#10;            // Push Day 1 (Monday) - Exercises 1-5&#10;            Exercise(&#10;                id = 1, &#10;                name = &quot;Barbell Bench Press&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Chest&quot;,&#10;                secondaryMuscles = &quot;Triceps,Front Delts&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Lie flat on bench with eyes under the bar\n2. Grip bar slightly wider than shoulder width\n3. Unrack and lower bar to chest with control\n4. Press bar up explosively to starting position&quot;,&#10;                tips = &quot;Keep shoulder blades retracted throughout movement. Don't bounce bar off chest. Maintain tight core.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 2, &#10;                name = &quot;Standing Overhead Press&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Shoulders&quot;,&#10;                secondaryMuscles = &quot;Triceps,Upper Chest,Core&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Stand with feet shoulder-width apart\n2. Grip bar at shoulder width, rest on front delts\n3. Press bar straight up overhead\n4. Lower with control to starting position&quot;,&#10;                tips = &quot;Keep core tight. Don't arch back excessively. Bar path should be straight up.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 3, &#10;                name = &quot;Incline Dumbbell Press&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Upper Chest&quot;,&#10;                secondaryMuscles = &quot;Front Delts,Triceps&quot;,&#10;                equipment = &quot;Dumbbells&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Set bench to 30-45 degree incline\n2. Hold dumbbells at chest level\n3. Press weights up and slightly together\n4. Lower with control to starting position&quot;,&#10;                tips = &quot;Don't press dumbbells straight up - bring them together at top. Control the negative.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 4, &#10;                name = &quot;Dumbbell Lateral Raise&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Side Delts&quot;,&#10;                secondaryMuscles = &quot;Front Delts,Rear Delts&quot;,&#10;                equipment = &quot;Dumbbells&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Stand with dumbbells at sides\n2. Raise arms out to sides until parallel to floor\n3. Lower with control\n4. Keep slight bend in elbows throughout&quot;,&#10;                tips = &quot;Lead with pinkies, not thumbs. Don't swing or use momentum. Focus on mind-muscle connection.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 5, &#10;                name = &quot;Cable Triceps Pushdown&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Triceps&quot;,&#10;                secondaryMuscles = &quot;&quot;,&#10;                equipment = &quot;Cable Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Stand at cable machine with rope or bar attachment\n2. Keep elbows at sides\n3. Push weight down until arms are fully extended\n4. Return to starting position with control&quot;,&#10;                tips = &quot;Keep elbows stationary. Focus on triceps contraction at bottom. Don't lean forward.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;&#10;            // Pull Day 1 (Tuesday) - Exercises 6-11&#10;            Exercise(&#10;                id = 6, &#10;                name = &quot;Deadlift&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Posterior Chain&quot;,&#10;                secondaryMuscles = &quot;Traps,Lats,Glutes,Hamstrings,Core&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Advanced&quot;,&#10;                instructions = &quot;1. Stand with bar over mid-foot\n2. Bend down and grip bar outside legs\n3. Lift chest, engage lats\n4. Drive through heels and pull bar up legs\n5. Stand tall, then reverse movement&quot;,&#10;                tips = &quot;Keep bar close to body. Don't round back. Drive hips forward at top.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 7, &#10;                name = &quot;Pull-Ups or Lat Pulldowns&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Lats&quot;,&#10;                secondaryMuscles = &quot;Rhomboids,Middle Traps,Biceps&quot;,&#10;                equipment = &quot;Pull-up Bar/Cable Machine&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Hang from bar with overhand grip\n2. Pull body up until chin clears bar\n3. Lower with control to full hang\n4. If using cable, pull bar to upper chest&quot;,&#10;                tips = &quot;Don't swing or kip. Focus on pulling with lats, not arms. Full range of motion.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 8, &#10;                name = &quot;Bent-Over Barbell Row&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Middle Traps&quot;,&#10;                secondaryMuscles = &quot;Rhomboids,Lats,Rear Delts,Biceps&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Hinge at hips with slight knee bend\n2. Hold bar with overhand grip\n3. Pull bar to lower chest/upper abdomen\n4. Lower with control&quot;,&#10;                tips = &quot;Keep torso angle consistent. Don't use momentum. Squeeze shoulder blades together.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 9, &#10;                name = &quot;Face Pull&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Rear Delts&quot;,&#10;                secondaryMuscles = &quot;Middle Traps,Rhomboids&quot;,&#10;                equipment = &quot;Cable Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Set cable at face height with rope attachment\n2. Pull rope to face, separating hands\n3. Focus on rear delt contraction\n4. Return with control&quot;,&#10;                tips = &quot;Keep elbows high. Don't use too much weight. Focus on form over weight.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 10, &#10;                name = &quot;Barbell Biceps Curl&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Biceps&quot;,&#10;                secondaryMuscles = &quot;Forearms&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Stand with bar at arm's length\n2. Keep elbows at sides\n3. Curl bar up to chest level\n4. Lower with control&quot;,&#10;                tips = &quot;Don't swing or use momentum. Keep elbows stationary. Control the negative.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 11, &#10;                name = &quot;Hammer Curl&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Biceps&quot;,&#10;                secondaryMuscles = &quot;Forearms,Brachialis&quot;,&#10;                equipment = &quot;Dumbbells&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Hold dumbbells with neutral grip (palms facing each other)\n2. Keep elbows at sides\n3. Curl weights up\n4. Lower with control&quot;,&#10;                tips = &quot;Maintain neutral grip throughout. Don't swing weights. Focus on bicep contraction.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;&#10;            // Legs Day 1 (Wednesday) - Exercises 12-16&#10;            Exercise(&#10;                id = 12, &#10;                name = &quot;Back Squat&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Quadriceps&quot;,&#10;                secondaryMuscles = &quot;Glutes,Hamstrings,Core&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Position bar on upper traps\n2. Stand with feet shoulder-width apart\n3. Descend by sitting back and down\n4. Drive through heels to stand&quot;,&#10;                tips = &quot;Keep chest up and knees tracking over toes. Go to parallel or below. Don't let knees cave in.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 13, &#10;                name = &quot;Romanian Deadlift&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Hamstrings&quot;,&#10;                secondaryMuscles = &quot;Glutes,Lower Back&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Hold bar at hip level\n2. Keep slight knee bend\n3. Hinge at hips, lowering bar\n4. Drive hips forward to return&quot;,&#10;                tips = &quot;Keep bar close to legs. Feel stretch in hamstrings. Don't round back.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 14, &#10;                name = &quot;Leg Press&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Quadriceps&quot;,&#10;                secondaryMuscles = &quot;Glutes,Hamstrings&quot;,&#10;                equipment = &quot;Leg Press Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Sit in leg press machine\n2. Place feet shoulder-width apart on platform\n3. Lower weight until knees are at 90 degrees\n4. Press through heels to extend legs&quot;,&#10;                tips = &quot;Don't lock knees completely. Keep core engaged. Control both directions.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 15, &#10;                name = &quot;Lying Leg Curl&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Hamstrings&quot;,&#10;                secondaryMuscles = &quot;&quot;,&#10;                equipment = &quot;Leg Curl Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Lie face down on leg curl machine\n2. Position ankles under pads\n3. Curl heels toward glutes\n4. Lower with control&quot;,&#10;                tips = &quot;Don't lift hips off pad. Full range of motion. Control the negative.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 16, &#10;                name = &quot;Seated Calf Raise&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Calves&quot;,&#10;                secondaryMuscles = &quot;&quot;,&#10;                equipment = &quot;Calf Raise Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Sit in calf raise machine\n2. Position balls of feet on platform\n3. Raise heels as high as possible\n4. Lower to full stretch&quot;,&#10;                tips = &quot;Get full range of motion. Pause at top. Feel stretch at bottom.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;&#10;            // Push Day 2 (Thursday) - Exercises 17-22&#10;            Exercise(&#10;                id = 17, &#10;                name = &quot;Standing Overhead Press&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Shoulders&quot;,&#10;                secondaryMuscles = &quot;Triceps,Upper Chest,Core&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Stand with feet shoulder-width apart\n2. Grip bar at shoulder width, rest on front delts\n3. Press bar straight up overhead\n4. Lower with control to starting position&quot;,&#10;                tips = &quot;Keep core tight. Don't arch back excessively. Bar path should be straight up.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 18, &#10;                name = &quot;Incline Barbell Press&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Upper Chest&quot;,&#10;                secondaryMuscles = &quot;Front Delts,Triceps&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Set bench to 30-45 degree incline\n2. Lie back and grip bar slightly wider than shoulders\n3. Lower bar to upper chest\n4. Press bar up and slightly back&quot;,&#10;                tips = &quot;Don't touch bar to neck. Keep shoulder blades retracted. Control the descent.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 19, &#10;                name = &quot;Weighted Dips&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Lower Chest&quot;,&#10;                secondaryMuscles = &quot;Triceps,Front Delts&quot;,&#10;                equipment = &quot;Dip Station&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Support body on dip bars\n2. Lower body by bending elbows\n3. Descend until shoulders are below elbows\n4. Press back up to starting position&quot;,&#10;                tips = &quot;Lean slightly forward for chest emphasis. Don't go too deep if shoulders hurt. Control the movement.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 20, &#10;                name = &quot;Cable Lateral Raise&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Side Delts&quot;,&#10;                secondaryMuscles = &quot;Front Delts&quot;,&#10;                equipment = &quot;Cable Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Stand sideways to cable machine\n2. Grab handle with far hand\n3. Raise arm out to side until parallel to floor\n4. Lower with control&quot;,&#10;                tips = &quot;Use one arm at a time for better control. Don't swing or use momentum. Feel the burn.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 21, &#10;                name = &quot;Pec Deck or Dumbbell Fly&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Chest&quot;,&#10;                secondaryMuscles = &quot;Front Delts&quot;,&#10;                equipment = &quot;Pec Deck/Dumbbells&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Sit in pec deck or lie on bench with dumbbells\n2. Bring arms together in wide arc\n3. Squeeze chest muscles at peak contraction\n4. Return to starting position with control&quot;,&#10;                tips = &quot;Focus on chest squeeze, not weight moved. Keep slight bend in elbows. Feel the stretch.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;            Exercise(&#10;                id = 22, &#10;                name = &quot;Overhead Cable Triceps Extension&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Triceps&quot;,&#10;                secondaryMuscles = &quot;&quot;,&#10;                equipment = &quot;Cable Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Face away from cable machine\n2. Hold rope overhead with arms extended\n3. Lower rope behind head by bending elbows\n4. Extend arms back to starting position&quot;,&#10;                tips = &quot;Keep elbows stationary and pointing forward. Don't let elbows flare out. Full range of motion.&quot;,&#10;                category = &quot;Push&quot;&#10;            ),&#10;&#10;            // Pull Day 2 (Friday) - Exercises 23-28&#10;            Exercise(&#10;                id = 23, &#10;                name = &quot;Pendlay or Bent-Over Row&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Middle Traps&quot;,&#10;                secondaryMuscles = &quot;Rhomboids,Lats,Rear Delts,Biceps&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Bend over with torso parallel to floor\n2. Grip bar with overhand grip\n3. Pull bar explosively to lower chest\n4. Lower bar to floor with control&quot;,&#10;                tips = &quot;Start each rep from dead stop. Keep torso parallel. Don't use leg drive.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 24, &#10;                name = &quot;Weighted Pull-Ups or Wide-Grip Lat Pulldown&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Lats&quot;,&#10;                secondaryMuscles = &quot;Rhomboids,Middle Traps,Biceps&quot;,&#10;                equipment = &quot;Pull-up Bar/Cable Machine&quot;,&#10;                difficulty = &quot;Advanced&quot;,&#10;                instructions = &quot;1. Use wide grip on bar\n2. Pull body up or bar down to upper chest\n3. Focus on lat engagement\n4. Lower with control&quot;,&#10;                tips = &quot;Think about pulling elbows down and back. Don't use biceps primarily. Full range of motion.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 25, &#10;                name = &quot;Dumbbell Shrug&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Upper Traps&quot;,&#10;                secondaryMuscles = &quot;&quot;,&#10;                equipment = &quot;Dumbbells&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Hold dumbbells at sides\n2. Shrug shoulders straight up\n3. Hold peak contraction briefly\n4. Lower shoulders with control&quot;,&#10;                tips = &quot;Don't roll shoulders. Straight up and down motion. Focus on trap contraction.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 26, &#10;                name = &quot;Face Pull&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Rear Delts&quot;,&#10;                secondaryMuscles = &quot;Middle Traps,Rhomboids&quot;,&#10;                equipment = &quot;Cable Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Set cable at face height with rope attachment\n2. Pull rope to face, separating hands\n3. Focus on rear delt contraction\n4. Return with control&quot;,&#10;                tips = &quot;Keep elbows high. Don't use too much weight. Focus on form over weight.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 27, &#10;                name = &quot;EZ-Bar Biceps Curl&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Biceps&quot;,&#10;                secondaryMuscles = &quot;Forearms&quot;,&#10;                equipment = &quot;EZ-Bar&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Hold EZ-bar with underhand grip\n2. Keep elbows at sides\n3. Curl bar up to chest level\n4. Lower with control&quot;,&#10;                tips = &quot;EZ-bar is easier on wrists than straight bar. Don't swing. Control the negative.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;            Exercise(&#10;                id = 28, &#10;                name = &quot;Reverse Grip or Preacher Curl&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Biceps&quot;,&#10;                secondaryMuscles = &quot;Forearms,Brachialis&quot;,&#10;                equipment = &quot;Barbell/Dumbbells&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Use overhand grip for reverse curl or preacher bench\n2. Curl weight up focusing on bicep contraction\n3. Lower with control\n4. Don't use momentum&quot;,&#10;                tips = &quot;Reverse curls target brachialis more. Preacher curls provide constant tension. Control the weight.&quot;,&#10;                category = &quot;Pull&quot;&#10;            ),&#10;&#10;            // Legs Day 2 (Saturday) - Exercises 29-34&#10;            Exercise(&#10;                id = 29, &#10;                name = &quot;Front Squat&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Quadriceps&quot;,&#10;                secondaryMuscles = &quot;Glutes,Core&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Advanced&quot;,&#10;                instructions = &quot;1. Position bar on front delts in front rack position\n2. Keep elbows high and chest up\n3. Descend into squat\n4. Drive through heels to stand&quot;,&#10;                tips = &quot;More quad-focused than back squat. Keep torso upright. May need lighter weight than back squat.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 30, &#10;                name = &quot;Bulgarian Split Squat&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Quadriceps&quot;,&#10;                secondaryMuscles = &quot;Glutes,Hamstrings&quot;,&#10;                equipment = &quot;Dumbbells&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Stand in lunge position with rear foot elevated\n2. Lower into lunge by bending front leg\n3. Keep most weight on front leg\n4. Drive through front heel to return&quot;,&#10;                tips = &quot;Don't put too much weight on back foot. Keep torso upright. Full range of motion.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 31, &#10;                name = &quot;Barbell Hip Thrust&quot;, &#10;                isCompound = true,&#10;                primaryMuscle = &quot;Glutes&quot;,&#10;                secondaryMuscles = &quot;Hamstrings&quot;,&#10;                equipment = &quot;Barbell&quot;,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                instructions = &quot;1. Sit with back against bench, bar across hips\n2. Drive through heels to lift hips up\n3. Squeeze glutes at top\n4. Lower with control&quot;,&#10;                tips = &quot;Focus on glute contraction. Don't overextend lower back. Use pad for comfort.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 32, &#10;                name = &quot;Leg Extension&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Quadriceps&quot;,&#10;                secondaryMuscles = &quot;&quot;,&#10;                equipment = &quot;Leg Extension Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Sit in leg extension machine\n2. Position ankles under pads\n3. Extend legs until straight\n4. Lower with control&quot;,&#10;                tips = &quot;Don't lock knees aggressively. Control both directions. Feel quad contraction.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 33, &#10;                name = &quot;Seated or Lying Leg Curl&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Hamstrings&quot;,&#10;                secondaryMuscles = &quot;&quot;,&#10;                equipment = &quot;Leg Curl Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Position yourself in leg curl machine\n2. Place ankles under pads\n3. Curl heels toward glutes\n4. Lower with control&quot;,&#10;                tips = &quot;Don't lift hips off pad. Full range of motion. Control the negative.&quot;,&#10;                category = &quot;Legs&quot;&#10;            ),&#10;            Exercise(&#10;                id = 34, &#10;                name = &quot;Standing Calf Raise&quot;, &#10;                isCompound = false,&#10;                primaryMuscle = &quot;Calves&quot;,&#10;                secondaryMuscles = &quot;&quot;,&#10;                equipment = &quot;Calf Raise Machine&quot;,&#10;                difficulty = &quot;Beginner&quot;,&#10;                instructions = &quot;1. Stand in calf raise machine\n2. Position balls of feet on platform\n3. Raise heels as high as possible\n4. Lower to full stretch&quot;,&#10;                tips = &quot;Get full range of motion. Pause at top. Feel stretch at bottom. Don't bounce.&quot;,&#10;                category = &quot;Legs&quot;&#10;            )&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/PPLTemplateData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/PPLTemplateData.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.data&#10;&#10;import com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate&#10;import com.example.offlinepplworkoutapp.data.entity.TemplateExercise&#10;&#10;/**&#10; * PPL Template Library - Predefined workout templates for Push/Pull/Legs program&#10; * &#10; * This class provides the 6 core PPL workout templates that replace the hardcoded&#10; * day-based workout logic. Each template contains exercises with proper sets, reps,&#10; * and rest periods for optimal training progression.&#10; */&#10;object PPLTemplateData {&#10;&#10;    /**&#10;     * Returns the 6 predefined PPL workout templates&#10;     */&#10;    fun getPPLTemplates(): List&lt;WorkoutTemplate&gt; {&#10;        return listOf(&#10;            // Template 1: Push Day 1 (Monday)&#10;            WorkoutTemplate(&#10;                id = 1,&#10;                name = &quot;Push Day 1&quot;,&#10;                description = &quot;Chest and Triceps focused with Overhead Press&quot;,&#10;                estimatedDuration = 75,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                category = &quot;Push&quot;,&#10;                isCustom = false,&#10;                isActive = true,&#10;                createdDate = &quot;2025-07-29&quot;,&#10;                lastUsedDate = &quot;&quot;&#10;            ),&#10;&#10;            // Template 2: Pull Day 1 (Tuesday)&#10;            WorkoutTemplate(&#10;                id = 2,&#10;                name = &quot;Pull Day 1&quot;,&#10;                description = &quot;Back and Biceps with Deadlift focus&quot;,&#10;                estimatedDuration = 80,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                category = &quot;Pull&quot;,&#10;                isCustom = false,&#10;                isActive = true,&#10;                createdDate = &quot;2025-07-29&quot;,&#10;                lastUsedDate = &quot;&quot;&#10;            ),&#10;&#10;            // Template 3: Legs Day 1 (Wednesday)&#10;            WorkoutTemplate(&#10;                id = 3,&#10;                name = &quot;Legs Day 1&quot;,&#10;                description = &quot;Quad and Glute focused with Back Squat&quot;,&#10;                estimatedDuration = 70,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                category = &quot;Legs&quot;,&#10;                isCustom = false,&#10;                isActive = true,&#10;                createdDate = &quot;2025-07-29&quot;,&#10;                lastUsedDate = &quot;&quot;&#10;            ),&#10;&#10;            // Template 4: Push Day 2 (Thursday)&#10;            WorkoutTemplate(&#10;                id = 4,&#10;                name = &quot;Push Day 2&quot;,&#10;                description = &quot;Shoulder and Triceps focused with Dips&quot;,&#10;                estimatedDuration = 75,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                category = &quot;Push&quot;,&#10;                isCustom = false,&#10;                isActive = true,&#10;                createdDate = &quot;2025-07-29&quot;,&#10;                lastUsedDate = &quot;&quot;&#10;            ),&#10;&#10;            // Template 5: Pull Day 2 (Friday)&#10;            WorkoutTemplate(&#10;                id = 5,&#10;                name = &quot;Pull Day 2&quot;,&#10;                description = &quot;Back width and Biceps with Row focus&quot;,&#10;                estimatedDuration = 80,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                category = &quot;Pull&quot;,&#10;                isCustom = false,&#10;                isActive = true,&#10;                createdDate = &quot;2025-07-29&quot;,&#10;                lastUsedDate = &quot;&quot;&#10;            ),&#10;&#10;            // Template 6: Legs Day 2 (Saturday)&#10;            WorkoutTemplate(&#10;                id = 6,&#10;                name = &quot;Legs Day 2&quot;,&#10;                description = &quot;Hamstring and Calf focused with Front Squat&quot;,&#10;                estimatedDuration = 70,&#10;                difficulty = &quot;Intermediate&quot;,&#10;                category = &quot;Legs&quot;,&#10;                isCustom = false,&#10;                isActive = true,&#10;                createdDate = &quot;2025-07-29&quot;,&#10;                lastUsedDate = &quot;&quot;&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Returns all template-exercise relationships with proper configuration&#10;     * &#10;     * This maps each exercise to its template with sets, reps, rest periods,&#10;     * and order based on the current PPL program structure.&#10;     */&#10;    fun getTemplateExercises(): List&lt;TemplateExercise&gt; {&#10;        return listOf(&#10;            // PUSH DAY 1 (Template ID 1) - 5 exercises&#10;            TemplateExercise(templateId = 1, exerciseId = 1, orderIndex = 0, sets = 4, reps = 8, restSeconds = 180),   // Barbell Bench Press&#10;            TemplateExercise(templateId = 1, exerciseId = 2, orderIndex = 1, sets = 3, reps = 10, restSeconds = 120),  // Standing Overhead Press&#10;            TemplateExercise(templateId = 1, exerciseId = 3, orderIndex = 2, sets = 3, reps = 12, restSeconds = 90),   // Incline Dumbbell Press&#10;            TemplateExercise(templateId = 1, exerciseId = 4, orderIndex = 3, sets = 3, reps = 15, restSeconds = 60),   // Dumbbell Lateral Raise&#10;            TemplateExercise(templateId = 1, exerciseId = 5, orderIndex = 4, sets = 3, reps = 12, restSeconds = 60),   // Cable Triceps Pushdown&#10;&#10;            // PULL DAY 1 (Template ID 2) - 6 exercises&#10;            TemplateExercise(templateId = 2, exerciseId = 6, orderIndex = 0, sets = 3, reps = 8, restSeconds = 180),   // Deadlift&#10;            TemplateExercise(templateId = 2, exerciseId = 7, orderIndex = 1, sets = 3, reps = 10, restSeconds = 120),  // Pull-Ups or Lat Pulldowns&#10;            TemplateExercise(templateId = 2, exerciseId = 8, orderIndex = 2, sets = 3, reps = 12, restSeconds = 90),   // Bent-Over Barbell Row&#10;            TemplateExercise(templateId = 2, exerciseId = 9, orderIndex = 3, sets = 3, reps = 15, restSeconds = 60),   // Face Pull&#10;            TemplateExercise(templateId = 2, exerciseId = 10, orderIndex = 4, sets = 3, reps = 12, restSeconds = 60),  // Barbell Biceps Curl&#10;            TemplateExercise(templateId = 2, exerciseId = 11, orderIndex = 5, sets = 2, reps = 12, restSeconds = 60),  // Hammer Curl&#10;&#10;            // LEGS DAY 1 (Template ID 3) - 5 exercises&#10;            TemplateExercise(templateId = 3, exerciseId = 12, orderIndex = 0, sets = 4, reps = 8, restSeconds = 180),  // Back Squat&#10;            TemplateExercise(templateId = 3, exerciseId = 13, orderIndex = 1, sets = 3, reps = 12, restSeconds = 120), // Romanian Deadlift&#10;            TemplateExercise(templateId = 3, exerciseId = 14, orderIndex = 2, sets = 3, reps = 12, restSeconds = 90),  // Leg Press&#10;            TemplateExercise(templateId = 3, exerciseId = 15, orderIndex = 3, sets = 3, reps = 12, restSeconds = 60),  // Lying Leg Curl&#10;            TemplateExercise(templateId = 3, exerciseId = 16, orderIndex = 4, sets = 4, reps = 15, restSeconds = 45),  // Seated Calf Raise&#10;&#10;            // PUSH DAY 2 (Template ID 4) - 6 exercises&#10;            TemplateExercise(templateId = 4, exerciseId = 17, orderIndex = 0, sets = 4, reps = 8, restSeconds = 180),  // Standing Overhead Press&#10;            TemplateExercise(templateId = 4, exerciseId = 18, orderIndex = 1, sets = 3, reps = 12, restSeconds = 120), // Incline Barbell Press&#10;            TemplateExercise(templateId = 4, exerciseId = 19, orderIndex = 2, sets = 3, reps = 10, restSeconds = 90),  // Weighted Dips&#10;            TemplateExercise(templateId = 4, exerciseId = 20, orderIndex = 3, sets = 3, reps = 15, restSeconds = 60),  // Cable Lateral Raise&#10;            TemplateExercise(templateId = 4, exerciseId = 21, orderIndex = 4, sets = 3, reps = 15, restSeconds = 60),  // Pec Deck or Dumbbell Fly&#10;            TemplateExercise(templateId = 4, exerciseId = 22, orderIndex = 5, sets = 3, reps = 12, restSeconds = 60),  // Overhead Cable Triceps Extension&#10;&#10;            // PULL DAY 2 (Template ID 5) - 6 exercises&#10;            TemplateExercise(templateId = 5, exerciseId = 23, orderIndex = 0, sets = 4, reps = 10, restSeconds = 180), // Pendlay or Bent-Over Row&#10;            TemplateExercise(templateId = 5, exerciseId = 24, orderIndex = 1, sets = 3, reps = 12, restSeconds = 120), // Weighted Pull-Ups or Wide-Grip Lat Pulldown&#10;            TemplateExercise(templateId = 5, exerciseId = 25, orderIndex = 2, sets = 3, reps = 12, restSeconds = 90),  // Dumbbell Shrug&#10;            TemplateExercise(templateId = 5, exerciseId = 26, orderIndex = 3, sets = 3, reps = 15, restSeconds = 60),  // Face Pull&#10;            TemplateExercise(templateId = 5, exerciseId = 27, orderIndex = 4, sets = 3, reps = 12, restSeconds = 60),  // EZ-Bar Biceps Curl&#10;            TemplateExercise(templateId = 5, exerciseId = 28, orderIndex = 5, sets = 2, reps = 12, restSeconds = 60),  // Reverse Grip or Preacher Curl&#10;&#10;            // LEGS DAY 2 (Template ID 6) - 6 exercises&#10;            TemplateExercise(templateId = 6, exerciseId = 29, orderIndex = 0, sets = 4, reps = 8, restSeconds = 180),  // Front Squat&#10;            TemplateExercise(templateId = 6, exerciseId = 30, orderIndex = 1, sets = 3, reps = 10, restSeconds = 120), // Bulgarian Split Squat&#10;            TemplateExercise(templateId = 6, exerciseId = 31, orderIndex = 2, sets = 3, reps = 12, restSeconds = 90),  // Barbell Hip Thrust&#10;            TemplateExercise(templateId = 6, exerciseId = 32, orderIndex = 3, sets = 3, reps = 15, restSeconds = 60),  // Leg Extension&#10;            TemplateExercise(templateId = 6, exerciseId = 33, orderIndex = 4, sets = 3, reps = 15, restSeconds = 60),  // Seated or Lying Leg Curl&#10;            TemplateExercise(templateId = 6, exerciseId = 34, orderIndex = 5, sets = 4, reps = 15, restSeconds = 45)   // Standing Calf Raise&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Helper function to get template ID for a given day of week&#10;     * This maintains compatibility with current day-based logic&#10;     */&#10;    fun getTemplateIdForDayOfWeek(dayOfWeek: Int): Int {&#10;        return when (dayOfWeek) {&#10;            2 -&gt; 1 // Monday -&gt; Push Day 1&#10;            3 -&gt; 2 // Tuesday -&gt; Pull Day 1&#10;            4 -&gt; 3 // Wednesday -&gt; Legs Day 1&#10;            5 -&gt; 4 // Thursday -&gt; Push Day 2&#10;            6 -&gt; 5 // Friday -&gt; Pull Day 2&#10;            7 -&gt; 6 // Saturday -&gt; Legs Day 2&#10;            1 -&gt; 0 // Sunday -&gt; Rest Day (no template)&#10;            else -&gt; 0 // Rest Day&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Helper function to get exercises for a specific template&#10;     * Returns list of exercise configurations for the given template&#10;     */&#10;    fun getExercisesForTemplate(templateId: Int): List&lt;TemplateExercise&gt; {&#10;        return getTemplateExercises().filter { it.templateId == templateId }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/dao/TemplateExerciseDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/dao/TemplateExerciseDao.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.data.dao&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Insert&#10;import androidx.room.Query&#10;import androidx.room.Update&#10;import androidx.room.Delete&#10;import androidx.room.Transaction&#10;import com.example.offlinepplworkoutapp.data.entity.TemplateExercise&#10;import com.example.offlinepplworkoutapp.data.entity.Exercise&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Data Access Object for TemplateExercise operations&#10; */&#10;@Dao&#10;interface TemplateExerciseDao {&#10;&#10;    @Query(&quot;SELECT * FROM template_exercises WHERE templateId = :templateId ORDER BY orderIndex&quot;)&#10;    suspend fun getExercisesForTemplate(templateId: Int): List&lt;TemplateExercise&gt;&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT e.* FROM exercises e &#10;        INNER JOIN template_exercises te ON e.id = te.exerciseId &#10;        WHERE te.templateId = :templateId &#10;        ORDER BY te.orderIndex&#10;    &quot;&quot;&quot;)&#10;    suspend fun getExerciseDetailsForTemplate(templateId: Int): List&lt;Exercise&gt;&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT te.*, e.name as exerciseName, e.primaryMuscle, e.equipment &#10;        FROM template_exercises te &#10;        INNER JOIN exercises e ON te.exerciseId = e.id &#10;        WHERE te.templateId = :templateId &#10;        ORDER BY te.orderIndex&#10;    &quot;&quot;&quot;)&#10;    fun getTemplateExercisesWithDetails(templateId: Int): Flow&lt;List&lt;TemplateExerciseWithDetails&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM template_exercises WHERE id = :id&quot;)&#10;    suspend fun getTemplateExerciseById(id: Int): TemplateExercise?&#10;&#10;    @Insert&#10;    suspend fun insertTemplateExercise(templateExercise: TemplateExercise): Long&#10;&#10;    @Insert&#10;    suspend fun insertTemplateExercises(templateExercises: List&lt;TemplateExercise&gt;)&#10;&#10;    @Update&#10;    suspend fun updateTemplateExercise(templateExercise: TemplateExercise)&#10;&#10;    @Delete&#10;    suspend fun deleteTemplateExercise(templateExercise: TemplateExercise)&#10;&#10;    @Query(&quot;DELETE FROM template_exercises WHERE templateId = :templateId&quot;)&#10;    suspend fun deleteExercisesForTemplate(templateId: Int): Int&#10;&#10;    @Query(&quot;DELETE FROM template_exercises&quot;)&#10;    suspend fun deleteAll(): Int&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM template_exercises WHERE templateId = :templateId&quot;)&#10;    suspend fun getExerciseCountForTemplate(templateId: Int): Int&#10;&#10;    @Query(&quot;SELECT MAX(orderIndex) FROM template_exercises WHERE templateId = :templateId&quot;)&#10;    suspend fun getMaxOrderIndexForTemplate(templateId: Int): Int?&#10;&#10;    @Query(&quot;UPDATE template_exercises SET orderIndex = orderIndex - 1 WHERE templateId = :templateId AND orderIndex &gt; :deletedIndex&quot;)&#10;    suspend fun reorderAfterDeletion(templateId: Int, deletedIndex: Int)&#10;}&#10;&#10;/**&#10; * Data class for template exercises with exercise details&#10; */&#10;data class TemplateExerciseWithDetails(&#10;    val id: Int,&#10;    val templateId: Int,&#10;    val exerciseId: Int,&#10;    val orderIndex: Int,&#10;    val sets: Int,&#10;    val reps: Int,&#10;    val restSeconds: Int,&#10;    val weight: Double,&#10;    val notes: String,&#10;    val isSuperset: Boolean,&#10;    val supersetGroup: Int,&#10;    val exerciseName: String,&#10;    val primaryMuscle: String,&#10;    val equipment: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/dao/WorkoutTemplateDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/dao/WorkoutTemplateDao.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.data.dao&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Insert&#10;import androidx.room.Query&#10;import androidx.room.Update&#10;import androidx.room.Delete&#10;import com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Data Access Object for WorkoutTemplate operations&#10; */&#10;@Dao&#10;interface WorkoutTemplateDao {&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE isActive = 1 ORDER BY category, name&quot;)&#10;    fun getAllActiveTemplates(): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE category = :category AND isActive = 1 ORDER BY name&quot;)&#10;    fun getTemplatesByCategory(category: String): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE id = :templateId&quot;)&#10;    suspend fun getTemplateById(templateId: Int): WorkoutTemplate?&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE category = :category AND difficulty = :difficulty AND isActive = 1&quot;)&#10;    suspend fun getTemplatesByCategoryAndDifficulty(category: String, difficulty: String): List&lt;WorkoutTemplate&gt;&#10;&#10;    @Insert&#10;    suspend fun insertTemplate(template: WorkoutTemplate): Long&#10;&#10;    @Insert&#10;    suspend fun insertTemplates(templates: List&lt;WorkoutTemplate&gt;)&#10;&#10;    @Update&#10;    suspend fun updateTemplate(template: WorkoutTemplate)&#10;&#10;    @Delete&#10;    suspend fun deleteTemplate(template: WorkoutTemplate)&#10;&#10;    @Query(&quot;DELETE FROM workout_templates&quot;)&#10;    suspend fun deleteAll(): Int&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM workout_templates&quot;)&#10;    suspend fun getTemplateCount(): Int&#10;&#10;    @Query(&quot;UPDATE workout_templates SET lastUsedDate = :date WHERE id = :templateId&quot;)&#10;    suspend fun updateLastUsedDate(templateId: Int, date: String)&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE isCustom = 1 AND isActive = 1 ORDER BY name&quot;)&#10;    fun getCustomTemplates(): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM workout_templates WHERE isCustom = 0 AND isActive = 1 ORDER BY category, name&quot;)&#10;    fun getPredefinedTemplates(): Flow&lt;List&lt;WorkoutTemplate&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/entity/TemplateExercise.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/entity/TemplateExercise.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.data.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import androidx.room.ForeignKey&#10;&#10;/**&#10; * Template Exercise Junction Entity - Links exercises to workout templates&#10; * &#10; * This entity defines which exercises belong to each template and their configuration&#10; * (sets, reps, rest periods, order). This allows for flexible template composition.&#10; */&#10;@Entity(&#10;    tableName = &quot;template_exercises&quot;,&#10;    foreignKeys = [&#10;        ForeignKey(&#10;            entity = WorkoutTemplate::class,&#10;            parentColumns = [&quot;id&quot;],&#10;            childColumns = [&quot;templateId&quot;],&#10;            onDelete = ForeignKey.CASCADE&#10;        ),&#10;        ForeignKey(&#10;            entity = Exercise::class,&#10;            parentColumns = [&quot;id&quot;],&#10;            childColumns = [&quot;exerciseId&quot;],&#10;            onDelete = ForeignKey.CASCADE&#10;        )&#10;    ]&#10;)&#10;data class TemplateExercise(&#10;    @PrimaryKey(autoGenerate = true) &#10;    val id: Int = 0,&#10;    &#10;    val templateId: Int,           // FK to workout_templates&#10;    val exerciseId: Int,           // FK to exercises&#10;    val orderIndex: Int,           // Exercise order in template (0, 1, 2, etc.)&#10;    val sets: Int,                 // Default sets for this exercise in this template&#10;    val reps: Int,                 // Default reps for this exercise&#10;    val restSeconds: Int,          // Recommended rest between sets (in seconds)&#10;    &#10;    // Optional fields for advanced configurations&#10;    val weight: Double = 0.0,      // Suggested starting weight (if applicable)&#10;    val notes: String = &quot;&quot;,        // Exercise-specific notes for this template&#10;    val isSuperset: Boolean = false, // For future superset implementation&#10;    val supersetGroup: Int = 0     // Group ID for supersets (0 = no superset)&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/repository/WorkoutRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/data/repository/WorkoutRepository.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp.data.repository&#10;&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutDayDao&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryDao&#10;import com.example.offlinepplworkoutapp.data.dao.SetEntryDao&#10;import com.example.offlinepplworkoutapp.data.entity.WorkoutDay&#10;import com.example.offlinepplworkoutapp.data.entity.WorkoutEntry&#10;import com.example.offlinepplworkoutapp.data.entity.SetEntry&#10;import kotlinx.coroutines.flow.Flow&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class WorkoutRepository(&#10;    private val workoutDayDao: WorkoutDayDao,&#10;    private val workoutEntryDao: WorkoutEntryDao,&#10;    private val setEntryDao: SetEntryDao&#10;) {&#10;&#10;    private val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;&#10;    suspend fun getTodaysWorkout(): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val today = dateFormat.format(Date())&#10;        val workoutDay = getOrCreateWorkoutDay(today)&#10;        return workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;    }&#10;&#10;    suspend fun getWorkoutForDate(date: String): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val workoutDay = getOrCreateWorkoutDay(date)&#10;        return workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;    }&#10;&#10;    private suspend fun getOrCreateWorkoutDay(date: String): WorkoutDay {&#10;        return workoutDayDao.getWorkoutDayByDate(date)&#10;            ?: createWorkoutDayWithExercises(date)&#10;    }&#10;&#10;    private suspend fun createWorkoutDayWithExercises(date: String): WorkoutDay {&#10;        // Create workout day&#10;        val workoutDay = WorkoutDay(date = date)&#10;        val dayId = workoutDayDao.insert(workoutDay).toInt()&#10;        val createdDay = workoutDay.copy(id = dayId)&#10;&#10;        // Determine workout type based on date&#10;        val workoutType = getWorkoutTypeForDate(date)&#10;        val exercises = getExercisesForWorkoutType(workoutType)&#10;&#10;        // Debug logging to see what's happening&#10;        println(&quot;DEBUG: Creating workout for date: $date, type: $workoutType, exercises count: ${exercises.size}&quot;)&#10;&#10;        // Only create entries if we have exercises for this workout type&#10;        if (exercises.isNotEmpty()) {&#10;            // Create workout entries&#10;            val entries = exercises.map { (exerciseId, sets, reps) -&gt;&#10;                WorkoutEntry(&#10;                    dayId = dayId,&#10;                    exerciseId = exerciseId,&#10;                    sets = sets,&#10;                    reps = reps&#10;                )&#10;            }&#10;&#10;            workoutEntryDao.insertAll(entries)&#10;            println(&quot;DEBUG: Inserted ${entries.size} workout entries for day $date&quot;)&#10;&#10;            //  FIX: Create sets for each workout entry immediately&#10;            // Since we just inserted the entries, we can use the entries we created&#10;            // and get their IDs after insertion&#10;            val insertedEntries = workoutEntryDao.getWorkoutEntriesForDaySync(dayId)&#10;            println(&quot; REPO: Retrieved ${insertedEntries.size} inserted entries to create sets&quot;)&#10;&#10;            for (entry in insertedEntries) {&#10;                println(&quot; REPO: Creating sets for WorkoutEntry ID=${entry.id}, Exercise='${entry.exerciseName}', Sets=${entry.sets}&quot;)&#10;                // Create individual sets for each exercise&#10;                createSetsForWorkoutEntry(entry.id, entry.sets)&#10;                println(&quot; REPO: Created ${entry.sets} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;&#10;                // Verify sets were created&#10;                val createdSets = setEntryDao.getSetsForWorkoutEntrySync(entry.id)&#10;                println(&quot; REPO: Verification - Found ${createdSets.size} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;                createdSets.forEach { set -&gt;&#10;                    println(&quot; REPO: Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}&quot;)&#10;                }&#10;            }&#10;&#10;            println(&quot; REPO: All sets created for ${insertedEntries.size} exercises&quot;)&#10;        } else {&#10;            println(&quot;DEBUG: No exercises found for workout type: $workoutType on date: $date&quot;)&#10;        }&#10;&#10;        return createdDay&#10;    }&#10;&#10;    private fun getWorkoutTypeForDate(date: String): WorkoutType {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.time = dateFormat.parse(date) ?: Date()&#10;        val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) // Sunday = 1, Saturday = 7&#10;&#10;        return when (dayOfWeek) {&#10;            Calendar.MONDAY -&gt; WorkoutType.PUSH_1&#10;            Calendar.TUESDAY -&gt; WorkoutType.PULL_1&#10;            Calendar.WEDNESDAY -&gt; WorkoutType.LEGS_1&#10;            Calendar.THURSDAY -&gt; WorkoutType.PUSH_2&#10;            Calendar.FRIDAY -&gt; WorkoutType.PULL_2&#10;            Calendar.SATURDAY -&gt; WorkoutType.LEGS_2&#10;            Calendar.SUNDAY -&gt; WorkoutType.REST&#10;            else -&gt; WorkoutType.REST&#10;        }&#10;    }&#10;&#10;    private fun getExercisesForWorkoutType(workoutType: WorkoutType): List&lt;Triple&lt;Int, Int, Int&gt;&gt; {&#10;        return when (workoutType) {&#10;            WorkoutType.PUSH_1 -&gt; listOf(&#10;                Triple(1, 4, 8),   // Barbell Bench Press - 4x6-8 reps&#10;                Triple(2, 3, 10),  // Standing Overhead Press - 3x8-10 reps&#10;                Triple(3, 3, 12),  // Incline Dumbbell Press - 3x8-12 reps&#10;                Triple(4, 3, 15),  // Dumbbell Lateral Raise - 3x12-15 reps&#10;                Triple(5, 3, 12)   // Cable Triceps Pushdown - 3x10-12 reps&#10;            )&#10;            WorkoutType.PULL_1 -&gt; listOf(&#10;                Triple(6, 3, 8),   // Deadlift - 3x5-8 reps&#10;                Triple(7, 3, 10),  // Pull-Ups or Lat Pulldowns - 3x8-10 reps&#10;                Triple(8, 3, 12),  // Bent-Over Barbell Row - 3x8-12 reps&#10;                Triple(9, 3, 15),  // Face Pull - 3x12-15 reps&#10;                Triple(10, 3, 12), // Barbell Biceps Curl - 3x8-12 reps&#10;                Triple(11, 2, 12)  // Hammer Curl - 2x10-12 reps&#10;            )&#10;            WorkoutType.LEGS_1 -&gt; listOf(&#10;                Triple(12, 4, 8),  // Back Squat - 4x6-8 reps&#10;                Triple(13, 3, 12), // Romanian Deadlift - 3x8-12 reps&#10;                Triple(14, 3, 12), // Leg Press - 3x10-12 reps&#10;                Triple(15, 3, 12), // Lying Leg Curl - 3x10-12 reps&#10;                Triple(16, 4, 15)  // Seated Calf Raise - 4x12-15 reps&#10;            )&#10;            WorkoutType.PUSH_2 -&gt; listOf(&#10;                Triple(17, 4, 8),  // Standing Overhead Press - 4x6-8 reps&#10;                Triple(18, 3, 12), // Incline Barbell Press - 3x8-12 reps&#10;                Triple(19, 3, 10), // Weighted Dips - 3x8-10 reps&#10;                Triple(20, 3, 15), // Cable Lateral Raise - 3x12-15 reps&#10;                Triple(21, 3, 15), // Pec Deck or Dumbbell Fly - 3x12-15 reps&#10;                Triple(22, 3, 12)  // Overhead Cable Triceps Extension - 3x10-12 reps&#10;            )&#10;            WorkoutType.PULL_2 -&gt; listOf(&#10;                Triple(23, 4, 10), // Pendlay or Bent-Over Row - 4x6-10 reps&#10;                Triple(24, 3, 12), // Weighted Pull-Ups or Wide-Grip Lat Pulldown - 3x8-12 reps&#10;                Triple(25, 3, 12), // Dumbbell Shrug - 3x10-12 reps&#10;                Triple(26, 3, 15), // Face Pull - 3x12-15 reps&#10;                Triple(27, 3, 12), // EZ-Bar Biceps Curl - 3x8-12 reps&#10;                Triple(28, 2, 12)  // Reverse Grip or Preacher Curl - 2x10-12 reps&#10;            )&#10;            WorkoutType.LEGS_2 -&gt; listOf(&#10;                Triple(29, 4, 8),  // Front Squat - 4x6-8 reps&#10;                Triple(30, 3, 10), // Bulgarian Split Squat - 3x8-10 reps (each leg)&#10;                Triple(31, 3, 12), // Barbell Hip Thrust - 3x10-12 reps&#10;                Triple(32, 3, 15), // Leg Extension - 3x12-15 reps&#10;                Triple(33, 3, 15), // Seated or Lying Leg Curl - 3x12-15 reps&#10;                Triple(34, 4, 15)  // Standing Calf Raise - 4x12-15 reps&#10;            )&#10;            WorkoutType.REST -&gt; emptyList()&#10;        }&#10;    }&#10;&#10;    suspend fun updateWorkoutEntry(entry: WorkoutEntry) {&#10;        workoutEntryDao.update(entry)&#10;    }&#10;&#10;    suspend fun toggleExerciseCompletion(entryId: Int) {&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        entry?.let {&#10;            val updatedEntry = it.copy(isCompleted = !it.isCompleted)&#10;            workoutEntryDao.update(updatedEntry)&#10;        }&#10;    }&#10;&#10;    suspend fun markExerciseComplete(entryId: Int, isCompleted: Boolean) {&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        entry?.let {&#10;            val updatedEntry = it.copy(isCompleted = isCompleted)&#10;            workoutEntryDao.update(updatedEntry)&#10;        }&#10;    }&#10;&#10;    suspend fun updateExerciseDetails(entryId: Int, sets: Int, reps: Int, isCompleted: Boolean) {&#10;        println(&quot;️ REPO: Updating exercise details - entryId: $entryId, sets: $sets, reps: $reps, isCompleted: $isCompleted&quot;)&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        entry?.let {&#10;            println(&quot;️ REPO: Found entry - id: ${it.id}, exerciseId: ${it.exerciseId}, current isCompleted: ${it.isCompleted}&quot;)&#10;            val updatedEntry = it.copy(sets = sets, reps = reps, isCompleted = isCompleted)&#10;            workoutEntryDao.update(updatedEntry)&#10;            println(&quot;️ REPO: Updated entry - id: ${updatedEntry.id}, new isCompleted: ${updatedEntry.isCompleted}&quot;)&#10;        } ?: run {&#10;            println(&quot;️ REPO ERROR: No entry found for entryId: $entryId&quot;)&#10;        }&#10;    }&#10;&#10;    suspend fun updateExerciseTime(entryId: Int, totalSecondsSpent: Int) {&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        entry?.let {&#10;            val updatedEntry = it.copy(totalSecondsSpent = totalSecondsSpent)&#10;            workoutEntryDao.update(updatedEntry)&#10;        }&#10;    }&#10;&#10;    suspend fun startExerciseTimer(entryId: Int): Boolean {&#10;        // Mark exercise as started but not completed&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        return entry != null&#10;    }&#10;&#10;    // New methods for set-based operations&#10;    suspend fun getSetsForWorkoutEntry(workoutEntryId: Int): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.entity.SetEntry&gt;&gt; {&#10;        return setEntryDao.getSetsForWorkoutEntry(workoutEntryId)&#10;    }&#10;&#10;    suspend fun getSetsForWorkoutEntrySync(workoutEntryId: Int): List&lt;com.example.offlinepplworkoutapp.data.entity.SetEntry&gt; {&#10;        return setEntryDao.getSetsForWorkoutEntrySync(workoutEntryId)&#10;    }&#10;&#10;    suspend fun getCompletedSetsCount(workoutEntryId: Int): Int {&#10;        return setEntryDao.getCompletedSetsCount(workoutEntryId)&#10;    }&#10;&#10;    suspend fun updateSetProgress(setId: Int, isCompleted: Boolean, elapsedTimeSeconds: Int) {&#10;        val completedAt = if (isCompleted) System.currentTimeMillis() else null&#10;        setEntryDao.updateSetProgress(setId, isCompleted, elapsedTimeSeconds, completedAt)&#10;    }&#10;&#10;    suspend fun createSetsForWorkoutEntry(workoutEntryId: Int, totalSets: Int) {&#10;        val sets = (1..totalSets).map { setNumber -&gt;&#10;            com.example.offlinepplworkoutapp.data.entity.SetEntry(&#10;                workoutEntryId = workoutEntryId,&#10;                setNumber = setNumber&#10;            )&#10;        }&#10;        setEntryDao.insertAll(sets)&#10;    }&#10;&#10;    // Update exercise completion based on set completion&#10;    suspend fun updateExerciseCompletionFromSets(workoutEntryId: Int) {&#10;        val completedSets = setEntryDao.getCompletedSetsCount(workoutEntryId)&#10;        val totalSets = setEntryDao.getTotalSetsCount(workoutEntryId)&#10;&#10;        if (completedSets == totalSets &amp;&amp; totalSets &gt; 0) {&#10;            // Mark exercise as completed&#10;            val workoutEntry = workoutEntryDao.getWorkoutEntryById(workoutEntryId)&#10;            workoutEntry?.let {&#10;                workoutEntryDao.update(it.copy(isCompleted = true))&#10;            }&#10;        }&#10;    }&#10;&#10;    // New method that doesn't auto-create workout data&#10;    suspend fun getTodaysWorkoutWithoutCreating(): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val today = dateFormat.format(Date())&#10;        val workoutDay = workoutDayDao.getWorkoutDayByDate(today)&#10;        return if (workoutDay != null) {&#10;            workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;        } else {&#10;            kotlinx.coroutines.flow.flowOf(emptyList()) // Return empty list if no workout day exists&#10;        }&#10;    }&#10;&#10;    suspend fun getWorkoutForDateWithoutCreating(date: String): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val workoutDay = workoutDayDao.getWorkoutDayByDate(date)&#10;        return if (workoutDay != null) {&#10;            workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;        } else {&#10;            kotlinx.coroutines.flow.flowOf(emptyList()) // Return empty list if no workout day exists&#10;        }&#10;    }&#10;&#10;    // Method to manually create today's workout (called when user wants to start workout)&#10;    suspend fun createTodaysWorkout(): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val today = dateFormat.format(Date())&#10;        println(&quot; REPO: Creating today's workout for date: $today&quot;)&#10;&#10;        // First, ensure exercises exist in the database&#10;        val exerciseCount = workoutEntryDao.getWorkoutEntryCount() // This will check if ANY entries exist&#10;        println(&quot; REPO: Checking if exercises are populated in database...&quot;)&#10;&#10;        // Check if we have the basic exercise data&#10;        val hasExercises = try {&#10;            val exerciseDao = (workoutEntryDao as? Any) // We need to get exerciseDao reference&#10;            // For now, let's try to insert the workout and catch the foreign key error&#10;            true&#10;        } catch (e: Exception) {&#10;            false&#10;        }&#10;&#10;        // Check if workout day already exists&#10;        val existingWorkoutDay = workoutDayDao.getWorkoutDayByDate(today)&#10;&#10;        if (existingWorkoutDay != null) {&#10;            println(&quot; REPO: Found existing workout day with ID: ${existingWorkoutDay.id}&quot;)&#10;&#10;            // Check if it has exercises using count method&#10;            val existingEntriesCount = workoutEntryDao.getWorkoutEntryCountForDay(existingWorkoutDay.id)&#10;            println(&quot; REPO: Existing day has $existingEntriesCount exercises&quot;)&#10;&#10;            if (existingEntriesCount == 0) {&#10;                println(&quot; REPO: No exercises found, creating them now...&quot;)&#10;                // Day exists but has no exercises, create them&#10;                val workoutType = getWorkoutTypeForDate(today)&#10;                val exercises = getExercisesForWorkoutType(workoutType)&#10;                println(&quot; REPO: Got ${exercises.size} exercises for workout type: $workoutType&quot;)&#10;&#10;                if (exercises.isNotEmpty()) {&#10;                    try {&#10;                        val entries = exercises.map { (exerciseId, sets, reps) -&gt;&#10;                            WorkoutEntry(&#10;                                dayId = existingWorkoutDay.id,&#10;                                exerciseId = exerciseId,&#10;                                sets = sets,&#10;                                reps = reps&#10;                            )&#10;                        }&#10;                        workoutEntryDao.insertAll(entries)&#10;                        println(&quot; REPO: Inserted ${entries.size} workout entries&quot;)&#10;&#10;                        //  FIX: Create sets for each workout entry immediately&#10;                        val insertedEntries = workoutEntryDao.getWorkoutEntriesForDaySync(existingWorkoutDay.id)&#10;                        println(&quot; REPO: Retrieved ${insertedEntries.size} inserted entries to create sets&quot;)&#10;&#10;                        for (entry in insertedEntries) {&#10;                            println(&quot; REPO: Creating sets for WorkoutEntry ID=${entry.id}, Exercise='${entry.exerciseName}', Sets=${entry.sets}&quot;)&#10;                            // Create individual sets for each exercise&#10;                            createSetsForWorkoutEntry(entry.id, entry.sets)&#10;                            println(&quot; REPO: Created ${entry.sets} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;&#10;                            // Verify sets were created&#10;                            val createdSets = setEntryDao.getSetsForWorkoutEntrySync(entry.id)&#10;                            println(&quot; REPO: Verification - Found ${createdSets.size} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;                            createdSets.forEach { set -&gt;&#10;                                println(&quot; REPO: Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}&quot;)&#10;                            }&#10;                        }&#10;&#10;                        println(&quot; REPO: All sets created for ${insertedEntries.size} exercises&quot;)&#10;                      } catch (e: Exception) {&#10;                        println(&quot; REPO ERROR: Failed to insert workout entries - ${e.message}&quot;)&#10;                        // If foreign key constraint fails, we need to populate exercises first&#10;                        if (e.message?.contains(&quot;FOREIGN KEY constraint failed&quot;) == true) {&#10;                            println(&quot; REPO: Exercise data missing, need to populate exercises first&quot;)&#10;                            throw e // Re-throw to be caught by ViewModel&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } else {&#10;            println(&quot; REPO: No existing workout day, creating new one...&quot;)&#10;            // Force create the workout day and exercises&#10;            val workoutDay = createWorkoutDayWithExercises(today)&#10;            println(&quot; REPO: Created new workout day with ID: ${workoutDay.id}&quot;)&#10;        }&#10;&#10;        // Get the final workout day (either existing or newly created)&#10;        val finalWorkoutDay = workoutDayDao.getWorkoutDayByDate(today)!!&#10;        println(&quot; REPO: Final workout day ID: ${finalWorkoutDay.id}&quot;)&#10;&#10;        // Return the flow of workout entries&#10;        return workoutEntryDao.getWorkoutEntriesForDay(finalWorkoutDay.id)&#10;    }&#10;}&#10;&#10;enum class WorkoutType {&#10;    PUSH_1, PULL_1, LEGS_1, PUSH_2, PULL_2, LEGS_2, REST&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.data.repository&#10;&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutDayDao&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryDao&#10;import com.example.offlinepplworkoutapp.data.dao.SetEntryDao&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutTemplateDao&#10;import com.example.offlinepplworkoutapp.data.dao.TemplateExerciseDao&#10;import com.example.offlinepplworkoutapp.data.entity.WorkoutDay&#10;import com.example.offlinepplworkoutapp.data.entity.WorkoutEntry&#10;import com.example.offlinepplworkoutapp.data.entity.SetEntry&#10;import com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate&#10;import com.example.offlinepplworkoutapp.data.PPLTemplateData&#10;import kotlinx.coroutines.flow.Flow&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class WorkoutRepository(&#10;    private val workoutDayDao: WorkoutDayDao,&#10;    private val workoutEntryDao: WorkoutEntryDao,&#10;    private val setEntryDao: SetEntryDao,&#10;    private val workoutTemplateDao: WorkoutTemplateDao,&#10;    private val templateExerciseDao: TemplateExerciseDao&#10;) {&#10;&#10;    private val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;&#10;    // ===========================================&#10;    // TEMPLATE-BASED WORKOUT CREATION (NEW)&#10;    // ===========================================&#10;&#10;    /**&#10;     * Create workout from template - Main template-based workout creation method&#10;     * This replaces the hardcoded day-based logic with flexible template system&#10;     */&#10;    suspend fun createWorkoutFromTemplate(templateId: Int, date: String): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        println(&quot; REPO: Creating workout from template $templateId for date: $date&quot;)&#10;        &#10;        // Get or create workout day&#10;        val workoutDay = getOrCreateWorkoutDayOnly(date)&#10;        &#10;        // Check if this day already has exercises&#10;        val existingEntries = workoutEntryDao.getWorkoutEntriesForDaySync(workoutDay.id)&#10;        if (existingEntries.isNotEmpty()) {&#10;            println(&quot; REPO: Found existing workout day with ${existingEntries.size} exercises&quot;)&#10;            return workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;        }&#10;&#10;        // Get template exercises&#10;        val templateExercises = templateExerciseDao.getExercisesForTemplate(templateId)&#10;        println(&quot; REPO: Got ${templateExercises.size} exercises for template $templateId&quot;)&#10;&#10;        if (templateExercises.isNotEmpty()) {&#10;            // Create workout entries from template&#10;            val entries = templateExercises.map { templateExercise -&gt;&#10;                WorkoutEntry(&#10;                    dayId = workoutDay.id,&#10;                    exerciseId = templateExercise.exerciseId,&#10;                    sets = templateExercise.sets,&#10;                    reps = templateExercise.reps&#10;                )&#10;            }&#10;&#10;            workoutEntryDao.insertAll(entries)&#10;            println(&quot; REPO: Inserted ${entries.size} workout entries from template&quot;)&#10;&#10;            // Create sets for each workout entry&#10;            val insertedEntries = workoutEntryDao.getWorkoutEntriesForDaySync(workoutDay.id)&#10;            createSetsForEntries(insertedEntries)&#10;&#10;            // Update template last used date&#10;            workoutTemplateDao.updateLastUsedDate(templateId, date)&#10;        }&#10;&#10;        return workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;    }&#10;&#10;    /**&#10;     * Create today's workout using template-based system&#10;     * Automatically determines which template to use based on day of week&#10;     */&#10;    suspend fun createTodaysWorkoutFromTemplate(): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val today = dateFormat.format(Date())&#10;        val templateId = getTemplateIdForDate(today)&#10;        &#10;        return if (templateId &gt; 0) {&#10;            createWorkoutFromTemplate(templateId, today)&#10;        } else {&#10;            // Rest day - return empty workout&#10;            println(&quot; REPO: Rest day - no template needed&quot;)&#10;            workoutEntryDao.getWorkoutEntriesForDay(0) // Returns empty flow&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get template ID for a given date based on day of week&#10;     * This maintains compatibility with current PPL schedule&#10;     */&#10;    private fun getTemplateIdForDate(date: String): Int {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.time = dateFormat.parse(date) ?: Date()&#10;        val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)&#10;        &#10;        return PPLTemplateData.getTemplateIdForDayOfWeek(dayOfWeek)&#10;    }&#10;&#10;    /**&#10;     * Get available templates for user selection&#10;     */&#10;    fun getAvailableTemplates(): Flow&lt;List&lt;WorkoutTemplate&gt;&gt; {&#10;        return workoutTemplateDao.getAllActiveTemplates()&#10;    }&#10;&#10;    /**&#10;     * Get templates by category (Push/Pull/Legs)&#10;     */&#10;    fun getTemplatesByCategory(category: String): Flow&lt;List&lt;WorkoutTemplate&gt;&gt; {&#10;        return workoutTemplateDao.getTemplatesByCategory(category)&#10;    }&#10;&#10;    // ===========================================&#10;    // LEGACY DAY-BASED METHODS (PRESERVED)&#10;    // ===========================================&#10;&#10;    suspend fun getTodaysWorkout(): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val today = dateFormat.format(Date())&#10;        val workoutDay = getOrCreateWorkoutDay(today)&#10;        return workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;    }&#10;&#10;    suspend fun getWorkoutForDate(date: String): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val workoutDay = getOrCreateWorkoutDay(date)&#10;        return workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;    }&#10;&#10;    private suspend fun getOrCreateWorkoutDay(date: String): WorkoutDay {&#10;        return workoutDayDao.getWorkoutDayByDate(date)&#10;            ?: createWorkoutDayWithExercises(date)&#10;    }&#10;&#10;    private suspend fun createWorkoutDayWithExercises(date: String): WorkoutDay {&#10;        // Create workout day&#10;        val workoutDay = WorkoutDay(date = date)&#10;        val dayId = workoutDayDao.insert(workoutDay).toInt()&#10;        val createdDay = workoutDay.copy(id = dayId)&#10;&#10;        // Determine workout type based on date&#10;        val workoutType = getWorkoutTypeForDate(date)&#10;        val exercises = getExercisesForWorkoutType(workoutType)&#10;&#10;        // Debug logging to see what's happening&#10;        println(&quot;DEBUG: Creating workout for date: $date, type: $workoutType, exercises count: ${exercises.size}&quot;)&#10;&#10;        // Only create entries if we have exercises for this workout type&#10;        if (exercises.isNotEmpty()) {&#10;            // Create workout entries&#10;            val entries = exercises.map { (exerciseId, sets, reps) -&gt;&#10;                WorkoutEntry(&#10;                    dayId = dayId,&#10;                    exerciseId = exerciseId,&#10;                    sets = sets,&#10;                    reps = reps&#10;                )&#10;            }&#10;&#10;            workoutEntryDao.insertAll(entries)&#10;            println(&quot;DEBUG: Inserted ${entries.size} workout entries for day $date&quot;)&#10;&#10;            //  FIX: Create sets for each workout entry immediately&#10;            // Since we just inserted the entries, we can use the entries we created&#10;            // and get their IDs after insertion&#10;            val insertedEntries = workoutEntryDao.getWorkoutEntriesForDaySync(dayId)&#10;            println(&quot; REPO: Retrieved ${insertedEntries.size} inserted entries to create sets&quot;)&#10;&#10;            for (entry in insertedEntries) {&#10;                println(&quot; REPO: Creating sets for WorkoutEntry ID=${entry.id}, Exercise='${entry.exerciseName}', Sets=${entry.sets}&quot;)&#10;                // Create individual sets for each exercise&#10;                createSetsForWorkoutEntry(entry.id, entry.sets)&#10;                println(&quot; REPO: Created ${entry.sets} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;&#10;                // Verify sets were created&#10;                val createdSets = setEntryDao.getSetsForWorkoutEntrySync(entry.id)&#10;                println(&quot; REPO: Verification - Found ${createdSets.size} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;                createdSets.forEach { set -&gt;&#10;                    println(&quot; REPO: Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}&quot;)&#10;                }&#10;            }&#10;&#10;            println(&quot; REPO: All sets created for ${insertedEntries.size} exercises&quot;)&#10;        } else {&#10;            println(&quot;DEBUG: No exercises found for workout type: $workoutType on date: $date&quot;)&#10;        }&#10;&#10;        return createdDay&#10;    }&#10;&#10;    private fun getWorkoutTypeForDate(date: String): WorkoutType {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.time = dateFormat.parse(date) ?: Date()&#10;        val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) // Sunday = 1, Saturday = 7&#10;&#10;        return when (dayOfWeek) {&#10;            Calendar.MONDAY -&gt; WorkoutType.PUSH_1&#10;            Calendar.TUESDAY -&gt; WorkoutType.PULL_1&#10;            Calendar.WEDNESDAY -&gt; WorkoutType.LEGS_1&#10;            Calendar.THURSDAY -&gt; WorkoutType.PUSH_2&#10;            Calendar.FRIDAY -&gt; WorkoutType.PULL_2&#10;            Calendar.SATURDAY -&gt; WorkoutType.LEGS_2&#10;            Calendar.SUNDAY -&gt; WorkoutType.REST&#10;            else -&gt; WorkoutType.REST&#10;        }&#10;    }&#10;&#10;    private fun getExercisesForWorkoutType(workoutType: WorkoutType): List&lt;Triple&lt;Int, Int, Int&gt;&gt; {&#10;        return when (workoutType) {&#10;            WorkoutType.PUSH_1 -&gt; listOf(&#10;                Triple(1, 4, 8),   // Barbell Bench Press - 4x6-8 reps&#10;                Triple(2, 3, 10),  // Standing Overhead Press - 3x8-10 reps&#10;                Triple(3, 3, 12),  // Incline Dumbbell Press - 3x8-12 reps&#10;                Triple(4, 3, 15),  // Dumbbell Lateral Raise - 3x12-15 reps&#10;                Triple(5, 3, 12)   // Cable Triceps Pushdown - 3x10-12 reps&#10;            )&#10;            WorkoutType.PULL_1 -&gt; listOf(&#10;                Triple(6, 3, 8),   // Deadlift - 3x5-8 reps&#10;                Triple(7, 3, 10),  // Pull-Ups or Lat Pulldowns - 3x8-10 reps&#10;                Triple(8, 3, 12),  // Bent-Over Barbell Row - 3x8-12 reps&#10;                Triple(9, 3, 15),  // Face Pull - 3x12-15 reps&#10;                Triple(10, 3, 12), // Barbell Biceps Curl - 3x8-12 reps&#10;                Triple(11, 2, 12)  // Hammer Curl - 2x10-12 reps&#10;            )&#10;            WorkoutType.LEGS_1 -&gt; listOf(&#10;                Triple(12, 4, 8),  // Back Squat - 4x6-8 reps&#10;                Triple(13, 3, 12), // Romanian Deadlift - 3x8-12 reps&#10;                Triple(14, 3, 12), // Leg Press - 3x10-12 reps&#10;                Triple(15, 3, 12), // Lying Leg Curl - 3x10-12 reps&#10;                Triple(16, 4, 15)  // Seated Calf Raise - 4x12-15 reps&#10;            )&#10;            WorkoutType.PUSH_2 -&gt; listOf(&#10;                Triple(17, 4, 8),  // Standing Overhead Press - 4x6-8 reps&#10;                Triple(18, 3, 12), // Incline Barbell Press - 3x8-12 reps&#10;                Triple(19, 3, 10), // Weighted Dips - 3x8-10 reps&#10;                Triple(20, 3, 15), // Cable Lateral Raise - 3x12-15 reps&#10;                Triple(21, 3, 15), // Pec Deck or Dumbbell Fly - 3x12-15 reps&#10;                Triple(22, 3, 12)  // Overhead Cable Triceps Extension - 3x10-12 reps&#10;            )&#10;            WorkoutType.PULL_2 -&gt; listOf(&#10;                Triple(23, 4, 10), // Pendlay or Bent-Over Row - 4x6-10 reps&#10;                Triple(24, 3, 12), // Weighted Pull-Ups or Wide-Grip Lat Pulldown - 3x8-12 reps&#10;                Triple(25, 3, 12), // Dumbbell Shrug - 3x10-12 reps&#10;                Triple(26, 3, 15), // Face Pull - 3x12-15 reps&#10;                Triple(27, 3, 12), // EZ-Bar Biceps Curl - 3x8-12 reps&#10;                Triple(28, 2, 12)  // Reverse Grip or Preacher Curl - 2x10-12 reps&#10;            )&#10;            WorkoutType.LEGS_2 -&gt; listOf(&#10;                Triple(29, 4, 8),  // Front Squat - 4x6-8 reps&#10;                Triple(30, 3, 10), // Bulgarian Split Squat - 3x8-10 reps (each leg)&#10;                Triple(31, 3, 12), // Barbell Hip Thrust - 3x10-12 reps&#10;                Triple(32, 3, 15), // Leg Extension - 3x12-15 reps&#10;                Triple(33, 3, 15), // Seated or Lying Leg Curl - 3x12-15 reps&#10;                Triple(34, 4, 15)  // Standing Calf Raise - 4x12-15 reps&#10;            )&#10;            WorkoutType.REST -&gt; emptyList()&#10;        }&#10;    }&#10;&#10;    suspend fun updateWorkoutEntry(entry: WorkoutEntry) {&#10;        workoutEntryDao.update(entry)&#10;    }&#10;&#10;    suspend fun toggleExerciseCompletion(entryId: Int) {&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        entry?.let {&#10;            val updatedEntry = it.copy(isCompleted = !it.isCompleted)&#10;            workoutEntryDao.update(updatedEntry)&#10;        }&#10;    }&#10;&#10;    suspend fun markExerciseComplete(entryId: Int, isCompleted: Boolean) {&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        entry?.let {&#10;            val updatedEntry = it.copy(isCompleted = isCompleted)&#10;            workoutEntryDao.update(updatedEntry)&#10;        }&#10;    }&#10;&#10;    suspend fun updateExerciseDetails(entryId: Int, sets: Int, reps: Int, isCompleted: Boolean) {&#10;        println(&quot;️ REPO: Updating exercise details - entryId: $entryId, sets: $sets, reps: $reps, isCompleted: $isCompleted&quot;)&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        entry?.let {&#10;            println(&quot;️ REPO: Found entry - id: ${it.id}, exerciseId: ${it.exerciseId}, current isCompleted: ${it.isCompleted}&quot;)&#10;            val updatedEntry = it.copy(sets = sets, reps = reps, isCompleted = isCompleted)&#10;            workoutEntryDao.update(updatedEntry)&#10;            println(&quot;️ REPO: Updated entry - id: ${updatedEntry.id}, new isCompleted: ${updatedEntry.isCompleted}&quot;)&#10;        } ?: run {&#10;            println(&quot;️ REPO ERROR: No entry found for entryId: $entryId&quot;)&#10;        }&#10;    }&#10;&#10;    suspend fun updateExerciseTime(entryId: Int, totalSecondsSpent: Int) {&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        entry?.let {&#10;            val updatedEntry = it.copy(totalSecondsSpent = totalSecondsSpent)&#10;            workoutEntryDao.update(updatedEntry)&#10;        }&#10;    }&#10;&#10;    suspend fun startExerciseTimer(entryId: Int): Boolean {&#10;        // Mark exercise as started but not completed&#10;        val entry = workoutEntryDao.getWorkoutEntryById(entryId)&#10;        return entry != null&#10;    }&#10;&#10;    // New methods for set-based operations&#10;    suspend fun getSetsForWorkoutEntry(workoutEntryId: Int): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.entity.SetEntry&gt;&gt; {&#10;        return setEntryDao.getSetsForWorkoutEntry(workoutEntryId)&#10;    }&#10;&#10;    suspend fun getSetsForWorkoutEntrySync(workoutEntryId: Int): List&lt;com.example.offlinepplworkoutapp.data.entity.SetEntry&gt; {&#10;        return setEntryDao.getSetsForWorkoutEntrySync(workoutEntryId)&#10;    }&#10;&#10;    suspend fun getCompletedSetsCount(workoutEntryId: Int): Int {&#10;        return setEntryDao.getCompletedSetsCount(workoutEntryId)&#10;    }&#10;&#10;    suspend fun updateSetProgress(setId: Int, isCompleted: Boolean, elapsedTimeSeconds: Int) {&#10;        val completedAt = if (isCompleted) System.currentTimeMillis() else null&#10;        setEntryDao.updateSetProgress(setId, isCompleted, elapsedTimeSeconds, completedAt)&#10;    }&#10;&#10;    suspend fun createSetsForWorkoutEntry(workoutEntryId: Int, totalSets: Int) {&#10;        val sets = (1..totalSets).map { setNumber -&gt;&#10;            com.example.offlinepplworkoutapp.data.entity.SetEntry(&#10;                workoutEntryId = workoutEntryId,&#10;                setNumber = setNumber&#10;            )&#10;        }&#10;        setEntryDao.insertAll(sets)&#10;    }&#10;&#10;    // Update exercise completion based on set completion&#10;    suspend fun updateExerciseCompletionFromSets(workoutEntryId: Int) {&#10;        val completedSets = setEntryDao.getCompletedSetsCount(workoutEntryId)&#10;        val totalSets = setEntryDao.getTotalSetsCount(workoutEntryId)&#10;&#10;        if (completedSets == totalSets &amp;&amp; totalSets &gt; 0) {&#10;            // Mark exercise as completed&#10;            val workoutEntry = workoutEntryDao.getWorkoutEntryById(workoutEntryId)&#10;            workoutEntry?.let {&#10;                workoutEntryDao.update(it.copy(isCompleted = true))&#10;            }&#10;        }&#10;    }&#10;&#10;    // New method that doesn't auto-create workout data&#10;    suspend fun getTodaysWorkoutWithoutCreating(): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val today = dateFormat.format(Date())&#10;        val workoutDay = workoutDayDao.getWorkoutDayByDate(today)&#10;        return if (workoutDay != null) {&#10;            workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;        } else {&#10;            kotlinx.coroutines.flow.flowOf(emptyList()) // Return empty list if no workout day exists&#10;        }&#10;    }&#10;&#10;    suspend fun getWorkoutForDateWithoutCreating(date: String): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val workoutDay = workoutDayDao.getWorkoutDayByDate(date)&#10;        return if (workoutDay != null) {&#10;            workoutEntryDao.getWorkoutEntriesForDay(workoutDay.id)&#10;        } else {&#10;            kotlinx.coroutines.flow.flowOf(emptyList()) // Return empty list if no workout day exists&#10;        }&#10;    }&#10;&#10;    // Method to manually create today's workout (called when user wants to start workout)&#10;    suspend fun createTodaysWorkout(): Flow&lt;List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;&gt; {&#10;        val today = dateFormat.format(Date())&#10;        println(&quot; REPO: Creating today's workout for date: $today&quot;)&#10;&#10;        // First, ensure exercises exist in the database&#10;        val exerciseCount = workoutEntryDao.getWorkoutEntryCount() // This will check if ANY entries exist&#10;        println(&quot; REPO: Checking if exercises are populated in database...&quot;)&#10;&#10;        // Check if we have the basic exercise data&#10;        val hasExercises = try {&#10;            val exerciseDao = (workoutEntryDao as? Any) // We need to get exerciseDao reference&#10;            // For now, let's try to insert the workout and catch the foreign key error&#10;            true&#10;        } catch (e: Exception) {&#10;            false&#10;        }&#10;&#10;        // Check if workout day already exists&#10;        val existingWorkoutDay = workoutDayDao.getWorkoutDayByDate(today)&#10;&#10;        if (existingWorkoutDay != null) {&#10;            println(&quot; REPO: Found existing workout day with ID: ${existingWorkoutDay.id}&quot;)&#10;&#10;            // Check if it has exercises using count method&#10;            val existingEntriesCount = workoutEntryDao.getWorkoutEntryCountForDay(existingWorkoutDay.id)&#10;            println(&quot; REPO: Existing day has $existingEntriesCount exercises&quot;)&#10;&#10;            if (existingEntriesCount == 0) {&#10;                println(&quot; REPO: No exercises found, creating them now...&quot;)&#10;                // Day exists but has no exercises, create them&#10;                val workoutType = getWorkoutTypeForDate(today)&#10;                val exercises = getExercisesForWorkoutType(workoutType)&#10;                println(&quot; REPO: Got ${exercises.size} exercises for workout type: $workoutType&quot;)&#10;&#10;                if (exercises.isNotEmpty()) {&#10;                    try {&#10;                        val entries = exercises.map { (exerciseId, sets, reps) -&gt;&#10;                            WorkoutEntry(&#10;                                dayId = existingWorkoutDay.id,&#10;                                exerciseId = exerciseId,&#10;                                sets = sets,&#10;                                reps = reps&#10;                            )&#10;                        }&#10;                        workoutEntryDao.insertAll(entries)&#10;                        println(&quot; REPO: Inserted ${entries.size} workout entries&quot;)&#10;&#10;                        //  FIX: Create sets for each workout entry immediately&#10;                        val insertedEntries = workoutEntryDao.getWorkoutEntriesForDaySync(existingWorkoutDay.id)&#10;                        println(&quot; REPO: Retrieved ${insertedEntries.size} inserted entries to create sets&quot;)&#10;&#10;                        for (entry in insertedEntries) {&#10;                            println(&quot; REPO: Creating sets for WorkoutEntry ID=${entry.id}, Exercise='${entry.exerciseName}', Sets=${entry.sets}&quot;)&#10;                            // Create individual sets for each exercise&#10;                            createSetsForWorkoutEntry(entry.id, entry.sets)&#10;                            println(&quot; REPO: Created ${entry.sets} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;&#10;                            // Verify sets were created&#10;                            val createdSets = setEntryDao.getSetsForWorkoutEntrySync(entry.id)&#10;                            println(&quot; REPO: Verification - Found ${createdSets.size} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;                            createdSets.forEach { set -&gt;&#10;                                println(&quot; REPO: Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}&quot;)&#10;                            }&#10;                        }&#10;&#10;                        println(&quot; REPO: All sets created for ${insertedEntries.size} exercises&quot;)&#10;                      } catch (e: Exception) {&#10;                        println(&quot; REPO ERROR: Failed to insert workout entries - ${e.message}&quot;)&#10;                        // If foreign key constraint fails, we need to populate exercises first&#10;                        if (e.message?.contains(&quot;FOREIGN KEY constraint failed&quot;) == true) {&#10;                            println(&quot; REPO: Exercise data missing, need to populate exercises first&quot;)&#10;                            throw e // Re-throw to be caught by ViewModel&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } else {&#10;            println(&quot; REPO: No existing workout day, creating new one...&quot;)&#10;            // Force create the workout day and exercises&#10;            val workoutDay = createWorkoutDayWithExercises(today)&#10;            println(&quot; REPO: Created new workout day with ID: ${workoutDay.id}&quot;)&#10;        }&#10;&#10;        // Get the final workout day (either existing or newly created)&#10;        val finalWorkoutDay = workoutDayDao.getWorkoutDayByDate(today)!!&#10;        println(&quot; REPO: Final workout day ID: ${finalWorkoutDay.id}&quot;)&#10;&#10;        // Return the flow of workout entries&#10;        return workoutEntryDao.getWorkoutEntriesForDay(finalWorkoutDay.id)&#10;    }&#10;&#10;    // ===========================================&#10;    // HELPER METHODS&#10;    // ===========================================&#10;&#10;    /**&#10;     * Create workout day only (without exercises) - used by template system&#10;     */&#10;    private suspend fun getOrCreateWorkoutDayOnly(date: String): WorkoutDay {&#10;        return workoutDayDao.getWorkoutDayByDate(date) ?: run {&#10;            val workoutDay = WorkoutDay(date = date)&#10;            val dayId = workoutDayDao.insert(workoutDay).toInt()&#10;            workoutDay.copy(id = dayId)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Create sets for multiple workout entries - used by template system&#10;     */&#10;    private suspend fun createSetsForEntries(entries: List&lt;com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&gt;) {&#10;        for (entry in entries) {&#10;            println(&quot; REPO: Creating sets for WorkoutEntry ID=${entry.id}, Exercise='${entry.exerciseName}', Sets=${entry.sets}&quot;)&#10;            createSetsForWorkoutEntry(entry.id, entry.sets)&#10;            println(&quot; REPO: Created ${entry.sets} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;&#10;            // Verify sets were created&#10;            val createdSets = setEntryDao.getSetsForWorkoutEntrySync(entry.id)&#10;            println(&quot; REPO: Verification - Found ${createdSets.size} sets for WorkoutEntry ID=${entry.id}&quot;)&#10;            createdSets.forEach { set -&gt;&#10;                println(&quot; REPO: Set ID=${set.id}, SetNumber=${set.setNumber}, WorkoutEntryId=${set.workoutEntryId}&quot;)&#10;            }&#10;        }&#10;        println(&quot; REPO: All sets created for ${entries.size} exercises&quot;)&#10;    }&#10;}&#10;&#10;enum class WorkoutType {&#10;    PUSH_1, PULL_1, LEGS_1, PUSH_2, PULL_2, LEGS_2, REST&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/viewmodel/DailyWorkoutViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/viewmodel/DailyWorkoutViewModel.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.data.database.PPLWorkoutDatabase&#10;import com.example.offlinepplworkoutapp.utils.WorkoutTimer&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import kotlinx.coroutines.Dispatchers&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class DailyWorkoutViewModel(&#10;    private val repository: WorkoutRepository&#10;) : ViewModel() {&#10;&#10;    private val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;&#10;    // Timer functionality&#10;    private val workoutTimer = WorkoutTimer()&#10;    private var timerJob: Job? = null&#10;&#10;    val timerSeconds = workoutTimer.elapsedSeconds&#10;    val isTimerRunning = workoutTimer.isTimerRunning&#10;&#10;    private val _todaysWorkout = MutableStateFlow&lt;List&lt;WorkoutEntryWithExercise&gt;&gt;(emptyList())&#10;    val todaysWorkout: StateFlow&lt;List&lt;WorkoutEntryWithExercise&gt;&gt; = _todaysWorkout.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _currentDate = MutableStateFlow(dateFormat.format(Date()))&#10;    val currentDate: StateFlow&lt;String&gt; = _currentDate.asStateFlow()&#10;&#10;    private val _completionProgress = MutableStateFlow(0f)&#10;    val completionProgress: StateFlow&lt;Float&gt; = _completionProgress.asStateFlow()&#10;&#10;    // Debug mode: allows overriding the current date for testing&#10;    private val _debugDate = MutableStateFlow&lt;String?&gt;(null)&#10;    val debugDate: StateFlow&lt;String?&gt; = _debugDate.asStateFlow()&#10;&#10;    init {&#10;        loadTodaysWorkout()&#10;    }&#10;&#10;    private fun loadTodaysWorkout() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            repository.getTodaysWorkoutWithoutCreating().collect { exercises -&gt;&#10;                _todaysWorkout.value = exercises&#10;                _isLoading.value = false&#10;                updateCompletionProgress(exercises)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadWorkoutForDate(date: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            _currentDate.value = date&#10;            repository.getWorkoutForDateWithoutCreating(date).collect { exercises -&gt;&#10;                _todaysWorkout.value = exercises&#10;                _isLoading.value = false&#10;                updateCompletionProgress(exercises)&#10;            }&#10;        }&#10;    }&#10;&#10;    // New method to create today's workout when user wants to start&#10;    fun createTodaysWorkout() {&#10;        println(&quot; VIEWMODEL: createTodaysWorkout() called&quot;)&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            println(&quot; VIEWMODEL: Starting workout creation process...&quot;)&#10;&#10;            try {&#10;                repository.createTodaysWorkout().collect { exercises -&gt;&#10;                    println(&quot; VIEWMODEL: Received ${exercises.size} exercises from repository&quot;)&#10;                    _todaysWorkout.value = exercises&#10;                    _isLoading.value = false&#10;                    updateCompletionProgress(exercises)&#10;                    println(&quot; VIEWMODEL: Workout creation completed successfully&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                println(&quot; VIEWMODEL ERROR: Failed to create workout - ${e.message}&quot;)&#10;&#10;                // If foreign key constraint failed, try to populate exercises and retry&#10;                if (e.message?.contains(&quot;FOREIGN KEY constraint failed&quot;) == true) {&#10;                    println(&quot; VIEWMODEL: Foreign key error detected, trying to populate exercises...&quot;)&#10;                    try {&#10;                        // Use the database to populate exercises&#10;                        val context = kotlinx.coroutines.Dispatchers.Main.immediate&#10;                        kotlinx.coroutines.withContext(context) {&#10;                            // Force populate exercises through the database&#10;                            PPLWorkoutDatabase.forcePopulateExercises()&#10;&#10;                            // Retry workout creation after populating exercises&#10;                            repository.createTodaysWorkout().collect { exercises -&gt;&#10;                                println(&quot; VIEWMODEL: RETRY - Received ${exercises.size} exercises from repository&quot;)&#10;                                _todaysWorkout.value = exercises&#10;                                _isLoading.value = false&#10;                                updateCompletionProgress(exercises)&#10;                                println(&quot; VIEWMODEL: RETRY - Workout creation completed successfully&quot;)&#10;                            }&#10;                        }&#10;                    } catch (retryException: Exception) {&#10;                        println(&quot; VIEWMODEL ERROR: Retry also failed - ${retryException.message}&quot;)&#10;                        _isLoading.value = false&#10;                    }&#10;                } else {&#10;                    _isLoading.value = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Debug function to simulate different days&#10;    fun setDebugDate(date: String?) {&#10;        _debugDate.value = date&#10;        if (date == null) {&#10;            // Reset to today - use the original loadTodaysWorkout function&#10;            _currentDate.value = dateFormat.format(Date())&#10;            loadTodaysWorkout()&#10;        } else {&#10;            // Load specific debug date&#10;            loadWorkoutForDate(date)&#10;        }&#10;    }&#10;&#10;    fun toggleExerciseCompletion(entryId: Int) {&#10;        viewModelScope.launch {&#10;            repository.toggleExerciseCompletion(entryId)&#10;        }&#10;    }&#10;&#10;    fun markExerciseComplete(entryId: Int, isCompleted: Boolean) {&#10;        viewModelScope.launch {&#10;            repository.markExerciseComplete(entryId, isCompleted)&#10;        }&#10;    }&#10;&#10;    fun updateExercise(entryId: Int, sets: Int, reps: Int, isCompleted: Boolean) {&#10;        println(&quot; VIEWMODEL: updateExercise called - entryId: $entryId, sets: $sets, reps: $reps, isCompleted: $isCompleted&quot;)&#10;        viewModelScope.launch {&#10;            repository.updateExerciseDetails(entryId, sets, reps, isCompleted)&#10;            println(&quot; VIEWMODEL: updateExercise completed for entryId: $entryId&quot;)&#10;        }&#10;    }&#10;&#10;    private fun updateCompletionProgress(exercises: List&lt;WorkoutEntryWithExercise&gt;) {&#10;        if (exercises.isEmpty()) {&#10;            _completionProgress.value = 0f&#10;            return&#10;        }&#10;&#10;        val completedCount = exercises.count { it.isCompleted }&#10;        _completionProgress.value = completedCount.toFloat() / exercises.size.toFloat()&#10;    }&#10;&#10;    fun getCompletionPercentage(): Int {&#10;        return (_completionProgress.value * 100).toInt()&#10;    }&#10;&#10;    fun getCurrentDayName(): String {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.time = dateFormat.parse(_currentDate.value) ?: Date()&#10;        val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)&#10;&#10;        return when (dayOfWeek) {&#10;            Calendar.SUNDAY -&gt; &quot;Sunday&quot;&#10;            Calendar.MONDAY -&gt; &quot;Monday&quot;&#10;            Calendar.TUESDAY -&gt; &quot;Tuesday&quot;&#10;            Calendar.WEDNESDAY -&gt; &quot;Wednesday&quot;&#10;            Calendar.THURSDAY -&gt; &quot;Thursday&quot;&#10;            Calendar.FRIDAY -&gt; &quot;Friday&quot;&#10;            Calendar.SATURDAY -&gt; &quot;Saturday&quot;&#10;            else -&gt; &quot;Unknown&quot;&#10;        }&#10;    }&#10;&#10;    fun getWorkoutTypeName(): String {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.time = dateFormat.parse(_currentDate.value) ?: Date()&#10;        val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)&#10;&#10;        return when (dayOfWeek) {&#10;            Calendar.MONDAY -&gt; &quot;Push Day 1 (Chest, Shoulders, Triceps)&quot;&#10;            Calendar.TUESDAY -&gt; &quot;Pull Day 1 (Back, Biceps)&quot;&#10;            Calendar.WEDNESDAY -&gt; &quot;Legs Day 1 (Quads, Hamstrings, Glutes)&quot;&#10;            Calendar.THURSDAY -&gt; &quot;Push Day 2 (Shoulders, Chest, Triceps)&quot;&#10;            Calendar.FRIDAY -&gt; &quot;Pull Day 2 (Back, Biceps)&quot;&#10;            Calendar.SATURDAY -&gt; &quot;Legs Day 2 (Glutes, Quads, Hamstrings)&quot;&#10;            Calendar.SUNDAY -&gt; &quot;Rest Day&quot;&#10;            else -&gt; &quot;Rest Day&quot;&#10;        }&#10;    }&#10;&#10;    // New timer-related functions&#10;    fun startExerciseTimer(exerciseId: Int) {&#10;        // Stop any existing timer first&#10;        stopCurrentTimer()&#10;&#10;        // Start new timer for this exercise - timer will auto-update every second&#10;        workoutTimer.startTimer(exerciseId)&#10;    }&#10;&#10;    fun stopCurrentTimer() {&#10;        val currentExerciseId = workoutTimer.getCurrentExerciseId()&#10;        val timeSpent = workoutTimer.stopTimer()&#10;&#10;        // Save time to database if there was an active timer&#10;        if (currentExerciseId != null &amp;&amp; timeSpent &gt; 0) {&#10;            viewModelScope.launch {&#10;                repository.updateExerciseTime(currentExerciseId, timeSpent)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun handleExerciseToggle(exerciseId: Int, currentlyCompleted: Boolean): ToggleAction {&#10;        val currentTimerExercise = workoutTimer.getCurrentExerciseId()&#10;&#10;        return when {&#10;            // Starting an exercise (not completed -&gt; completed)&#10;            !currentlyCompleted -&gt; {&#10;                startExerciseTimer(exerciseId)&#10;                ToggleAction.START_TIMER&#10;            }&#10;            // Trying to reset a completed exercise -&gt; show warning&#10;            currentlyCompleted -&gt; {&#10;                ToggleAction.SHOW_RESET_WARNING&#10;            }&#10;            else -&gt; ToggleAction.NORMAL_TOGGLE&#10;        }&#10;    }&#10;&#10;    fun resetExerciseToStart(exerciseId: Int) {&#10;        viewModelScope.launch {&#10;            // Reset exercise to not completed and clear time&#10;            repository.updateExerciseDetails(exerciseId, sets = 0, reps = 0, isCompleted = false)&#10;            repository.updateExerciseTime(exerciseId, 0)&#10;&#10;            // Stop any running timer&#10;            if (workoutTimer.getCurrentExerciseId() == exerciseId) {&#10;                stopCurrentTimer()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun formatTime(seconds: Int): String = workoutTimer.formatTime(seconds)&#10;&#10;    fun saveTotalTimeSpent(totalSeconds: Int) {&#10;        viewModelScope.launch {&#10;            // Save the total workout time when all exercises are completed&#10;            val currentExerciseId = workoutTimer.getCurrentExerciseId()&#10;            if (currentExerciseId != null) {&#10;                repository.updateExerciseTime(currentExerciseId, totalSeconds)&#10;                stopCurrentTimer()&#10;            }&#10;        }&#10;    }&#10;&#10;    // Function to refresh data after database reset&#10;    fun refreshData() {&#10;        // Reset all state variables to initial state&#10;        _isLoading.value = true&#10;        _todaysWorkout.value = emptyList()&#10;        _completionProgress.value = 0f&#10;        _debugDate.value = null&#10;        _currentDate.value = dateFormat.format(Date())&#10;&#10;        // Stop any running timers&#10;        stopCurrentTimer()&#10;        workoutTimer.reset()&#10;&#10;        // Reload today's workout from scratch&#10;        loadTodaysWorkout()&#10;    }&#10;&#10;    // Force complete refresh - more aggressive reset for cache clearing&#10;    fun forceCompleteRefresh() {&#10;        // Cancel any existing data collection jobs&#10;        viewModelScope.launch {&#10;            // Reset all state variables to initial state&#10;            _isLoading.value = true&#10;            _todaysWorkout.value = emptyList()&#10;            _completionProgress.value = 0f&#10;            _debugDate.value = null&#10;            _currentDate.value = dateFormat.format(Date())&#10;&#10;            // Stop any running timers&#10;            stopCurrentTimer()&#10;            workoutTimer.reset()&#10;&#10;            // Force garbage collection to clear any cached references&#10;            System.gc()&#10;&#10;            // Wait a moment for cleanup&#10;            kotlinx.coroutines.delay(100)&#10;&#10;            // Reload today's workout from scratch&#10;            loadTodaysWorkout()&#10;        }&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        stopCurrentTimer()&#10;        workoutTimer.onCleared() // Properly clean up timer coroutines&#10;    }&#10;}&#10;&#10;class DailyWorkoutViewModelFactory(&#10;    private val repository: WorkoutRepository&#10;) : ViewModelProvider.Factory {&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(DailyWorkoutViewModel::class.java)) {&#10;            return DailyWorkoutViewModel(repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.data.database.PPLWorkoutDatabase&#10;import com.example.offlinepplworkoutapp.utils.WorkoutTimer&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import kotlinx.coroutines.Dispatchers&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class DailyWorkoutViewModel(&#10;    private val repository: WorkoutRepository&#10;) : ViewModel() {&#10;&#10;    private val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;&#10;    // Timer functionality&#10;    private val workoutTimer = WorkoutTimer()&#10;    private var timerJob: Job? = null&#10;&#10;    val timerSeconds = workoutTimer.elapsedSeconds&#10;    val isTimerRunning = workoutTimer.isTimerRunning&#10;&#10;    private val _todaysWorkout = MutableStateFlow&lt;List&lt;WorkoutEntryWithExercise&gt;&gt;(emptyList())&#10;    val todaysWorkout: StateFlow&lt;List&lt;WorkoutEntryWithExercise&gt;&gt; = _todaysWorkout.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _currentDate = MutableStateFlow(dateFormat.format(Date()))&#10;    val currentDate: StateFlow&lt;String&gt; = _currentDate.asStateFlow()&#10;&#10;    private val _completionProgress = MutableStateFlow(0f)&#10;    val completionProgress: StateFlow&lt;Float&gt; = _completionProgress.asStateFlow()&#10;&#10;    // Debug mode: allows overriding the current date for testing&#10;    private val _debugDate = MutableStateFlow&lt;String?&gt;(null)&#10;    val debugDate: StateFlow&lt;String?&gt; = _debugDate.asStateFlow()&#10;&#10;    // Template-related state&#10;    private val _availableTemplates = MutableStateFlow&lt;List&lt;com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate&gt;&gt;(emptyList())&#10;    val availableTemplates: StateFlow&lt;List&lt;com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate&gt;&gt; = _availableTemplates.asStateFlow()&#10;&#10;    private val _selectedTemplate = MutableStateFlow&lt;com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate?&gt;(null)&#10;    val selectedTemplate: StateFlow&lt;com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate?&gt; = _selectedTemplate.asStateFlow()&#10;&#10;    init {&#10;        loadTodaysWorkout()&#10;        loadAvailableTemplates()&#10;    }&#10;&#10;    private fun loadTodaysWorkout() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            repository.getTodaysWorkoutWithoutCreating().collect { exercises -&gt;&#10;                _todaysWorkout.value = exercises&#10;                _isLoading.value = false&#10;                updateCompletionProgress(exercises)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadWorkoutForDate(date: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            _currentDate.value = date&#10;            repository.getWorkoutForDateWithoutCreating(date).collect { exercises -&gt;&#10;                _todaysWorkout.value = exercises&#10;                _isLoading.value = false&#10;                updateCompletionProgress(exercises)&#10;            }&#10;        }&#10;    }&#10;&#10;    // New method to create today's workout when user wants to start&#10;    fun createTodaysWorkout() {&#10;        println(&quot; VIEWMODEL: createTodaysWorkout() called&quot;)&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            println(&quot; VIEWMODEL: Starting workout creation process...&quot;)&#10;&#10;            try {&#10;                repository.createTodaysWorkout().collect { exercises -&gt;&#10;                    println(&quot; VIEWMODEL: Received ${exercises.size} exercises from repository&quot;)&#10;                    _todaysWorkout.value = exercises&#10;                    _isLoading.value = false&#10;                    updateCompletionProgress(exercises)&#10;                    println(&quot; VIEWMODEL: Workout creation completed successfully&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                println(&quot; VIEWMODEL ERROR: Failed to create workout - ${e.message}&quot;)&#10;&#10;                // If foreign key constraint failed, try to populate exercises and retry&#10;                if (e.message?.contains(&quot;FOREIGN KEY constraint failed&quot;) == true) {&#10;                    println(&quot; VIEWMODEL: Foreign key error detected, trying to populate exercises...&quot;)&#10;                    try {&#10;                        // Use the database to populate exercises&#10;                        val context = kotlinx.coroutines.Dispatchers.Main.immediate&#10;                        kotlinx.coroutines.withContext(context) {&#10;                            // Force populate exercises through the database&#10;                            PPLWorkoutDatabase.forcePopulateExercises()&#10;&#10;                            // Retry workout creation after populating exercises&#10;                            repository.createTodaysWorkout().collect { exercises -&gt;&#10;                                println(&quot; VIEWMODEL: RETRY - Received ${exercises.size} exercises from repository&quot;)&#10;                                _todaysWorkout.value = exercises&#10;                                _isLoading.value = false&#10;                                updateCompletionProgress(exercises)&#10;                                println(&quot; VIEWMODEL: RETRY - Workout creation completed successfully&quot;)&#10;                            }&#10;                        }&#10;                    } catch (retryException: Exception) {&#10;                        println(&quot; VIEWMODEL ERROR: Retry also failed - ${retryException.message}&quot;)&#10;                        _isLoading.value = false&#10;                    }&#10;                } else {&#10;                    _isLoading.value = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Debug function to simulate different days&#10;    fun setDebugDate(date: String?) {&#10;        _debugDate.value = date&#10;        if (date == null) {&#10;            // Reset to today - use the original loadTodaysWorkout function&#10;            _currentDate.value = dateFormat.format(Date())&#10;            loadTodaysWorkout()&#10;        } else {&#10;            // Load specific debug date&#10;            loadWorkoutForDate(date)&#10;        }&#10;    }&#10;&#10;    fun toggleExerciseCompletion(entryId: Int) {&#10;        viewModelScope.launch {&#10;            repository.toggleExerciseCompletion(entryId)&#10;        }&#10;    }&#10;&#10;    fun markExerciseComplete(entryId: Int, isCompleted: Boolean) {&#10;        viewModelScope.launch {&#10;            repository.markExerciseComplete(entryId, isCompleted)&#10;        }&#10;    }&#10;&#10;    fun updateExercise(entryId: Int, sets: Int, reps: Int, isCompleted: Boolean) {&#10;        println(&quot; VIEWMODEL: updateExercise called - entryId: $entryId, sets: $sets, reps: $reps, isCompleted: $isCompleted&quot;)&#10;        viewModelScope.launch {&#10;            repository.updateExerciseDetails(entryId, sets, reps, isCompleted)&#10;            println(&quot; VIEWMODEL: updateExercise completed for entryId: $entryId&quot;)&#10;        }&#10;    }&#10;&#10;    private fun updateCompletionProgress(exercises: List&lt;WorkoutEntryWithExercise&gt;) {&#10;        if (exercises.isEmpty()) {&#10;            _completionProgress.value = 0f&#10;            return&#10;        }&#10;&#10;        val completedCount = exercises.count { it.isCompleted }&#10;        _completionProgress.value = completedCount.toFloat() / exercises.size.toFloat()&#10;    }&#10;&#10;    fun getCompletionPercentage(): Int {&#10;        return (_completionProgress.value * 100).toInt()&#10;    }&#10;&#10;    fun getCurrentDayName(): String {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.time = dateFormat.parse(_currentDate.value) ?: Date()&#10;        val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)&#10;&#10;        return when (dayOfWeek) {&#10;            Calendar.SUNDAY -&gt; &quot;Sunday&quot;&#10;            Calendar.MONDAY -&gt; &quot;Monday&quot;&#10;            Calendar.TUESDAY -&gt; &quot;Tuesday&quot;&#10;            Calendar.WEDNESDAY -&gt; &quot;Wednesday&quot;&#10;            Calendar.THURSDAY -&gt; &quot;Thursday&quot;&#10;            Calendar.FRIDAY -&gt; &quot;Friday&quot;&#10;            Calendar.SATURDAY -&gt; &quot;Saturday&quot;&#10;            else -&gt; &quot;Unknown&quot;&#10;        }&#10;    }&#10;&#10;    fun getWorkoutTypeName(): String {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.time = dateFormat.parse(_currentDate.value) ?: Date()&#10;        val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)&#10;&#10;        return when (dayOfWeek) {&#10;            Calendar.MONDAY -&gt; &quot;Push Day 1 (Chest, Shoulders, Triceps)&quot;&#10;            Calendar.TUESDAY -&gt; &quot;Pull Day 1 (Back, Biceps)&quot;&#10;            Calendar.WEDNESDAY -&gt; &quot;Legs Day 1 (Quads, Hamstrings, Glutes)&quot;&#10;            Calendar.THURSDAY -&gt; &quot;Push Day 2 (Shoulders, Chest, Triceps)&quot;&#10;            Calendar.FRIDAY -&gt; &quot;Pull Day 2 (Back, Biceps)&quot;&#10;            Calendar.SATURDAY -&gt; &quot;Legs Day 2 (Glutes, Quads, Hamstrings)&quot;&#10;            Calendar.SUNDAY -&gt; &quot;Rest Day&quot;&#10;            else -&gt; &quot;Rest Day&quot;&#10;        }&#10;    }&#10;&#10;    // New timer-related functions&#10;    fun startExerciseTimer(exerciseId: Int) {&#10;        // Stop any existing timer first&#10;        stopCurrentTimer()&#10;&#10;        // Start new timer for this exercise - timer will auto-update every second&#10;        workoutTimer.startTimer(exerciseId)&#10;    }&#10;&#10;    fun stopCurrentTimer() {&#10;        val currentExerciseId = workoutTimer.getCurrentExerciseId()&#10;        val timeSpent = workoutTimer.stopTimer()&#10;&#10;        // Save time to database if there was an active timer&#10;        if (currentExerciseId != null &amp;&amp; timeSpent &gt; 0) {&#10;            viewModelScope.launch {&#10;                repository.updateExerciseTime(currentExerciseId, timeSpent)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun handleExerciseToggle(exerciseId: Int, currentlyCompleted: Boolean): ToggleAction {&#10;        val currentTimerExercise = workoutTimer.getCurrentExerciseId()&#10;&#10;        return when {&#10;            // Starting an exercise (not completed -&gt; completed)&#10;            !currentlyCompleted -&gt; {&#10;                startExerciseTimer(exerciseId)&#10;                ToggleAction.START_TIMER&#10;            }&#10;            // Trying to reset a completed exercise -&gt; show warning&#10;            currentlyCompleted -&gt; {&#10;                ToggleAction.SHOW_RESET_WARNING&#10;            }&#10;            else -&gt; ToggleAction.NORMAL_TOGGLE&#10;        }&#10;    }&#10;&#10;    fun resetExerciseToStart(exerciseId: Int) {&#10;        viewModelScope.launch {&#10;            // Reset exercise to not completed and clear time&#10;            repository.updateExerciseDetails(exerciseId, sets = 0, reps = 0, isCompleted = false)&#10;            repository.updateExerciseTime(exerciseId, 0)&#10;&#10;            // Stop any running timer&#10;            if (workoutTimer.getCurrentExerciseId() == exerciseId) {&#10;                stopCurrentTimer()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun formatTime(seconds: Int): String = workoutTimer.formatTime(seconds)&#10;&#10;    fun saveTotalTimeSpent(totalSeconds: Int) {&#10;        viewModelScope.launch {&#10;            // Save the total workout time when all exercises are completed&#10;            val currentExerciseId = workoutTimer.getCurrentExerciseId()&#10;            if (currentExerciseId != null) {&#10;                repository.updateExerciseTime(currentExerciseId, totalSeconds)&#10;                stopCurrentTimer()&#10;            }&#10;        }&#10;    }&#10;&#10;    // Function to refresh data after database reset&#10;    fun refreshData() {&#10;        // Reset all state variables to initial state&#10;        _isLoading.value = true&#10;        _todaysWorkout.value = emptyList()&#10;        _completionProgress.value = 0f&#10;        _debugDate.value = null&#10;        _currentDate.value = dateFormat.format(Date())&#10;&#10;        // Stop any running timers&#10;        stopCurrentTimer()&#10;        workoutTimer.reset()&#10;&#10;        // Reload today's workout from scratch&#10;        loadTodaysWorkout()&#10;    }&#10;&#10;    // Force complete refresh - more aggressive reset for cache clearing&#10;    fun forceCompleteRefresh() {&#10;        // Cancel any existing data collection jobs&#10;        viewModelScope.launch {&#10;            // Reset all state variables to initial state&#10;            _isLoading.value = true&#10;            _todaysWorkout.value = emptyList()&#10;            _completionProgress.value = 0f&#10;            _debugDate.value = null&#10;            _currentDate.value = dateFormat.format(Date())&#10;&#10;            // Stop any running timers&#10;            stopCurrentTimer()&#10;            workoutTimer.reset()&#10;&#10;            // Force garbage collection to clear any cached references&#10;            System.gc()&#10;&#10;            // Wait a moment for cleanup&#10;            kotlinx.coroutines.delay(100)&#10;&#10;            // Reload today's workout from scratch&#10;            loadTodaysWorkout()&#10;        }&#10;    }&#10;&#10;    // ===========================================&#10;    // NEW TEMPLATE-BASED METHODS&#10;    // ===========================================&#10;&#10;    /**&#10;     * Create today's workout using template system - NEW APPROACH&#10;     * This will replace the legacy createTodaysWorkout() method&#10;     */&#10;    fun createTodaysWorkoutFromTemplate() {&#10;        println(&quot; VIEWMODEL: createTodaysWorkoutFromTemplate() called&quot;)&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            println(&quot; VIEWMODEL: Starting template-based workout creation...&quot;)&#10;&#10;            try {&#10;                repository.createTodaysWorkoutFromTemplate().collect { exercises -&gt;&#10;                    println(&quot; VIEWMODEL: Received ${exercises.size} exercises from template&quot;)&#10;                    _todaysWorkout.value = exercises&#10;                    _isLoading.value = false&#10;                    updateCompletionProgress(exercises)&#10;                    println(&quot; VIEWMODEL: Template-based workout creation completed successfully&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                println(&quot; VIEWMODEL ERROR: Failed to create workout from template - ${e.message}&quot;)&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Create workout from specific template&#10;     */&#10;    fun createWorkoutFromTemplate(templateId: Int, date: String = dateFormat.format(Date())) {&#10;        println(&quot; VIEWMODEL: createWorkoutFromTemplate() called - templateId: $templateId, date: $date&quot;)&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;&#10;            try {&#10;                repository.createWorkoutFromTemplate(templateId, date).collect { exercises -&gt;&#10;                    println(&quot; VIEWMODEL: Received ${exercises.size} exercises from template $templateId&quot;)&#10;                    _todaysWorkout.value = exercises&#10;                    _isLoading.value = false&#10;                    updateCompletionProgress(exercises)&#10;                }&#10;            } catch (e: Exception) {&#10;                println(&quot; VIEWMODEL ERROR: Failed to create workout from template $templateId - ${e.message}&quot;)&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Load available templates for user selection&#10;     */&#10;    private fun loadAvailableTemplates() {&#10;        viewModelScope.launch {&#10;            repository.getAvailableTemplates().collect { templates -&gt;&#10;                _availableTemplates.value = templates&#10;                println(&quot; VIEWMODEL: Loaded ${templates.size} available templates&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get templates by category (Push/Pull/Legs)&#10;     */&#10;    fun getTemplatesByCategory(category: String) {&#10;        viewModelScope.launch {&#10;            repository.getTemplatesByCategory(category).collect { templates -&gt;&#10;                _availableTemplates.value = templates&#10;                println(&quot; VIEWMODEL: Loaded ${templates.size} templates for category: $category&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Select a template for workout creation&#10;     */&#10;    fun selectTemplate(template: com.example.offlinepplworkoutapp.data.entity.WorkoutTemplate) {&#10;        _selectedTemplate.value = template&#10;        println(&quot; VIEWMODEL: Selected template: ${template.name}&quot;)&#10;    }&#10;&#10;    /**&#10;     * Create workout from currently selected template&#10;     */&#10;    fun createWorkoutFromSelectedTemplate() {&#10;        val template = _selectedTemplate.value&#10;        if (template != null) {&#10;            createWorkoutFromTemplate(template.id, _currentDate.value)&#10;        } else {&#10;            println(&quot; VIEWMODEL ERROR: No template selected&quot;)&#10;        }&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        stopCurrentTimer()&#10;        workoutTimer.onCleared() // Properly clean up timer coroutines&#10;    }&#10;}&#10;&#10;class DailyWorkoutViewModelFactory(&#10;    private val repository: WorkoutRepository&#10;) : ViewModelProvider.Factory {&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(DailyWorkoutViewModel::class.java)) {&#10;            return DailyWorkoutViewModel(repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>