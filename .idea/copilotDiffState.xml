<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/navigation/NavigationGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/navigation/NavigationGraph.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.screens.HistoryScreen&#10;import com.example.offlinepplworkoutapp.ui.screens.HomeScreen&#10;import com.example.offlinepplworkoutapp.ui.screens.PerformanceScreen&#10;import com.example.offlinepplworkoutapp.ui.screens.SettingsScreen&#10;&#10;sealed class Screen(val route: String) {&#10;    object Home : Screen(&quot;home&quot;)&#10;    object History : Screen(&quot;history&quot;)&#10;    object Performance : Screen(&quot;performance&quot;)&#10;    object Settings : Screen(&quot;settings&quot;)&#10;    object ExerciseDetail : Screen(&quot;exercise_detail&quot;)&#10;}&#10;&#10;@Composable&#10;fun NavigationGraph(&#10;    navController: NavHostController,&#10;    repository: WorkoutRepository,&#10;    onNavigateToExerciseDetail: () -&gt; Unit&#10;) {&#10;    // Store selected exercise at the navigation graph level&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;    &#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Screen.Home.route&#10;    ) {&#10;        composable(Screen.Home.route) {&#10;            HomeScreen(&#10;                repository = repository,&#10;                onNavigateToExerciseDetail = {&#10;                    // When navigating to exercise detail, we'll handle it within the HomeScreen&#10;                    // This is because we need to maintain the exercise state there&#10;                    onNavigateToExerciseDetail()&#10;                }&#10;            )&#10;        }&#10;        &#10;        composable(Screen.History.route) {&#10;            HistoryScreen(repository = repository)&#10;        }&#10;        &#10;        composable(Screen.Performance.route) {&#10;            PerformanceScreen(repository = repository)&#10;        }&#10;        &#10;        composable(Screen.Settings.route) {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/BottomNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/BottomNavigation.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.components&#10;&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import com.example.offlinepplworkoutapp.R&#10;import com.example.offlinepplworkoutapp.navigation.Screen&#10;&#10;@Composable&#10;fun BottomNavigation(navController: NavController) {&#10;    val items = listOf(&#10;        BottomNavItem(Screen.Home.route, &quot;Home&quot;, R.drawable.ic_home),&#10;        BottomNavItem(Screen.History.route, &quot;History&quot;, R.drawable.ic_history),&#10;        BottomNavItem(Screen.Performance.route, &quot;Performance&quot;, R.drawable.ic_performance),&#10;        BottomNavItem(Screen.Settings.route, &quot;Settings&quot;, R.drawable.ic_settings)&#10;    )&#10;&#10;    NavigationBar(&#10;        containerColor = MaterialTheme.colorScheme.surface&#10;    ) {&#10;        val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;        val currentRoute = navBackStackEntry?.destination?.route&#10;        &#10;        items.forEach { item -&gt;&#10;            NavigationBarItem(&#10;                icon = { &#10;                    Icon(&#10;                        painter = painterResource(id = item.icon), &#10;                        contentDescription = item.title&#10;                    )&#10;                },&#10;                label = { &#10;                    Text(&#10;                        text = item.title,&#10;                        fontSize = 12.sp&#10;                    ) &#10;                },&#10;                selected = currentRoute == item.route,&#10;                onClick = {&#10;                    if (currentRoute != item.route) {&#10;                        navController.navigate(item.route) {&#10;                            // Pop up to the start destination of the graph to&#10;                            // avoid building up a large stack of destinations&#10;                            popUpTo(navController.graph.startDestinationId) {&#10;                                saveState = true&#10;                            }&#10;                            // Avoid multiple copies of the same destination&#10;                            launchSingleTop = true&#10;                            // Restore state when re-selecting a previously selected item&#10;                            restoreState = true&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val title: String,&#10;    val icon: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/DebugDaySelector.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/DebugDaySelector.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.components&#10;&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.offlinepplworkoutapp.data.database.PPLWorkoutDatabase&#10;import kotlinx.coroutines.launch&#10;import java.util.Calendar&#10;&#10;@Composable&#10;fun DebugDaySelector(&#10;    onDaySelected: (Int) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit,&#10;    onResetDatabase: () -&gt; Unit = {}&#10;) {&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot; Debug Day Selector&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            LazyColumn {&#10;                item {&#10;                    Text(&#10;                        text = &quot;Select a day to test different workouts:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;                }&#10;&#10;                val days = listOf(&#10;                    Calendar.MONDAY to &quot;Monday - Push Day 1 &quot;,&#10;                    Calendar.TUESDAY to &quot;Tuesday - Pull Day 1 ️&quot;,&#10;                    Calendar.WEDNESDAY to &quot;Wednesday - Legs Day 1 &quot;,&#10;                    Calendar.THURSDAY to &quot;Thursday - Push Day 2 &quot;,&#10;                    Calendar.FRIDAY to &quot;Friday - Pull Day 2 ️&quot;,&#10;                    Calendar.SATURDAY to &quot;Saturday - Legs Day 2 &quot;,&#10;                    Calendar.SUNDAY to &quot;Sunday - Rest Day ‍♂️&quot;&#10;                )&#10;&#10;                items(days) { (dayOfWeek, dayLabel) -&gt;&#10;                    OutlinedButton(&#10;                        onClick = { onDaySelected(dayOfWeek) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 4.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            containerColor = if (dayOfWeek == Calendar.SUNDAY)&#10;                                MaterialTheme.colorScheme.secondaryContainer&#10;                            else&#10;                                MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = dayLabel,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(8.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Debug Actions:&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Checking current database state...&quot;)&#10;                                val currentState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; CURRENT STATE: ${currentState.first} days, ${currentState.second} entries, ${currentState.third} sets&quot;)&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Check DB State&quot;)&#10;                    }&#10;                }&#10;&#10;                item {&#10;                    Button(&#10;                        onClick = {&#10;                            coroutineScope.launch {&#10;                                println(&quot; DEBUG: Force reset database...&quot;)&#10;                                PPLWorkoutDatabase.forceResetDatabase(context)&#10;                                kotlinx.coroutines.delay(200)&#10;                                val afterState = PPLWorkoutDatabase.verifyDatabaseEmpty()&#10;                                println(&quot; AFTER FORCE RESET: ${afterState.first} days, ${afterState.second} entries, ${afterState.third} sets&quot;)&#10;                                onResetDatabase()&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 2.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    ) {&#10;                        Text(&quot; Reset Database&quot;)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {},&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/ScrollbarExtensions.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/components/ScrollbarExtensions.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/MainScreenContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/MainScreenContent.kt" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.offlinepplworkoutapp.R&#10;import com.example.offlinepplworkoutapp.data.dao.WorkoutEntryWithExercise&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;import com.example.offlinepplworkoutapp.ui.components.DebugDaySelector&#10;import com.example.offlinepplworkoutapp.ui.viewmodel.DailyWorkoutViewModel&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun MainScreenContent(&#10;    viewModel: DailyWorkoutViewModel,&#10;    showDebugMenu: Boolean,&#10;    showResetConfirmation: Boolean,&#10;    showTemplateSelection: Boolean,&#10;    onShowDebugMenu: (Boolean) -&gt; Unit,&#10;    onShowResetConfirmation: (Boolean) -&gt; Unit,&#10;    onShowTemplateSelection: (Boolean) -&gt; Unit,&#10;    onNavigateToExerciseDetail: (WorkoutEntryWithExercise) -&gt; Unit,&#10;    repository: WorkoutRepository&#10;) {&#10;    val workoutEntries by viewModel.todaysWorkout.collectAsState(initial = emptyList())&#10;    val currentDate by viewModel.currentDate.collectAsState(initial = &quot;&quot;)&#10;    // Use a getter function for the workout type&#10;    val workoutType = viewModel.getWorkoutTypeName()&#10;    val isLoading by viewModel.isLoading.collectAsState(initial = false)&#10;    // Check if it's a rest day by comparing workout type&#10;    val isRestDay = workoutType == &quot;Rest Day&quot;&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var selectedExercise by remember { mutableStateOf&lt;WorkoutEntryWithExercise?&gt;(null) }&#10;&#10;    LaunchedEffect(selectedExercise) {&#10;        if (selectedExercise != null) {&#10;            onNavigateToExerciseDetail(selectedExercise!!)&#10;        }&#10;    }&#10;&#10;    if (showDebugMenu) {&#10;        DebugDaySelector(&#10;            onDaySelected = { day -&gt;&#10;                viewModel.setDebugDate(day.toString())&#10;                onShowDebugMenu(false)&#10;            },&#10;            onDismiss = { onShowDebugMenu(false) },&#10;            onResetDatabase = {&#10;                onShowResetConfirmation(true)&#10;                onShowDebugMenu(false)&#10;            }&#10;        )&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Top bar with date and workout type&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = currentDate,&#10;                    style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = workoutType,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;&#10;                // Show a &quot;Create Template&quot; button if no workout is available&#10;                if (workoutEntries.isEmpty() &amp;&amp; !isLoading &amp;&amp; !isRestDay) {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Button(&#10;                        onClick = { onShowTemplateSelection(true) }&#10;                    ) {&#10;                        Row(verticalAlignment = Alignment.CenterVertically) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.PlayArrow,&#10;                                contentDescription = &quot;Start&quot;&#10;                            )&#10;                            Text(&#10;                                text = &quot;Select Workout Template&quot;,&#10;                                modifier = Modifier.padding(start = 8.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Content section with workout exercises or rest day message&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    CircularProgressIndicator()&#10;                }&#10;                isRestDay -&gt; {&#10;                    // Show rest day image and message&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Image(&#10;                            painter = painterResource(id = R.drawable.rest_day),&#10;                            contentDescription = &quot;Rest day&quot;,&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentScale = ContentScale.Crop,&#10;                            alpha = 0.3f&#10;                        )&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .padding(16.dp)&#10;                                .align(Alignment.Center),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.8f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .padding(24.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;REST DAY&quot;,&#10;                                    style = MaterialTheme.typography.headlineLarge.copy(&#10;                                        fontWeight = FontWeight.Bold&#10;                                    ),&#10;                                    color = MaterialTheme.colorScheme.primary&#10;                                )&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;                                Text(&#10;                                    text = &quot;Take time to recover and prepare for your next workout.&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                workoutEntries.isEmpty() -&gt; {&#10;                    // Show message when no workout is available (but it's not a rest day)&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No workout available for today.&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(&#10;                            onClick = { onShowTemplateSelection(true) }&#10;                        ) {&#10;                            Text(text = &quot;Select a Workout Template&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    // Show workout exercises&#10;                    LazyColumn {&#10;                        items(workoutEntries) { entry -&gt;&#10;                            val secondsSpent = entry.totalSecondsSpent ?: 0&#10;                            val timeDisplay = when {&#10;                                secondsSpent &lt; 60 -&gt; &quot;${secondsSpent}s&quot;&#10;                                else -&gt; {&#10;                                    val minutes = secondsSpent / 60&#10;                                    val remainingSeconds = secondsSpent % 60&#10;                                    if (remainingSeconds == 0) &quot;${minutes}m&quot; else &quot;${minutes}m ${remainingSeconds}s&quot;&#10;                                }&#10;                            }&#10;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(vertical = 4.dp)&#10;                                    .clickable {&#10;                                        selectedExercise = entry&#10;                                    },&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = if (entry.isCompleted)&#10;                                        MaterialTheme.colorScheme.secondaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.surface&#10;                                )&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Column(modifier = Modifier.weight(1f)) {&#10;                                        Text(&#10;                                            text = entry.exerciseName,&#10;                                            style = MaterialTheme.typography.titleMedium,&#10;                                            color = if (entry.isCompleted)&#10;                                                MaterialTheme.colorScheme.onSecondaryContainer&#10;                                            else&#10;                                                MaterialTheme.colorScheme.onSurface&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${entry.sets} sets × ${entry.reps} reps&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium,&#10;                                            color = if (entry.isCompleted)&#10;                                                MaterialTheme.colorScheme.onSecondaryContainer&#10;                                            else&#10;                                                MaterialTheme.colorScheme.onSurfaceVariant&#10;                                        )&#10;&#10;                                        // Display time spent&#10;                                        if (entry.totalSecondsSpent &gt; 0) {&#10;                                            Text(&#10;                                                text = &quot;Time: $timeDisplay&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall,&#10;                                                color = if (entry.isCompleted)&#10;                                                    MaterialTheme.colorScheme.onSecondaryContainer&#10;                                                else&#10;                                                    MaterialTheme.colorScheme.onSurfaceVariant&#10;                                            )&#10;                                        }&#10;                                    }&#10;&#10;                                    if (entry.isCompleted) {&#10;                                        Text(&#10;                                            text = &quot;✓&quot;,&#10;                                            style = MaterialTheme.typography.titleLarge,&#10;                                            color = MaterialTheme.colorScheme.primary&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/PerformanceScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/PerformanceScreen.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * Performance screen placeholder - to be implemented in future releases&#10; */&#10;@Composable&#10;fun PerformanceScreen() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Performance tracking\nComing soon&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/PlaceholderScreens.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/PlaceholderScreens.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.offlinepplworkoutapp.data.repository.WorkoutRepository&#10;&#10;@Composable&#10;fun HistoryScreen(repository: WorkoutRepository) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize().padding(16.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Workout History\n\nComing Soon&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PerformanceScreen(repository: WorkoutRepository) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize().padding(16.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Performance Analytics\n\nComing Soon&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingsScreen() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize().padding(16.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Settings\n\nComing Soon&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/SettingsScreen.kt" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * Settings screen placeholder - to be implemented in future releases&#10; */&#10;@Composable&#10;fun SettingsScreen() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Settings\nComing soon&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/history/components/HistoryDateSelector.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/history/components/HistoryDateSelector.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp.ui.screens.history.components&#10;&#10;class HistoryDateSelector {&#10;}" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens.history.components&#10;&#10;class HistoryDateSelector {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/history/components/HistoryExerciseCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/history/components/HistoryExerciseCard.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp.ui.screens.history.components&#10;&#10;class HistoryExerciseCard {&#10;}" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens.history.components&#10;&#10;class HistoryExerciseCard {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/history/components/WorkoutSummaryCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/offlinepplworkoutapp/ui/screens/history/components/WorkoutSummaryCard.kt" />
              <option name="originalContent" value="package com.example.offlinepplworkoutapp.ui.screens.history.components&#10;&#10;class WorkoutSummaryCard {&#10;}" />
              <option name="updatedContent" value="package com.example.offlinepplworkoutapp.ui.screens.history.components&#10;&#10;class WorkoutSummaryCard {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_history.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_history.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M13,3c-4.97,0 -9,4.03 -9,9L1,12l3.89,3.89 0.07,0.14L9,12L6,12c0,-3.87 3.13,-7 7,-7s7,3.13 7,7 -3.13,7 -7,7c-1.93,0 -3.68,-0.79 -4.94,-2.06l-1.42,1.42C8.27,19.99 10.51,21 13,21c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08L13.5,8L12,8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_performance.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_performance.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M19,3L5,3c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2L21,5c0,-1.1 -0.9,-2 -2,-2zM9,17L7,17v-7h2v7zM13,17h-2L11,7h2v10zM17,17h-2v-4h2v4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94c0,-0.32 -0.02,-0.64 -0.07,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.12,-0.22 -0.37,-0.29 -0.59,-0.22l-2.39,0.96c-0.5,-0.38 -1.03,-0.7 -1.62,-0.94L14.4,2.81c-0.04,-0.24 -0.24,-0.41 -0.48,-0.41h-3.84c-0.24,0 -0.43,0.17 -0.47,0.41L9.25,5.35C8.66,5.59 8.12,5.92 7.63,6.29L5.24,5.33c-0.22,-0.08 -0.47,0 -0.59,0.22L2.74,8.87C2.62,9.08 2.66,9.34 2.86,9.48l2.03,1.58C4.84,11.36 4.8,11.69 4.8,12s0.02,0.64 0.07,0.94l-2.03,1.58c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.12,0.22 0.37,0.29 0.59,0.22l2.39,-0.96c0.5,0.38 1.03,0.7 1.62,0.94l0.36,2.54c0.05,0.24 0.24,0.41 0.48,0.41h3.84c0.24,0 0.44,-0.17 0.47,-0.41l0.36,-2.54c0.59,-0.24 1.13,-0.56 1.62,-0.94l2.39,0.96c0.22,0.08 0.47,0 0.59,-0.22l1.92,-3.32c0.12,-0.22 0.07,-0.47 -0.12,-0.61L19.14,12.94zM12,15.6c-1.98,0 -3.6,-1.62 -3.6,-3.6s1.62,-3.6 3.6,-3.6s3.6,1.62 3.6,3.6S13.98,15.6 12,15.6z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>